
Finalpartb.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006b94  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08006d1c  08006d1c  00016d1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006d2c  08006d2c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08006d2c  08006d2c  00016d2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006d34  08006d34  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006d34  08006d34  00016d34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006d38  08006d38  00016d38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08006d3c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          00000610  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000061c  2000061c  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000122e2  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002899  00000000  00000000  0003231e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001050  00000000  00000000  00034bb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000f28  00000000  00000000  00035c08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000235fb  00000000  00000000  00036b30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012976  00000000  00000000  0005a12b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d9158  00000000  00000000  0006caa1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00145bf9  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004508  00000000  00000000  00145c4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08006d04 	.word	0x08006d04

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08006d04 	.word	0x08006d04

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b086      	sub	sp, #24
 80004d0:	af00      	add	r7, sp, #0
int main(void)
 80004d2:	f107 0320 	add.w	r3, r7, #32
 80004d6:	617b      	str	r3, [r7, #20]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d8:	f000 fbd6 	bl	8000c88 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004dc:	f000 f854 	bl	8000588 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e0:	f000 f9fe 	bl	80008e0 <MX_GPIO_Init>
  MX_ADC1_Init();
 80004e4:	f000 f8ba 	bl	800065c <MX_ADC1_Init>
  MX_TIM3_Init();
 80004e8:	f000 f90a 	bl	8000700 <MX_TIM3_Init>
  MX_TIM4_Init();
 80004ec:	f000 f980 	bl	80007f0 <MX_TIM4_Init>

  /* USER CODE BEGIN 2 */

	  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80004f0:	2100      	movs	r1, #0
 80004f2:	481e      	ldr	r0, [pc, #120]	; (800056c <main+0xa0>)
 80004f4:	f003 f874 	bl	80035e0 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 80004f8:	2100      	movs	r1, #0
 80004fa:	481d      	ldr	r0, [pc, #116]	; (8000570 <main+0xa4>)
 80004fc:	f003 f870 	bl	80035e0 <HAL_TIM_PWM_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  float lr=0.2;
 8000500:	4b1c      	ldr	r3, [pc, #112]	; (8000574 <main+0xa8>)
 8000502:	607b      	str	r3, [r7, #4]
	  float weights[2] = {adc_value, adc_value1};
 8000504:	4b1c      	ldr	r3, [pc, #112]	; (8000578 <main+0xac>)
 8000506:	681b      	ldr	r3, [r3, #0]
 8000508:	60fb      	str	r3, [r7, #12]
 800050a:	4b1c      	ldr	r3, [pc, #112]	; (800057c <main+0xb0>)
 800050c:	681b      	ldr	r3, [r3, #0]
 800050e:	613b      	str	r3, [r7, #16]
	  	float bias = -0.5;
 8000510:	f04f 433f 	mov.w	r3, #3204448256	; 0xbf000000
 8000514:	60bb      	str	r3, [r7, #8]
//Burada pwm'i adc ile okuyorum
	  HAL_ADC_Start(&hadc1);
 8000516:	481a      	ldr	r0, [pc, #104]	; (8000580 <main+0xb4>)
 8000518:	f000 fc6c 	bl	8000df4 <HAL_ADC_Start>
	  if(HAL_ADC_PollForConversion(&hadc1,10)==HAL_OK){
 800051c:	210a      	movs	r1, #10
 800051e:	4818      	ldr	r0, [pc, #96]	; (8000580 <main+0xb4>)
 8000520:	f000 fd6d 	bl	8000ffe <HAL_ADC_PollForConversion>
 8000524:	4603      	mov	r3, r0
 8000526:	2b00      	cmp	r3, #0
 8000528:	d11b      	bne.n	8000562 <main+0x96>
    adc_value = HAL_ADC_GetValue(&hadc1)/(float) res;
 800052a:	4815      	ldr	r0, [pc, #84]	; (8000580 <main+0xb4>)
 800052c:	f000 fdf2 	bl	8001114 <HAL_ADC_GetValue>
 8000530:	ee07 0a90 	vmov	s15, r0
 8000534:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000538:	eddf 6a12 	vldr	s13, [pc, #72]	; 8000584 <main+0xb8>
 800053c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000540:	4b0d      	ldr	r3, [pc, #52]	; (8000578 <main+0xac>)
 8000542:	edc3 7a00 	vstr	s15, [r3]
    adc_value1 = HAL_ADC_GetValue(&hadc1)/(float) res;
 8000546:	480e      	ldr	r0, [pc, #56]	; (8000580 <main+0xb4>)
 8000548:	f000 fde4 	bl	8001114 <HAL_ADC_GetValue>
 800054c:	ee07 0a90 	vmov	s15, r0
 8000550:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000554:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8000584 <main+0xb8>
 8000558:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800055c:	4b07      	ldr	r3, [pc, #28]	; (800057c <main+0xb0>)
 800055e:	edc3 7a00 	vstr	s15, [r3]


        }

	  }
    HAL_ADC_Stop(&hadc1);
 8000562:	4807      	ldr	r0, [pc, #28]	; (8000580 <main+0xb4>)
 8000564:	f000 fd18 	bl	8000f98 <HAL_ADC_Stop>
  {
 8000568:	e7ca      	b.n	8000500 <main+0x34>
 800056a:	bf00      	nop
 800056c:	20000078 	.word	0x20000078
 8000570:	200000c0 	.word	0x200000c0
 8000574:	3e4ccccd 	.word	0x3e4ccccd
 8000578:	20000028 	.word	0x20000028
 800057c:	2000002c 	.word	0x2000002c
 8000580:	20000030 	.word	0x20000030
 8000584:	45800000 	.word	0x45800000

08000588 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b094      	sub	sp, #80	; 0x50
 800058c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800058e:	f107 0320 	add.w	r3, r7, #32
 8000592:	2230      	movs	r2, #48	; 0x30
 8000594:	2100      	movs	r1, #0
 8000596:	4618      	mov	r0, r3
 8000598:	f006 fbac 	bl	8006cf4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800059c:	f107 030c 	add.w	r3, r7, #12
 80005a0:	2200      	movs	r2, #0
 80005a2:	601a      	str	r2, [r3, #0]
 80005a4:	605a      	str	r2, [r3, #4]
 80005a6:	609a      	str	r2, [r3, #8]
 80005a8:	60da      	str	r2, [r3, #12]
 80005aa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005ac:	2300      	movs	r3, #0
 80005ae:	60bb      	str	r3, [r7, #8]
 80005b0:	4b28      	ldr	r3, [pc, #160]	; (8000654 <SystemClock_Config+0xcc>)
 80005b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005b4:	4a27      	ldr	r2, [pc, #156]	; (8000654 <SystemClock_Config+0xcc>)
 80005b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005ba:	6413      	str	r3, [r2, #64]	; 0x40
 80005bc:	4b25      	ldr	r3, [pc, #148]	; (8000654 <SystemClock_Config+0xcc>)
 80005be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005c4:	60bb      	str	r3, [r7, #8]
 80005c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005c8:	2300      	movs	r3, #0
 80005ca:	607b      	str	r3, [r7, #4]
 80005cc:	4b22      	ldr	r3, [pc, #136]	; (8000658 <SystemClock_Config+0xd0>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	4a21      	ldr	r2, [pc, #132]	; (8000658 <SystemClock_Config+0xd0>)
 80005d2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005d6:	6013      	str	r3, [r2, #0]
 80005d8:	4b1f      	ldr	r3, [pc, #124]	; (8000658 <SystemClock_Config+0xd0>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005e0:	607b      	str	r3, [r7, #4]
 80005e2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005e4:	2301      	movs	r3, #1
 80005e6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005e8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005ec:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005ee:	2302      	movs	r3, #2
 80005f0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005f2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80005f8:	2304      	movs	r3, #4
 80005fa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80005fc:	2348      	movs	r3, #72	; 0x48
 80005fe:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000600:	2302      	movs	r3, #2
 8000602:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000604:	2307      	movs	r3, #7
 8000606:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000608:	f107 0320 	add.w	r3, r7, #32
 800060c:	4618      	mov	r0, r3
 800060e:	f002 facf 	bl	8002bb0 <HAL_RCC_OscConfig>
 8000612:	4603      	mov	r3, r0
 8000614:	2b00      	cmp	r3, #0
 8000616:	d001      	beq.n	800061c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000618:	f000 f998 	bl	800094c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800061c:	230f      	movs	r3, #15
 800061e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000620:	2302      	movs	r3, #2
 8000622:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000624:	2300      	movs	r3, #0
 8000626:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000628:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800062c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800062e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000632:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000634:	f107 030c 	add.w	r3, r7, #12
 8000638:	2102      	movs	r1, #2
 800063a:	4618      	mov	r0, r3
 800063c:	f002 fd30 	bl	80030a0 <HAL_RCC_ClockConfig>
 8000640:	4603      	mov	r3, r0
 8000642:	2b00      	cmp	r3, #0
 8000644:	d001      	beq.n	800064a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000646:	f000 f981 	bl	800094c <Error_Handler>
  }
}
 800064a:	bf00      	nop
 800064c:	3750      	adds	r7, #80	; 0x50
 800064e:	46bd      	mov	sp, r7
 8000650:	bd80      	pop	{r7, pc}
 8000652:	bf00      	nop
 8000654:	40023800 	.word	0x40023800
 8000658:	40007000 	.word	0x40007000

0800065c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b084      	sub	sp, #16
 8000660:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000662:	463b      	mov	r3, r7
 8000664:	2200      	movs	r2, #0
 8000666:	601a      	str	r2, [r3, #0]
 8000668:	605a      	str	r2, [r3, #4]
 800066a:	609a      	str	r2, [r3, #8]
 800066c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800066e:	4b21      	ldr	r3, [pc, #132]	; (80006f4 <MX_ADC1_Init+0x98>)
 8000670:	4a21      	ldr	r2, [pc, #132]	; (80006f8 <MX_ADC1_Init+0x9c>)
 8000672:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000674:	4b1f      	ldr	r3, [pc, #124]	; (80006f4 <MX_ADC1_Init+0x98>)
 8000676:	2200      	movs	r2, #0
 8000678:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800067a:	4b1e      	ldr	r3, [pc, #120]	; (80006f4 <MX_ADC1_Init+0x98>)
 800067c:	2200      	movs	r2, #0
 800067e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000680:	4b1c      	ldr	r3, [pc, #112]	; (80006f4 <MX_ADC1_Init+0x98>)
 8000682:	2200      	movs	r2, #0
 8000684:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000686:	4b1b      	ldr	r3, [pc, #108]	; (80006f4 <MX_ADC1_Init+0x98>)
 8000688:	2201      	movs	r2, #1
 800068a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800068c:	4b19      	ldr	r3, [pc, #100]	; (80006f4 <MX_ADC1_Init+0x98>)
 800068e:	2200      	movs	r2, #0
 8000690:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000694:	4b17      	ldr	r3, [pc, #92]	; (80006f4 <MX_ADC1_Init+0x98>)
 8000696:	2200      	movs	r2, #0
 8000698:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800069a:	4b16      	ldr	r3, [pc, #88]	; (80006f4 <MX_ADC1_Init+0x98>)
 800069c:	4a17      	ldr	r2, [pc, #92]	; (80006fc <MX_ADC1_Init+0xa0>)
 800069e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006a0:	4b14      	ldr	r3, [pc, #80]	; (80006f4 <MX_ADC1_Init+0x98>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80006a6:	4b13      	ldr	r3, [pc, #76]	; (80006f4 <MX_ADC1_Init+0x98>)
 80006a8:	2201      	movs	r2, #1
 80006aa:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80006ac:	4b11      	ldr	r3, [pc, #68]	; (80006f4 <MX_ADC1_Init+0x98>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006b4:	4b0f      	ldr	r3, [pc, #60]	; (80006f4 <MX_ADC1_Init+0x98>)
 80006b6:	2201      	movs	r2, #1
 80006b8:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80006ba:	480e      	ldr	r0, [pc, #56]	; (80006f4 <MX_ADC1_Init+0x98>)
 80006bc:	f000 fb56 	bl	8000d6c <HAL_ADC_Init>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d001      	beq.n	80006ca <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80006c6:	f000 f941 	bl	800094c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80006ca:	2301      	movs	r3, #1
 80006cc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80006ce:	2301      	movs	r3, #1
 80006d0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80006d2:	2300      	movs	r3, #0
 80006d4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006d6:	463b      	mov	r3, r7
 80006d8:	4619      	mov	r1, r3
 80006da:	4806      	ldr	r0, [pc, #24]	; (80006f4 <MX_ADC1_Init+0x98>)
 80006dc:	f000 fd28 	bl	8001130 <HAL_ADC_ConfigChannel>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d001      	beq.n	80006ea <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80006e6:	f000 f931 	bl	800094c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006ea:	bf00      	nop
 80006ec:	3710      	adds	r7, #16
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	bf00      	nop
 80006f4:	20000030 	.word	0x20000030
 80006f8:	40012000 	.word	0x40012000
 80006fc:	0f000001 	.word	0x0f000001

08000700 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b08e      	sub	sp, #56	; 0x38
 8000704:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000706:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800070a:	2200      	movs	r2, #0
 800070c:	601a      	str	r2, [r3, #0]
 800070e:	605a      	str	r2, [r3, #4]
 8000710:	609a      	str	r2, [r3, #8]
 8000712:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000714:	f107 0320 	add.w	r3, r7, #32
 8000718:	2200      	movs	r2, #0
 800071a:	601a      	str	r2, [r3, #0]
 800071c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800071e:	1d3b      	adds	r3, r7, #4
 8000720:	2200      	movs	r2, #0
 8000722:	601a      	str	r2, [r3, #0]
 8000724:	605a      	str	r2, [r3, #4]
 8000726:	609a      	str	r2, [r3, #8]
 8000728:	60da      	str	r2, [r3, #12]
 800072a:	611a      	str	r2, [r3, #16]
 800072c:	615a      	str	r2, [r3, #20]
 800072e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000730:	4b2d      	ldr	r3, [pc, #180]	; (80007e8 <MX_TIM3_Init+0xe8>)
 8000732:	4a2e      	ldr	r2, [pc, #184]	; (80007ec <MX_TIM3_Init+0xec>)
 8000734:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72-1;
 8000736:	4b2c      	ldr	r3, [pc, #176]	; (80007e8 <MX_TIM3_Init+0xe8>)
 8000738:	2247      	movs	r2, #71	; 0x47
 800073a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800073c:	4b2a      	ldr	r3, [pc, #168]	; (80007e8 <MX_TIM3_Init+0xe8>)
 800073e:	2200      	movs	r2, #0
 8000740:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 8000742:	4b29      	ldr	r3, [pc, #164]	; (80007e8 <MX_TIM3_Init+0xe8>)
 8000744:	f242 720f 	movw	r2, #9999	; 0x270f
 8000748:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800074a:	4b27      	ldr	r3, [pc, #156]	; (80007e8 <MX_TIM3_Init+0xe8>)
 800074c:	2200      	movs	r2, #0
 800074e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000750:	4b25      	ldr	r3, [pc, #148]	; (80007e8 <MX_TIM3_Init+0xe8>)
 8000752:	2200      	movs	r2, #0
 8000754:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000756:	4824      	ldr	r0, [pc, #144]	; (80007e8 <MX_TIM3_Init+0xe8>)
 8000758:	f002 fe9a 	bl	8003490 <HAL_TIM_Base_Init>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	d001      	beq.n	8000766 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000762:	f000 f8f3 	bl	800094c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000766:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800076a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800076c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000770:	4619      	mov	r1, r3
 8000772:	481d      	ldr	r0, [pc, #116]	; (80007e8 <MX_TIM3_Init+0xe8>)
 8000774:	f003 f9c6 	bl	8003b04 <HAL_TIM_ConfigClockSource>
 8000778:	4603      	mov	r3, r0
 800077a:	2b00      	cmp	r3, #0
 800077c:	d001      	beq.n	8000782 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800077e:	f000 f8e5 	bl	800094c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000782:	4819      	ldr	r0, [pc, #100]	; (80007e8 <MX_TIM3_Init+0xe8>)
 8000784:	f002 fed3 	bl	800352e <HAL_TIM_PWM_Init>
 8000788:	4603      	mov	r3, r0
 800078a:	2b00      	cmp	r3, #0
 800078c:	d001      	beq.n	8000792 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800078e:	f000 f8dd 	bl	800094c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000792:	2300      	movs	r3, #0
 8000794:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000796:	2300      	movs	r3, #0
 8000798:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800079a:	f107 0320 	add.w	r3, r7, #32
 800079e:	4619      	mov	r1, r3
 80007a0:	4811      	ldr	r0, [pc, #68]	; (80007e8 <MX_TIM3_Init+0xe8>)
 80007a2:	f003 fdb9 	bl	8004318 <HAL_TIMEx_MasterConfigSynchronization>
 80007a6:	4603      	mov	r3, r0
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d001      	beq.n	80007b0 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80007ac:	f000 f8ce 	bl	800094c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80007b0:	2360      	movs	r3, #96	; 0x60
 80007b2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 5000-1;
 80007b4:	f241 3387 	movw	r3, #4999	; 0x1387
 80007b8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007ba:	2300      	movs	r3, #0
 80007bc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007be:	2300      	movs	r3, #0
 80007c0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80007c2:	1d3b      	adds	r3, r7, #4
 80007c4:	2200      	movs	r2, #0
 80007c6:	4619      	mov	r1, r3
 80007c8:	4807      	ldr	r0, [pc, #28]	; (80007e8 <MX_TIM3_Init+0xe8>)
 80007ca:	f003 f8d9 	bl	8003980 <HAL_TIM_PWM_ConfigChannel>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d001      	beq.n	80007d8 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 80007d4:	f000 f8ba 	bl	800094c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80007d8:	4803      	ldr	r0, [pc, #12]	; (80007e8 <MX_TIM3_Init+0xe8>)
 80007da:	f000 f96f 	bl	8000abc <HAL_TIM_MspPostInit>

}
 80007de:	bf00      	nop
 80007e0:	3738      	adds	r7, #56	; 0x38
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	20000078 	.word	0x20000078
 80007ec:	40000400 	.word	0x40000400

080007f0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b08e      	sub	sp, #56	; 0x38
 80007f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007f6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80007fa:	2200      	movs	r2, #0
 80007fc:	601a      	str	r2, [r3, #0]
 80007fe:	605a      	str	r2, [r3, #4]
 8000800:	609a      	str	r2, [r3, #8]
 8000802:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000804:	f107 0320 	add.w	r3, r7, #32
 8000808:	2200      	movs	r2, #0
 800080a:	601a      	str	r2, [r3, #0]
 800080c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800080e:	1d3b      	adds	r3, r7, #4
 8000810:	2200      	movs	r2, #0
 8000812:	601a      	str	r2, [r3, #0]
 8000814:	605a      	str	r2, [r3, #4]
 8000816:	609a      	str	r2, [r3, #8]
 8000818:	60da      	str	r2, [r3, #12]
 800081a:	611a      	str	r2, [r3, #16]
 800081c:	615a      	str	r2, [r3, #20]
 800081e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000820:	4b2d      	ldr	r3, [pc, #180]	; (80008d8 <MX_TIM4_Init+0xe8>)
 8000822:	4a2e      	ldr	r2, [pc, #184]	; (80008dc <MX_TIM4_Init+0xec>)
 8000824:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 72-1;
 8000826:	4b2c      	ldr	r3, [pc, #176]	; (80008d8 <MX_TIM4_Init+0xe8>)
 8000828:	2247      	movs	r2, #71	; 0x47
 800082a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800082c:	4b2a      	ldr	r3, [pc, #168]	; (80008d8 <MX_TIM4_Init+0xe8>)
 800082e:	2200      	movs	r2, #0
 8000830:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 9999;
 8000832:	4b29      	ldr	r3, [pc, #164]	; (80008d8 <MX_TIM4_Init+0xe8>)
 8000834:	f242 720f 	movw	r2, #9999	; 0x270f
 8000838:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800083a:	4b27      	ldr	r3, [pc, #156]	; (80008d8 <MX_TIM4_Init+0xe8>)
 800083c:	2200      	movs	r2, #0
 800083e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000840:	4b25      	ldr	r3, [pc, #148]	; (80008d8 <MX_TIM4_Init+0xe8>)
 8000842:	2200      	movs	r2, #0
 8000844:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000846:	4824      	ldr	r0, [pc, #144]	; (80008d8 <MX_TIM4_Init+0xe8>)
 8000848:	f002 fe22 	bl	8003490 <HAL_TIM_Base_Init>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d001      	beq.n	8000856 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8000852:	f000 f87b 	bl	800094c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000856:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800085a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800085c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000860:	4619      	mov	r1, r3
 8000862:	481d      	ldr	r0, [pc, #116]	; (80008d8 <MX_TIM4_Init+0xe8>)
 8000864:	f003 f94e 	bl	8003b04 <HAL_TIM_ConfigClockSource>
 8000868:	4603      	mov	r3, r0
 800086a:	2b00      	cmp	r3, #0
 800086c:	d001      	beq.n	8000872 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 800086e:	f000 f86d 	bl	800094c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000872:	4819      	ldr	r0, [pc, #100]	; (80008d8 <MX_TIM4_Init+0xe8>)
 8000874:	f002 fe5b 	bl	800352e <HAL_TIM_PWM_Init>
 8000878:	4603      	mov	r3, r0
 800087a:	2b00      	cmp	r3, #0
 800087c:	d001      	beq.n	8000882 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 800087e:	f000 f865 	bl	800094c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000882:	2300      	movs	r3, #0
 8000884:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000886:	2300      	movs	r3, #0
 8000888:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800088a:	f107 0320 	add.w	r3, r7, #32
 800088e:	4619      	mov	r1, r3
 8000890:	4811      	ldr	r0, [pc, #68]	; (80008d8 <MX_TIM4_Init+0xe8>)
 8000892:	f003 fd41 	bl	8004318 <HAL_TIMEx_MasterConfigSynchronization>
 8000896:	4603      	mov	r3, r0
 8000898:	2b00      	cmp	r3, #0
 800089a:	d001      	beq.n	80008a0 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 800089c:	f000 f856 	bl	800094c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008a0:	2360      	movs	r3, #96	; 0x60
 80008a2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 5000-1;
 80008a4:	f241 3387 	movw	r3, #4999	; 0x1387
 80008a8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008aa:	2300      	movs	r3, #0
 80008ac:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008ae:	2300      	movs	r3, #0
 80008b0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80008b2:	1d3b      	adds	r3, r7, #4
 80008b4:	2200      	movs	r2, #0
 80008b6:	4619      	mov	r1, r3
 80008b8:	4807      	ldr	r0, [pc, #28]	; (80008d8 <MX_TIM4_Init+0xe8>)
 80008ba:	f003 f861 	bl	8003980 <HAL_TIM_PWM_ConfigChannel>
 80008be:	4603      	mov	r3, r0
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d001      	beq.n	80008c8 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 80008c4:	f000 f842 	bl	800094c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80008c8:	4803      	ldr	r0, [pc, #12]	; (80008d8 <MX_TIM4_Init+0xe8>)
 80008ca:	f000 f8f7 	bl	8000abc <HAL_TIM_MspPostInit>

}
 80008ce:	bf00      	nop
 80008d0:	3738      	adds	r7, #56	; 0x38
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	200000c0 	.word	0x200000c0
 80008dc:	40000800 	.word	0x40000800

080008e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008e0:	b480      	push	{r7}
 80008e2:	b085      	sub	sp, #20
 80008e4:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008e6:	2300      	movs	r3, #0
 80008e8:	60fb      	str	r3, [r7, #12]
 80008ea:	4b17      	ldr	r3, [pc, #92]	; (8000948 <MX_GPIO_Init+0x68>)
 80008ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ee:	4a16      	ldr	r2, [pc, #88]	; (8000948 <MX_GPIO_Init+0x68>)
 80008f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008f4:	6313      	str	r3, [r2, #48]	; 0x30
 80008f6:	4b14      	ldr	r3, [pc, #80]	; (8000948 <MX_GPIO_Init+0x68>)
 80008f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008fe:	60fb      	str	r3, [r7, #12]
 8000900:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000902:	2300      	movs	r3, #0
 8000904:	60bb      	str	r3, [r7, #8]
 8000906:	4b10      	ldr	r3, [pc, #64]	; (8000948 <MX_GPIO_Init+0x68>)
 8000908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090a:	4a0f      	ldr	r2, [pc, #60]	; (8000948 <MX_GPIO_Init+0x68>)
 800090c:	f043 0301 	orr.w	r3, r3, #1
 8000910:	6313      	str	r3, [r2, #48]	; 0x30
 8000912:	4b0d      	ldr	r3, [pc, #52]	; (8000948 <MX_GPIO_Init+0x68>)
 8000914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000916:	f003 0301 	and.w	r3, r3, #1
 800091a:	60bb      	str	r3, [r7, #8]
 800091c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800091e:	2300      	movs	r3, #0
 8000920:	607b      	str	r3, [r7, #4]
 8000922:	4b09      	ldr	r3, [pc, #36]	; (8000948 <MX_GPIO_Init+0x68>)
 8000924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000926:	4a08      	ldr	r2, [pc, #32]	; (8000948 <MX_GPIO_Init+0x68>)
 8000928:	f043 0308 	orr.w	r3, r3, #8
 800092c:	6313      	str	r3, [r2, #48]	; 0x30
 800092e:	4b06      	ldr	r3, [pc, #24]	; (8000948 <MX_GPIO_Init+0x68>)
 8000930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000932:	f003 0308 	and.w	r3, r3, #8
 8000936:	607b      	str	r3, [r7, #4]
 8000938:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800093a:	bf00      	nop
 800093c:	3714      	adds	r7, #20
 800093e:	46bd      	mov	sp, r7
 8000940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000944:	4770      	bx	lr
 8000946:	bf00      	nop
 8000948:	40023800 	.word	0x40023800

0800094c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800094c:	b480      	push	{r7}
 800094e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000950:	b672      	cpsid	i
}
 8000952:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000954:	e7fe      	b.n	8000954 <Error_Handler+0x8>
	...

08000958 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b082      	sub	sp, #8
 800095c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800095e:	2300      	movs	r3, #0
 8000960:	607b      	str	r3, [r7, #4]
 8000962:	4b10      	ldr	r3, [pc, #64]	; (80009a4 <HAL_MspInit+0x4c>)
 8000964:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000966:	4a0f      	ldr	r2, [pc, #60]	; (80009a4 <HAL_MspInit+0x4c>)
 8000968:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800096c:	6453      	str	r3, [r2, #68]	; 0x44
 800096e:	4b0d      	ldr	r3, [pc, #52]	; (80009a4 <HAL_MspInit+0x4c>)
 8000970:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000972:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000976:	607b      	str	r3, [r7, #4]
 8000978:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800097a:	2300      	movs	r3, #0
 800097c:	603b      	str	r3, [r7, #0]
 800097e:	4b09      	ldr	r3, [pc, #36]	; (80009a4 <HAL_MspInit+0x4c>)
 8000980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000982:	4a08      	ldr	r2, [pc, #32]	; (80009a4 <HAL_MspInit+0x4c>)
 8000984:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000988:	6413      	str	r3, [r2, #64]	; 0x40
 800098a:	4b06      	ldr	r3, [pc, #24]	; (80009a4 <HAL_MspInit+0x4c>)
 800098c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800098e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000992:	603b      	str	r3, [r7, #0]
 8000994:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000996:	2007      	movs	r0, #7
 8000998:	f000 feb8 	bl	800170c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800099c:	bf00      	nop
 800099e:	3708      	adds	r7, #8
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bd80      	pop	{r7, pc}
 80009a4:	40023800 	.word	0x40023800

080009a8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b08a      	sub	sp, #40	; 0x28
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009b0:	f107 0314 	add.w	r3, r7, #20
 80009b4:	2200      	movs	r2, #0
 80009b6:	601a      	str	r2, [r3, #0]
 80009b8:	605a      	str	r2, [r3, #4]
 80009ba:	609a      	str	r2, [r3, #8]
 80009bc:	60da      	str	r2, [r3, #12]
 80009be:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	4a17      	ldr	r2, [pc, #92]	; (8000a24 <HAL_ADC_MspInit+0x7c>)
 80009c6:	4293      	cmp	r3, r2
 80009c8:	d127      	bne.n	8000a1a <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80009ca:	2300      	movs	r3, #0
 80009cc:	613b      	str	r3, [r7, #16]
 80009ce:	4b16      	ldr	r3, [pc, #88]	; (8000a28 <HAL_ADC_MspInit+0x80>)
 80009d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009d2:	4a15      	ldr	r2, [pc, #84]	; (8000a28 <HAL_ADC_MspInit+0x80>)
 80009d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009d8:	6453      	str	r3, [r2, #68]	; 0x44
 80009da:	4b13      	ldr	r3, [pc, #76]	; (8000a28 <HAL_ADC_MspInit+0x80>)
 80009dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80009e2:	613b      	str	r3, [r7, #16]
 80009e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009e6:	2300      	movs	r3, #0
 80009e8:	60fb      	str	r3, [r7, #12]
 80009ea:	4b0f      	ldr	r3, [pc, #60]	; (8000a28 <HAL_ADC_MspInit+0x80>)
 80009ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ee:	4a0e      	ldr	r2, [pc, #56]	; (8000a28 <HAL_ADC_MspInit+0x80>)
 80009f0:	f043 0301 	orr.w	r3, r3, #1
 80009f4:	6313      	str	r3, [r2, #48]	; 0x30
 80009f6:	4b0c      	ldr	r3, [pc, #48]	; (8000a28 <HAL_ADC_MspInit+0x80>)
 80009f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fa:	f003 0301 	and.w	r3, r3, #1
 80009fe:	60fb      	str	r3, [r7, #12]
 8000a00:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8000a02:	2306      	movs	r3, #6
 8000a04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a06:	2303      	movs	r3, #3
 8000a08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a0e:	f107 0314 	add.w	r3, r7, #20
 8000a12:	4619      	mov	r1, r3
 8000a14:	4805      	ldr	r0, [pc, #20]	; (8000a2c <HAL_ADC_MspInit+0x84>)
 8000a16:	f000 febb 	bl	8001790 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000a1a:	bf00      	nop
 8000a1c:	3728      	adds	r7, #40	; 0x28
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	40012000 	.word	0x40012000
 8000a28:	40023800 	.word	0x40023800
 8000a2c:	40020000 	.word	0x40020000

08000a30 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b084      	sub	sp, #16
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	4a1c      	ldr	r2, [pc, #112]	; (8000ab0 <HAL_TIM_Base_MspInit+0x80>)
 8000a3e:	4293      	cmp	r3, r2
 8000a40:	d116      	bne.n	8000a70 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000a42:	2300      	movs	r3, #0
 8000a44:	60fb      	str	r3, [r7, #12]
 8000a46:	4b1b      	ldr	r3, [pc, #108]	; (8000ab4 <HAL_TIM_Base_MspInit+0x84>)
 8000a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a4a:	4a1a      	ldr	r2, [pc, #104]	; (8000ab4 <HAL_TIM_Base_MspInit+0x84>)
 8000a4c:	f043 0302 	orr.w	r3, r3, #2
 8000a50:	6413      	str	r3, [r2, #64]	; 0x40
 8000a52:	4b18      	ldr	r3, [pc, #96]	; (8000ab4 <HAL_TIM_Base_MspInit+0x84>)
 8000a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a56:	f003 0302 	and.w	r3, r3, #2
 8000a5a:	60fb      	str	r3, [r7, #12]
 8000a5c:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000a5e:	2200      	movs	r2, #0
 8000a60:	2100      	movs	r1, #0
 8000a62:	201d      	movs	r0, #29
 8000a64:	f000 fe5d 	bl	8001722 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000a68:	201d      	movs	r0, #29
 8000a6a:	f000 fe76 	bl	800175a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000a6e:	e01a      	b.n	8000aa6 <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM4)
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	4a10      	ldr	r2, [pc, #64]	; (8000ab8 <HAL_TIM_Base_MspInit+0x88>)
 8000a76:	4293      	cmp	r3, r2
 8000a78:	d115      	bne.n	8000aa6 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	60bb      	str	r3, [r7, #8]
 8000a7e:	4b0d      	ldr	r3, [pc, #52]	; (8000ab4 <HAL_TIM_Base_MspInit+0x84>)
 8000a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a82:	4a0c      	ldr	r2, [pc, #48]	; (8000ab4 <HAL_TIM_Base_MspInit+0x84>)
 8000a84:	f043 0304 	orr.w	r3, r3, #4
 8000a88:	6413      	str	r3, [r2, #64]	; 0x40
 8000a8a:	4b0a      	ldr	r3, [pc, #40]	; (8000ab4 <HAL_TIM_Base_MspInit+0x84>)
 8000a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a8e:	f003 0304 	and.w	r3, r3, #4
 8000a92:	60bb      	str	r3, [r7, #8]
 8000a94:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8000a96:	2200      	movs	r2, #0
 8000a98:	2100      	movs	r1, #0
 8000a9a:	201e      	movs	r0, #30
 8000a9c:	f000 fe41 	bl	8001722 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000aa0:	201e      	movs	r0, #30
 8000aa2:	f000 fe5a 	bl	800175a <HAL_NVIC_EnableIRQ>
}
 8000aa6:	bf00      	nop
 8000aa8:	3710      	adds	r7, #16
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	40000400 	.word	0x40000400
 8000ab4:	40023800 	.word	0x40023800
 8000ab8:	40000800 	.word	0x40000800

08000abc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b08a      	sub	sp, #40	; 0x28
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ac4:	f107 0314 	add.w	r3, r7, #20
 8000ac8:	2200      	movs	r2, #0
 8000aca:	601a      	str	r2, [r3, #0]
 8000acc:	605a      	str	r2, [r3, #4]
 8000ace:	609a      	str	r2, [r3, #8]
 8000ad0:	60da      	str	r2, [r3, #12]
 8000ad2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	4a24      	ldr	r2, [pc, #144]	; (8000b6c <HAL_TIM_MspPostInit+0xb0>)
 8000ada:	4293      	cmp	r3, r2
 8000adc:	d11e      	bne.n	8000b1c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ade:	2300      	movs	r3, #0
 8000ae0:	613b      	str	r3, [r7, #16]
 8000ae2:	4b23      	ldr	r3, [pc, #140]	; (8000b70 <HAL_TIM_MspPostInit+0xb4>)
 8000ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae6:	4a22      	ldr	r2, [pc, #136]	; (8000b70 <HAL_TIM_MspPostInit+0xb4>)
 8000ae8:	f043 0301 	orr.w	r3, r3, #1
 8000aec:	6313      	str	r3, [r2, #48]	; 0x30
 8000aee:	4b20      	ldr	r3, [pc, #128]	; (8000b70 <HAL_TIM_MspPostInit+0xb4>)
 8000af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af2:	f003 0301 	and.w	r3, r3, #1
 8000af6:	613b      	str	r3, [r7, #16]
 8000af8:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000afa:	2340      	movs	r3, #64	; 0x40
 8000afc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000afe:	2302      	movs	r3, #2
 8000b00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b02:	2300      	movs	r3, #0
 8000b04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b06:	2300      	movs	r3, #0
 8000b08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000b0a:	2302      	movs	r3, #2
 8000b0c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b0e:	f107 0314 	add.w	r3, r7, #20
 8000b12:	4619      	mov	r1, r3
 8000b14:	4817      	ldr	r0, [pc, #92]	; (8000b74 <HAL_TIM_MspPostInit+0xb8>)
 8000b16:	f000 fe3b 	bl	8001790 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8000b1a:	e023      	b.n	8000b64 <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM4)
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	4a15      	ldr	r2, [pc, #84]	; (8000b78 <HAL_TIM_MspPostInit+0xbc>)
 8000b22:	4293      	cmp	r3, r2
 8000b24:	d11e      	bne.n	8000b64 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b26:	2300      	movs	r3, #0
 8000b28:	60fb      	str	r3, [r7, #12]
 8000b2a:	4b11      	ldr	r3, [pc, #68]	; (8000b70 <HAL_TIM_MspPostInit+0xb4>)
 8000b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2e:	4a10      	ldr	r2, [pc, #64]	; (8000b70 <HAL_TIM_MspPostInit+0xb4>)
 8000b30:	f043 0308 	orr.w	r3, r3, #8
 8000b34:	6313      	str	r3, [r2, #48]	; 0x30
 8000b36:	4b0e      	ldr	r3, [pc, #56]	; (8000b70 <HAL_TIM_MspPostInit+0xb4>)
 8000b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3a:	f003 0308 	and.w	r3, r3, #8
 8000b3e:	60fb      	str	r3, [r7, #12]
 8000b40:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000b42:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b48:	2302      	movs	r3, #2
 8000b4a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b50:	2300      	movs	r3, #0
 8000b52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000b54:	2302      	movs	r3, #2
 8000b56:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b58:	f107 0314 	add.w	r3, r7, #20
 8000b5c:	4619      	mov	r1, r3
 8000b5e:	4807      	ldr	r0, [pc, #28]	; (8000b7c <HAL_TIM_MspPostInit+0xc0>)
 8000b60:	f000 fe16 	bl	8001790 <HAL_GPIO_Init>
}
 8000b64:	bf00      	nop
 8000b66:	3728      	adds	r7, #40	; 0x28
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	40000400 	.word	0x40000400
 8000b70:	40023800 	.word	0x40023800
 8000b74:	40020000 	.word	0x40020000
 8000b78:	40000800 	.word	0x40000800
 8000b7c:	40020c00 	.word	0x40020c00

08000b80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b84:	e7fe      	b.n	8000b84 <NMI_Handler+0x4>

08000b86 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b86:	b480      	push	{r7}
 8000b88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b8a:	e7fe      	b.n	8000b8a <HardFault_Handler+0x4>

08000b8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b90:	e7fe      	b.n	8000b90 <MemManage_Handler+0x4>

08000b92 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b92:	b480      	push	{r7}
 8000b94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b96:	e7fe      	b.n	8000b96 <BusFault_Handler+0x4>

08000b98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b9c:	e7fe      	b.n	8000b9c <UsageFault_Handler+0x4>

08000b9e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b9e:	b480      	push	{r7}
 8000ba0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ba2:	bf00      	nop
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000baa:	4770      	bx	lr

08000bac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bb0:	bf00      	nop
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb8:	4770      	bx	lr

08000bba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bba:	b480      	push	{r7}
 8000bbc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bbe:	bf00      	nop
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc6:	4770      	bx	lr

08000bc8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bcc:	f000 f8ae 	bl	8000d2c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bd0:	bf00      	nop
 8000bd2:	bd80      	pop	{r7, pc}

08000bd4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000bd8:	4802      	ldr	r0, [pc, #8]	; (8000be4 <TIM3_IRQHandler+0x10>)
 8000bda:	f002 fdc9 	bl	8003770 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000bde:	bf00      	nop
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	20000078 	.word	0x20000078

08000be8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000bec:	4802      	ldr	r0, [pc, #8]	; (8000bf8 <TIM4_IRQHandler+0x10>)
 8000bee:	f002 fdbf 	bl	8003770 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000bf2:	bf00      	nop
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	200000c0 	.word	0x200000c0

08000bfc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000c00:	4802      	ldr	r0, [pc, #8]	; (8000c0c <OTG_FS_IRQHandler+0x10>)
 8000c02:	f000 ff61 	bl	8001ac8 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000c06:	bf00      	nop
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	20000110 	.word	0x20000110

08000c10 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c14:	4b06      	ldr	r3, [pc, #24]	; (8000c30 <SystemInit+0x20>)
 8000c16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c1a:	4a05      	ldr	r2, [pc, #20]	; (8000c30 <SystemInit+0x20>)
 8000c1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c20:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c24:	bf00      	nop
 8000c26:	46bd      	mov	sp, r7
 8000c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2c:	4770      	bx	lr
 8000c2e:	bf00      	nop
 8000c30:	e000ed00 	.word	0xe000ed00

08000c34 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000c34:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c6c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c38:	480d      	ldr	r0, [pc, #52]	; (8000c70 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c3a:	490e      	ldr	r1, [pc, #56]	; (8000c74 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c3c:	4a0e      	ldr	r2, [pc, #56]	; (8000c78 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c40:	e002      	b.n	8000c48 <LoopCopyDataInit>

08000c42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c46:	3304      	adds	r3, #4

08000c48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c4c:	d3f9      	bcc.n	8000c42 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c4e:	4a0b      	ldr	r2, [pc, #44]	; (8000c7c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c50:	4c0b      	ldr	r4, [pc, #44]	; (8000c80 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c54:	e001      	b.n	8000c5a <LoopFillZerobss>

08000c56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c58:	3204      	adds	r2, #4

08000c5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c5c:	d3fb      	bcc.n	8000c56 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000c5e:	f7ff ffd7 	bl	8000c10 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c62:	f006 f823 	bl	8006cac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c66:	f7ff fc31 	bl	80004cc <main>
  bx  lr    
 8000c6a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000c6c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c70:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c74:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000c78:	08006d3c 	.word	0x08006d3c
  ldr r2, =_sbss
 8000c7c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000c80:	2000061c 	.word	0x2000061c

08000c84 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c84:	e7fe      	b.n	8000c84 <ADC_IRQHandler>
	...

08000c88 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c8c:	4b0e      	ldr	r3, [pc, #56]	; (8000cc8 <HAL_Init+0x40>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	4a0d      	ldr	r2, [pc, #52]	; (8000cc8 <HAL_Init+0x40>)
 8000c92:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c96:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c98:	4b0b      	ldr	r3, [pc, #44]	; (8000cc8 <HAL_Init+0x40>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	4a0a      	ldr	r2, [pc, #40]	; (8000cc8 <HAL_Init+0x40>)
 8000c9e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ca2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ca4:	4b08      	ldr	r3, [pc, #32]	; (8000cc8 <HAL_Init+0x40>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	4a07      	ldr	r2, [pc, #28]	; (8000cc8 <HAL_Init+0x40>)
 8000caa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cb0:	2003      	movs	r0, #3
 8000cb2:	f000 fd2b 	bl	800170c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cb6:	2000      	movs	r0, #0
 8000cb8:	f000 f808 	bl	8000ccc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cbc:	f7ff fe4c 	bl	8000958 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cc0:	2300      	movs	r3, #0
}
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	40023c00 	.word	0x40023c00

08000ccc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b082      	sub	sp, #8
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000cd4:	4b12      	ldr	r3, [pc, #72]	; (8000d20 <HAL_InitTick+0x54>)
 8000cd6:	681a      	ldr	r2, [r3, #0]
 8000cd8:	4b12      	ldr	r3, [pc, #72]	; (8000d24 <HAL_InitTick+0x58>)
 8000cda:	781b      	ldrb	r3, [r3, #0]
 8000cdc:	4619      	mov	r1, r3
 8000cde:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ce2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ce6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cea:	4618      	mov	r0, r3
 8000cec:	f000 fd43 	bl	8001776 <HAL_SYSTICK_Config>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d001      	beq.n	8000cfa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000cf6:	2301      	movs	r3, #1
 8000cf8:	e00e      	b.n	8000d18 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	2b0f      	cmp	r3, #15
 8000cfe:	d80a      	bhi.n	8000d16 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d00:	2200      	movs	r2, #0
 8000d02:	6879      	ldr	r1, [r7, #4]
 8000d04:	f04f 30ff 	mov.w	r0, #4294967295
 8000d08:	f000 fd0b 	bl	8001722 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d0c:	4a06      	ldr	r2, [pc, #24]	; (8000d28 <HAL_InitTick+0x5c>)
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d12:	2300      	movs	r3, #0
 8000d14:	e000      	b.n	8000d18 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d16:	2301      	movs	r3, #1
}
 8000d18:	4618      	mov	r0, r3
 8000d1a:	3708      	adds	r7, #8
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}
 8000d20:	20000000 	.word	0x20000000
 8000d24:	20000008 	.word	0x20000008
 8000d28:	20000004 	.word	0x20000004

08000d2c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d30:	4b06      	ldr	r3, [pc, #24]	; (8000d4c <HAL_IncTick+0x20>)
 8000d32:	781b      	ldrb	r3, [r3, #0]
 8000d34:	461a      	mov	r2, r3
 8000d36:	4b06      	ldr	r3, [pc, #24]	; (8000d50 <HAL_IncTick+0x24>)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	4413      	add	r3, r2
 8000d3c:	4a04      	ldr	r2, [pc, #16]	; (8000d50 <HAL_IncTick+0x24>)
 8000d3e:	6013      	str	r3, [r2, #0]
}
 8000d40:	bf00      	nop
 8000d42:	46bd      	mov	sp, r7
 8000d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d48:	4770      	bx	lr
 8000d4a:	bf00      	nop
 8000d4c:	20000008 	.word	0x20000008
 8000d50:	20000108 	.word	0x20000108

08000d54 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0
  return uwTick;
 8000d58:	4b03      	ldr	r3, [pc, #12]	; (8000d68 <HAL_GetTick+0x14>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
}
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d64:	4770      	bx	lr
 8000d66:	bf00      	nop
 8000d68:	20000108 	.word	0x20000108

08000d6c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b084      	sub	sp, #16
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000d74:	2300      	movs	r3, #0
 8000d76:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d101      	bne.n	8000d82 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000d7e:	2301      	movs	r3, #1
 8000d80:	e033      	b.n	8000dea <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d109      	bne.n	8000d9e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000d8a:	6878      	ldr	r0, [r7, #4]
 8000d8c:	f7ff fe0c 	bl	80009a8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	2200      	movs	r2, #0
 8000d94:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	2200      	movs	r2, #0
 8000d9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000da2:	f003 0310 	and.w	r3, r3, #16
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d118      	bne.n	8000ddc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dae:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000db2:	f023 0302 	bic.w	r3, r3, #2
 8000db6:	f043 0202 	orr.w	r2, r3, #2
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8000dbe:	6878      	ldr	r0, [r7, #4]
 8000dc0:	f000 fad8 	bl	8001374 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dce:	f023 0303 	bic.w	r3, r3, #3
 8000dd2:	f043 0201 	orr.w	r2, r3, #1
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	641a      	str	r2, [r3, #64]	; 0x40
 8000dda:	e001      	b.n	8000de0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000ddc:	2301      	movs	r3, #1
 8000dde:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	2200      	movs	r2, #0
 8000de4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000de8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000dea:	4618      	mov	r0, r3
 8000dec:	3710      	adds	r7, #16
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}
	...

08000df4 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000df4:	b480      	push	{r7}
 8000df6:	b085      	sub	sp, #20
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000e06:	2b01      	cmp	r3, #1
 8000e08:	d101      	bne.n	8000e0e <HAL_ADC_Start+0x1a>
 8000e0a:	2302      	movs	r3, #2
 8000e0c:	e0b2      	b.n	8000f74 <HAL_ADC_Start+0x180>
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	2201      	movs	r2, #1
 8000e12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	689b      	ldr	r3, [r3, #8]
 8000e1c:	f003 0301 	and.w	r3, r3, #1
 8000e20:	2b01      	cmp	r3, #1
 8000e22:	d018      	beq.n	8000e56 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	689a      	ldr	r2, [r3, #8]
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	f042 0201 	orr.w	r2, r2, #1
 8000e32:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000e34:	4b52      	ldr	r3, [pc, #328]	; (8000f80 <HAL_ADC_Start+0x18c>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	4a52      	ldr	r2, [pc, #328]	; (8000f84 <HAL_ADC_Start+0x190>)
 8000e3a:	fba2 2303 	umull	r2, r3, r2, r3
 8000e3e:	0c9a      	lsrs	r2, r3, #18
 8000e40:	4613      	mov	r3, r2
 8000e42:	005b      	lsls	r3, r3, #1
 8000e44:	4413      	add	r3, r2
 8000e46:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8000e48:	e002      	b.n	8000e50 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8000e4a:	68bb      	ldr	r3, [r7, #8]
 8000e4c:	3b01      	subs	r3, #1
 8000e4e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8000e50:	68bb      	ldr	r3, [r7, #8]
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d1f9      	bne.n	8000e4a <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	689b      	ldr	r3, [r3, #8]
 8000e5c:	f003 0301 	and.w	r3, r3, #1
 8000e60:	2b01      	cmp	r3, #1
 8000e62:	d17a      	bne.n	8000f5a <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e68:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000e6c:	f023 0301 	bic.w	r3, r3, #1
 8000e70:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	685b      	ldr	r3, [r3, #4]
 8000e7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d007      	beq.n	8000e96 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e8a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000e8e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e9a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000ea2:	d106      	bne.n	8000eb2 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ea8:	f023 0206 	bic.w	r2, r3, #6
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	645a      	str	r2, [r3, #68]	; 0x44
 8000eb0:	e002      	b.n	8000eb8 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	2200      	movs	r2, #0
 8000ebc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000ec0:	4b31      	ldr	r3, [pc, #196]	; (8000f88 <HAL_ADC_Start+0x194>)
 8000ec2:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8000ecc:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	685b      	ldr	r3, [r3, #4]
 8000ed2:	f003 031f 	and.w	r3, r3, #31
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d12a      	bne.n	8000f30 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	4a2b      	ldr	r2, [pc, #172]	; (8000f8c <HAL_ADC_Start+0x198>)
 8000ee0:	4293      	cmp	r3, r2
 8000ee2:	d015      	beq.n	8000f10 <HAL_ADC_Start+0x11c>
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	4a29      	ldr	r2, [pc, #164]	; (8000f90 <HAL_ADC_Start+0x19c>)
 8000eea:	4293      	cmp	r3, r2
 8000eec:	d105      	bne.n	8000efa <HAL_ADC_Start+0x106>
 8000eee:	4b26      	ldr	r3, [pc, #152]	; (8000f88 <HAL_ADC_Start+0x194>)
 8000ef0:	685b      	ldr	r3, [r3, #4]
 8000ef2:	f003 031f 	and.w	r3, r3, #31
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d00a      	beq.n	8000f10 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	4a25      	ldr	r2, [pc, #148]	; (8000f94 <HAL_ADC_Start+0x1a0>)
 8000f00:	4293      	cmp	r3, r2
 8000f02:	d136      	bne.n	8000f72 <HAL_ADC_Start+0x17e>
 8000f04:	4b20      	ldr	r3, [pc, #128]	; (8000f88 <HAL_ADC_Start+0x194>)
 8000f06:	685b      	ldr	r3, [r3, #4]
 8000f08:	f003 0310 	and.w	r3, r3, #16
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d130      	bne.n	8000f72 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	689b      	ldr	r3, [r3, #8]
 8000f16:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d129      	bne.n	8000f72 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	689a      	ldr	r2, [r3, #8]
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000f2c:	609a      	str	r2, [r3, #8]
 8000f2e:	e020      	b.n	8000f72 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	4a15      	ldr	r2, [pc, #84]	; (8000f8c <HAL_ADC_Start+0x198>)
 8000f36:	4293      	cmp	r3, r2
 8000f38:	d11b      	bne.n	8000f72 <HAL_ADC_Start+0x17e>
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	689b      	ldr	r3, [r3, #8]
 8000f40:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d114      	bne.n	8000f72 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	689a      	ldr	r2, [r3, #8]
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000f56:	609a      	str	r2, [r3, #8]
 8000f58:	e00b      	b.n	8000f72 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f5e:	f043 0210 	orr.w	r2, r3, #16
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f6a:	f043 0201 	orr.w	r2, r3, #1
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8000f72:	2300      	movs	r3, #0
}
 8000f74:	4618      	mov	r0, r3
 8000f76:	3714      	adds	r7, #20
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7e:	4770      	bx	lr
 8000f80:	20000000 	.word	0x20000000
 8000f84:	431bde83 	.word	0x431bde83
 8000f88:	40012300 	.word	0x40012300
 8000f8c:	40012000 	.word	0x40012000
 8000f90:	40012100 	.word	0x40012100
 8000f94:	40012200 	.word	0x40012200

08000f98 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	b083      	sub	sp, #12
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000fa6:	2b01      	cmp	r3, #1
 8000fa8:	d101      	bne.n	8000fae <HAL_ADC_Stop+0x16>
 8000faa:	2302      	movs	r3, #2
 8000fac:	e021      	b.n	8000ff2 <HAL_ADC_Stop+0x5a>
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	2201      	movs	r2, #1
 8000fb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	689a      	ldr	r2, [r3, #8]
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	f022 0201 	bic.w	r2, r2, #1
 8000fc4:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	689b      	ldr	r3, [r3, #8]
 8000fcc:	f003 0301 	and.w	r3, r3, #1
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d109      	bne.n	8000fe8 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fd8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000fdc:	f023 0301 	bic.w	r3, r3, #1
 8000fe0:	f043 0201 	orr.w	r2, r3, #1
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	2200      	movs	r2, #0
 8000fec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8000ff0:	2300      	movs	r3, #0
}
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	370c      	adds	r7, #12
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffc:	4770      	bx	lr

08000ffe <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8000ffe:	b580      	push	{r7, lr}
 8001000:	b084      	sub	sp, #16
 8001002:	af00      	add	r7, sp, #0
 8001004:	6078      	str	r0, [r7, #4]
 8001006:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001008:	2300      	movs	r3, #0
 800100a:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	689b      	ldr	r3, [r3, #8]
 8001012:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001016:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800101a:	d113      	bne.n	8001044 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	689b      	ldr	r3, [r3, #8]
 8001022:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001026:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800102a:	d10b      	bne.n	8001044 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001030:	f043 0220 	orr.w	r2, r3, #32
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	2200      	movs	r2, #0
 800103c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8001040:	2301      	movs	r3, #1
 8001042:	e063      	b.n	800110c <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001044:	f7ff fe86 	bl	8000d54 <HAL_GetTick>
 8001048:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800104a:	e021      	b.n	8001090 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001052:	d01d      	beq.n	8001090 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	2b00      	cmp	r3, #0
 8001058:	d007      	beq.n	800106a <HAL_ADC_PollForConversion+0x6c>
 800105a:	f7ff fe7b 	bl	8000d54 <HAL_GetTick>
 800105e:	4602      	mov	r2, r0
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	1ad3      	subs	r3, r2, r3
 8001064:	683a      	ldr	r2, [r7, #0]
 8001066:	429a      	cmp	r2, r3
 8001068:	d212      	bcs.n	8001090 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	f003 0302 	and.w	r3, r3, #2
 8001074:	2b02      	cmp	r3, #2
 8001076:	d00b      	beq.n	8001090 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800107c:	f043 0204 	orr.w	r2, r3, #4
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	2200      	movs	r2, #0
 8001088:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 800108c:	2303      	movs	r3, #3
 800108e:	e03d      	b.n	800110c <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	f003 0302 	and.w	r3, r3, #2
 800109a:	2b02      	cmp	r3, #2
 800109c:	d1d6      	bne.n	800104c <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	f06f 0212 	mvn.w	r2, #18
 80010a6:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ac:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	689b      	ldr	r3, [r3, #8]
 80010ba:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d123      	bne.n	800110a <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d11f      	bne.n	800110a <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010d0:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d006      	beq.n	80010e6 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	689b      	ldr	r3, [r3, #8]
 80010de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d111      	bne.n	800110a <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ea:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010f6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d105      	bne.n	800110a <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001102:	f043 0201 	orr.w	r2, r3, #1
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800110a:	2300      	movs	r3, #0
}
 800110c:	4618      	mov	r0, r3
 800110e:	3710      	adds	r7, #16
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}

08001114 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001114:	b480      	push	{r7}
 8001116:	b083      	sub	sp, #12
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001122:	4618      	mov	r0, r3
 8001124:	370c      	adds	r7, #12
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr
	...

08001130 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001130:	b480      	push	{r7}
 8001132:	b085      	sub	sp, #20
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
 8001138:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800113a:	2300      	movs	r3, #0
 800113c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001144:	2b01      	cmp	r3, #1
 8001146:	d101      	bne.n	800114c <HAL_ADC_ConfigChannel+0x1c>
 8001148:	2302      	movs	r3, #2
 800114a:	e105      	b.n	8001358 <HAL_ADC_ConfigChannel+0x228>
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	2201      	movs	r2, #1
 8001150:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	2b09      	cmp	r3, #9
 800115a:	d925      	bls.n	80011a8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	68d9      	ldr	r1, [r3, #12]
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	b29b      	uxth	r3, r3
 8001168:	461a      	mov	r2, r3
 800116a:	4613      	mov	r3, r2
 800116c:	005b      	lsls	r3, r3, #1
 800116e:	4413      	add	r3, r2
 8001170:	3b1e      	subs	r3, #30
 8001172:	2207      	movs	r2, #7
 8001174:	fa02 f303 	lsl.w	r3, r2, r3
 8001178:	43da      	mvns	r2, r3
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	400a      	ands	r2, r1
 8001180:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	68d9      	ldr	r1, [r3, #12]
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	689a      	ldr	r2, [r3, #8]
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	b29b      	uxth	r3, r3
 8001192:	4618      	mov	r0, r3
 8001194:	4603      	mov	r3, r0
 8001196:	005b      	lsls	r3, r3, #1
 8001198:	4403      	add	r3, r0
 800119a:	3b1e      	subs	r3, #30
 800119c:	409a      	lsls	r2, r3
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	430a      	orrs	r2, r1
 80011a4:	60da      	str	r2, [r3, #12]
 80011a6:	e022      	b.n	80011ee <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	6919      	ldr	r1, [r3, #16]
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	b29b      	uxth	r3, r3
 80011b4:	461a      	mov	r2, r3
 80011b6:	4613      	mov	r3, r2
 80011b8:	005b      	lsls	r3, r3, #1
 80011ba:	4413      	add	r3, r2
 80011bc:	2207      	movs	r2, #7
 80011be:	fa02 f303 	lsl.w	r3, r2, r3
 80011c2:	43da      	mvns	r2, r3
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	400a      	ands	r2, r1
 80011ca:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	6919      	ldr	r1, [r3, #16]
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	689a      	ldr	r2, [r3, #8]
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	b29b      	uxth	r3, r3
 80011dc:	4618      	mov	r0, r3
 80011de:	4603      	mov	r3, r0
 80011e0:	005b      	lsls	r3, r3, #1
 80011e2:	4403      	add	r3, r0
 80011e4:	409a      	lsls	r2, r3
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	430a      	orrs	r2, r1
 80011ec:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	685b      	ldr	r3, [r3, #4]
 80011f2:	2b06      	cmp	r3, #6
 80011f4:	d824      	bhi.n	8001240 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	685a      	ldr	r2, [r3, #4]
 8001200:	4613      	mov	r3, r2
 8001202:	009b      	lsls	r3, r3, #2
 8001204:	4413      	add	r3, r2
 8001206:	3b05      	subs	r3, #5
 8001208:	221f      	movs	r2, #31
 800120a:	fa02 f303 	lsl.w	r3, r2, r3
 800120e:	43da      	mvns	r2, r3
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	400a      	ands	r2, r1
 8001216:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	b29b      	uxth	r3, r3
 8001224:	4618      	mov	r0, r3
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	685a      	ldr	r2, [r3, #4]
 800122a:	4613      	mov	r3, r2
 800122c:	009b      	lsls	r3, r3, #2
 800122e:	4413      	add	r3, r2
 8001230:	3b05      	subs	r3, #5
 8001232:	fa00 f203 	lsl.w	r2, r0, r3
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	430a      	orrs	r2, r1
 800123c:	635a      	str	r2, [r3, #52]	; 0x34
 800123e:	e04c      	b.n	80012da <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	2b0c      	cmp	r3, #12
 8001246:	d824      	bhi.n	8001292 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	685a      	ldr	r2, [r3, #4]
 8001252:	4613      	mov	r3, r2
 8001254:	009b      	lsls	r3, r3, #2
 8001256:	4413      	add	r3, r2
 8001258:	3b23      	subs	r3, #35	; 0x23
 800125a:	221f      	movs	r2, #31
 800125c:	fa02 f303 	lsl.w	r3, r2, r3
 8001260:	43da      	mvns	r2, r3
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	400a      	ands	r2, r1
 8001268:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	b29b      	uxth	r3, r3
 8001276:	4618      	mov	r0, r3
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	685a      	ldr	r2, [r3, #4]
 800127c:	4613      	mov	r3, r2
 800127e:	009b      	lsls	r3, r3, #2
 8001280:	4413      	add	r3, r2
 8001282:	3b23      	subs	r3, #35	; 0x23
 8001284:	fa00 f203 	lsl.w	r2, r0, r3
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	430a      	orrs	r2, r1
 800128e:	631a      	str	r2, [r3, #48]	; 0x30
 8001290:	e023      	b.n	80012da <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	685a      	ldr	r2, [r3, #4]
 800129c:	4613      	mov	r3, r2
 800129e:	009b      	lsls	r3, r3, #2
 80012a0:	4413      	add	r3, r2
 80012a2:	3b41      	subs	r3, #65	; 0x41
 80012a4:	221f      	movs	r2, #31
 80012a6:	fa02 f303 	lsl.w	r3, r2, r3
 80012aa:	43da      	mvns	r2, r3
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	400a      	ands	r2, r1
 80012b2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	b29b      	uxth	r3, r3
 80012c0:	4618      	mov	r0, r3
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	685a      	ldr	r2, [r3, #4]
 80012c6:	4613      	mov	r3, r2
 80012c8:	009b      	lsls	r3, r3, #2
 80012ca:	4413      	add	r3, r2
 80012cc:	3b41      	subs	r3, #65	; 0x41
 80012ce:	fa00 f203 	lsl.w	r2, r0, r3
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	430a      	orrs	r2, r1
 80012d8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80012da:	4b22      	ldr	r3, [pc, #136]	; (8001364 <HAL_ADC_ConfigChannel+0x234>)
 80012dc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	4a21      	ldr	r2, [pc, #132]	; (8001368 <HAL_ADC_ConfigChannel+0x238>)
 80012e4:	4293      	cmp	r3, r2
 80012e6:	d109      	bne.n	80012fc <HAL_ADC_ConfigChannel+0x1cc>
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	2b12      	cmp	r3, #18
 80012ee:	d105      	bne.n	80012fc <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	685b      	ldr	r3, [r3, #4]
 80012f4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	4a19      	ldr	r2, [pc, #100]	; (8001368 <HAL_ADC_ConfigChannel+0x238>)
 8001302:	4293      	cmp	r3, r2
 8001304:	d123      	bne.n	800134e <HAL_ADC_ConfigChannel+0x21e>
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	2b10      	cmp	r3, #16
 800130c:	d003      	beq.n	8001316 <HAL_ADC_ConfigChannel+0x1e6>
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	2b11      	cmp	r3, #17
 8001314:	d11b      	bne.n	800134e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	685b      	ldr	r3, [r3, #4]
 800131a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	2b10      	cmp	r3, #16
 8001328:	d111      	bne.n	800134e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800132a:	4b10      	ldr	r3, [pc, #64]	; (800136c <HAL_ADC_ConfigChannel+0x23c>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	4a10      	ldr	r2, [pc, #64]	; (8001370 <HAL_ADC_ConfigChannel+0x240>)
 8001330:	fba2 2303 	umull	r2, r3, r2, r3
 8001334:	0c9a      	lsrs	r2, r3, #18
 8001336:	4613      	mov	r3, r2
 8001338:	009b      	lsls	r3, r3, #2
 800133a:	4413      	add	r3, r2
 800133c:	005b      	lsls	r3, r3, #1
 800133e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001340:	e002      	b.n	8001348 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001342:	68bb      	ldr	r3, [r7, #8]
 8001344:	3b01      	subs	r3, #1
 8001346:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001348:	68bb      	ldr	r3, [r7, #8]
 800134a:	2b00      	cmp	r3, #0
 800134c:	d1f9      	bne.n	8001342 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	2200      	movs	r2, #0
 8001352:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001356:	2300      	movs	r3, #0
}
 8001358:	4618      	mov	r0, r3
 800135a:	3714      	adds	r7, #20
 800135c:	46bd      	mov	sp, r7
 800135e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001362:	4770      	bx	lr
 8001364:	40012300 	.word	0x40012300
 8001368:	40012000 	.word	0x40012000
 800136c:	20000000 	.word	0x20000000
 8001370:	431bde83 	.word	0x431bde83

08001374 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001374:	b480      	push	{r7}
 8001376:	b085      	sub	sp, #20
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800137c:	4b79      	ldr	r3, [pc, #484]	; (8001564 <ADC_Init+0x1f0>)
 800137e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	685a      	ldr	r2, [r3, #4]
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	431a      	orrs	r2, r3
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	685a      	ldr	r2, [r3, #4]
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80013a8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	6859      	ldr	r1, [r3, #4]
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	691b      	ldr	r3, [r3, #16]
 80013b4:	021a      	lsls	r2, r3, #8
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	430a      	orrs	r2, r1
 80013bc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	685a      	ldr	r2, [r3, #4]
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80013cc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	6859      	ldr	r1, [r3, #4]
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	689a      	ldr	r2, [r3, #8]
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	430a      	orrs	r2, r1
 80013de:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	689a      	ldr	r2, [r3, #8]
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80013ee:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	6899      	ldr	r1, [r3, #8]
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	68da      	ldr	r2, [r3, #12]
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	430a      	orrs	r2, r1
 8001400:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001406:	4a58      	ldr	r2, [pc, #352]	; (8001568 <ADC_Init+0x1f4>)
 8001408:	4293      	cmp	r3, r2
 800140a:	d022      	beq.n	8001452 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	689a      	ldr	r2, [r3, #8]
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800141a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	6899      	ldr	r1, [r3, #8]
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	430a      	orrs	r2, r1
 800142c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	689a      	ldr	r2, [r3, #8]
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800143c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	6899      	ldr	r1, [r3, #8]
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	430a      	orrs	r2, r1
 800144e:	609a      	str	r2, [r3, #8]
 8001450:	e00f      	b.n	8001472 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	689a      	ldr	r2, [r3, #8]
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001460:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	689a      	ldr	r2, [r3, #8]
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001470:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	689a      	ldr	r2, [r3, #8]
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f022 0202 	bic.w	r2, r2, #2
 8001480:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	6899      	ldr	r1, [r3, #8]
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	7e1b      	ldrb	r3, [r3, #24]
 800148c:	005a      	lsls	r2, r3, #1
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	430a      	orrs	r2, r1
 8001494:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	f893 3020 	ldrb.w	r3, [r3, #32]
 800149c:	2b00      	cmp	r3, #0
 800149e:	d01b      	beq.n	80014d8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	685a      	ldr	r2, [r3, #4]
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80014ae:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	685a      	ldr	r2, [r3, #4]
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80014be:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	6859      	ldr	r1, [r3, #4]
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014ca:	3b01      	subs	r3, #1
 80014cc:	035a      	lsls	r2, r3, #13
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	430a      	orrs	r2, r1
 80014d4:	605a      	str	r2, [r3, #4]
 80014d6:	e007      	b.n	80014e8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	685a      	ldr	r2, [r3, #4]
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80014e6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80014f6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	69db      	ldr	r3, [r3, #28]
 8001502:	3b01      	subs	r3, #1
 8001504:	051a      	lsls	r2, r3, #20
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	430a      	orrs	r2, r1
 800150c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	689a      	ldr	r2, [r3, #8]
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800151c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	6899      	ldr	r1, [r3, #8]
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800152a:	025a      	lsls	r2, r3, #9
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	430a      	orrs	r2, r1
 8001532:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	689a      	ldr	r2, [r3, #8]
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001542:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	6899      	ldr	r1, [r3, #8]
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	695b      	ldr	r3, [r3, #20]
 800154e:	029a      	lsls	r2, r3, #10
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	430a      	orrs	r2, r1
 8001556:	609a      	str	r2, [r3, #8]
}
 8001558:	bf00      	nop
 800155a:	3714      	adds	r7, #20
 800155c:	46bd      	mov	sp, r7
 800155e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001562:	4770      	bx	lr
 8001564:	40012300 	.word	0x40012300
 8001568:	0f000001 	.word	0x0f000001

0800156c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800156c:	b480      	push	{r7}
 800156e:	b085      	sub	sp, #20
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	f003 0307 	and.w	r3, r3, #7
 800157a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800157c:	4b0c      	ldr	r3, [pc, #48]	; (80015b0 <__NVIC_SetPriorityGrouping+0x44>)
 800157e:	68db      	ldr	r3, [r3, #12]
 8001580:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001582:	68ba      	ldr	r2, [r7, #8]
 8001584:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001588:	4013      	ands	r3, r2
 800158a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001590:	68bb      	ldr	r3, [r7, #8]
 8001592:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001594:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001598:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800159c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800159e:	4a04      	ldr	r2, [pc, #16]	; (80015b0 <__NVIC_SetPriorityGrouping+0x44>)
 80015a0:	68bb      	ldr	r3, [r7, #8]
 80015a2:	60d3      	str	r3, [r2, #12]
}
 80015a4:	bf00      	nop
 80015a6:	3714      	adds	r7, #20
 80015a8:	46bd      	mov	sp, r7
 80015aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ae:	4770      	bx	lr
 80015b0:	e000ed00 	.word	0xe000ed00

080015b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015b4:	b480      	push	{r7}
 80015b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015b8:	4b04      	ldr	r3, [pc, #16]	; (80015cc <__NVIC_GetPriorityGrouping+0x18>)
 80015ba:	68db      	ldr	r3, [r3, #12]
 80015bc:	0a1b      	lsrs	r3, r3, #8
 80015be:	f003 0307 	and.w	r3, r3, #7
}
 80015c2:	4618      	mov	r0, r3
 80015c4:	46bd      	mov	sp, r7
 80015c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ca:	4770      	bx	lr
 80015cc:	e000ed00 	.word	0xe000ed00

080015d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015d0:	b480      	push	{r7}
 80015d2:	b083      	sub	sp, #12
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	4603      	mov	r3, r0
 80015d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	db0b      	blt.n	80015fa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015e2:	79fb      	ldrb	r3, [r7, #7]
 80015e4:	f003 021f 	and.w	r2, r3, #31
 80015e8:	4907      	ldr	r1, [pc, #28]	; (8001608 <__NVIC_EnableIRQ+0x38>)
 80015ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ee:	095b      	lsrs	r3, r3, #5
 80015f0:	2001      	movs	r0, #1
 80015f2:	fa00 f202 	lsl.w	r2, r0, r2
 80015f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80015fa:	bf00      	nop
 80015fc:	370c      	adds	r7, #12
 80015fe:	46bd      	mov	sp, r7
 8001600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001604:	4770      	bx	lr
 8001606:	bf00      	nop
 8001608:	e000e100 	.word	0xe000e100

0800160c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800160c:	b480      	push	{r7}
 800160e:	b083      	sub	sp, #12
 8001610:	af00      	add	r7, sp, #0
 8001612:	4603      	mov	r3, r0
 8001614:	6039      	str	r1, [r7, #0]
 8001616:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001618:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800161c:	2b00      	cmp	r3, #0
 800161e:	db0a      	blt.n	8001636 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	b2da      	uxtb	r2, r3
 8001624:	490c      	ldr	r1, [pc, #48]	; (8001658 <__NVIC_SetPriority+0x4c>)
 8001626:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800162a:	0112      	lsls	r2, r2, #4
 800162c:	b2d2      	uxtb	r2, r2
 800162e:	440b      	add	r3, r1
 8001630:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001634:	e00a      	b.n	800164c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	b2da      	uxtb	r2, r3
 800163a:	4908      	ldr	r1, [pc, #32]	; (800165c <__NVIC_SetPriority+0x50>)
 800163c:	79fb      	ldrb	r3, [r7, #7]
 800163e:	f003 030f 	and.w	r3, r3, #15
 8001642:	3b04      	subs	r3, #4
 8001644:	0112      	lsls	r2, r2, #4
 8001646:	b2d2      	uxtb	r2, r2
 8001648:	440b      	add	r3, r1
 800164a:	761a      	strb	r2, [r3, #24]
}
 800164c:	bf00      	nop
 800164e:	370c      	adds	r7, #12
 8001650:	46bd      	mov	sp, r7
 8001652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001656:	4770      	bx	lr
 8001658:	e000e100 	.word	0xe000e100
 800165c:	e000ed00 	.word	0xe000ed00

08001660 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001660:	b480      	push	{r7}
 8001662:	b089      	sub	sp, #36	; 0x24
 8001664:	af00      	add	r7, sp, #0
 8001666:	60f8      	str	r0, [r7, #12]
 8001668:	60b9      	str	r1, [r7, #8]
 800166a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	f003 0307 	and.w	r3, r3, #7
 8001672:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001674:	69fb      	ldr	r3, [r7, #28]
 8001676:	f1c3 0307 	rsb	r3, r3, #7
 800167a:	2b04      	cmp	r3, #4
 800167c:	bf28      	it	cs
 800167e:	2304      	movcs	r3, #4
 8001680:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001682:	69fb      	ldr	r3, [r7, #28]
 8001684:	3304      	adds	r3, #4
 8001686:	2b06      	cmp	r3, #6
 8001688:	d902      	bls.n	8001690 <NVIC_EncodePriority+0x30>
 800168a:	69fb      	ldr	r3, [r7, #28]
 800168c:	3b03      	subs	r3, #3
 800168e:	e000      	b.n	8001692 <NVIC_EncodePriority+0x32>
 8001690:	2300      	movs	r3, #0
 8001692:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001694:	f04f 32ff 	mov.w	r2, #4294967295
 8001698:	69bb      	ldr	r3, [r7, #24]
 800169a:	fa02 f303 	lsl.w	r3, r2, r3
 800169e:	43da      	mvns	r2, r3
 80016a0:	68bb      	ldr	r3, [r7, #8]
 80016a2:	401a      	ands	r2, r3
 80016a4:	697b      	ldr	r3, [r7, #20]
 80016a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016a8:	f04f 31ff 	mov.w	r1, #4294967295
 80016ac:	697b      	ldr	r3, [r7, #20]
 80016ae:	fa01 f303 	lsl.w	r3, r1, r3
 80016b2:	43d9      	mvns	r1, r3
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016b8:	4313      	orrs	r3, r2
         );
}
 80016ba:	4618      	mov	r0, r3
 80016bc:	3724      	adds	r7, #36	; 0x24
 80016be:	46bd      	mov	sp, r7
 80016c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c4:	4770      	bx	lr
	...

080016c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b082      	sub	sp, #8
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	3b01      	subs	r3, #1
 80016d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80016d8:	d301      	bcc.n	80016de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016da:	2301      	movs	r3, #1
 80016dc:	e00f      	b.n	80016fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016de:	4a0a      	ldr	r2, [pc, #40]	; (8001708 <SysTick_Config+0x40>)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	3b01      	subs	r3, #1
 80016e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016e6:	210f      	movs	r1, #15
 80016e8:	f04f 30ff 	mov.w	r0, #4294967295
 80016ec:	f7ff ff8e 	bl	800160c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016f0:	4b05      	ldr	r3, [pc, #20]	; (8001708 <SysTick_Config+0x40>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016f6:	4b04      	ldr	r3, [pc, #16]	; (8001708 <SysTick_Config+0x40>)
 80016f8:	2207      	movs	r2, #7
 80016fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016fc:	2300      	movs	r3, #0
}
 80016fe:	4618      	mov	r0, r3
 8001700:	3708      	adds	r7, #8
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	e000e010 	.word	0xe000e010

0800170c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b082      	sub	sp, #8
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001714:	6878      	ldr	r0, [r7, #4]
 8001716:	f7ff ff29 	bl	800156c <__NVIC_SetPriorityGrouping>
}
 800171a:	bf00      	nop
 800171c:	3708      	adds	r7, #8
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}

08001722 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001722:	b580      	push	{r7, lr}
 8001724:	b086      	sub	sp, #24
 8001726:	af00      	add	r7, sp, #0
 8001728:	4603      	mov	r3, r0
 800172a:	60b9      	str	r1, [r7, #8]
 800172c:	607a      	str	r2, [r7, #4]
 800172e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001730:	2300      	movs	r3, #0
 8001732:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001734:	f7ff ff3e 	bl	80015b4 <__NVIC_GetPriorityGrouping>
 8001738:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800173a:	687a      	ldr	r2, [r7, #4]
 800173c:	68b9      	ldr	r1, [r7, #8]
 800173e:	6978      	ldr	r0, [r7, #20]
 8001740:	f7ff ff8e 	bl	8001660 <NVIC_EncodePriority>
 8001744:	4602      	mov	r2, r0
 8001746:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800174a:	4611      	mov	r1, r2
 800174c:	4618      	mov	r0, r3
 800174e:	f7ff ff5d 	bl	800160c <__NVIC_SetPriority>
}
 8001752:	bf00      	nop
 8001754:	3718      	adds	r7, #24
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}

0800175a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800175a:	b580      	push	{r7, lr}
 800175c:	b082      	sub	sp, #8
 800175e:	af00      	add	r7, sp, #0
 8001760:	4603      	mov	r3, r0
 8001762:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001764:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001768:	4618      	mov	r0, r3
 800176a:	f7ff ff31 	bl	80015d0 <__NVIC_EnableIRQ>
}
 800176e:	bf00      	nop
 8001770:	3708      	adds	r7, #8
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}

08001776 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001776:	b580      	push	{r7, lr}
 8001778:	b082      	sub	sp, #8
 800177a:	af00      	add	r7, sp, #0
 800177c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800177e:	6878      	ldr	r0, [r7, #4]
 8001780:	f7ff ffa2 	bl	80016c8 <SysTick_Config>
 8001784:	4603      	mov	r3, r0
}
 8001786:	4618      	mov	r0, r3
 8001788:	3708      	adds	r7, #8
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}
	...

08001790 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001790:	b480      	push	{r7}
 8001792:	b089      	sub	sp, #36	; 0x24
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
 8001798:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800179a:	2300      	movs	r3, #0
 800179c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800179e:	2300      	movs	r3, #0
 80017a0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80017a2:	2300      	movs	r3, #0
 80017a4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017a6:	2300      	movs	r3, #0
 80017a8:	61fb      	str	r3, [r7, #28]
 80017aa:	e16b      	b.n	8001a84 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80017ac:	2201      	movs	r2, #1
 80017ae:	69fb      	ldr	r3, [r7, #28]
 80017b0:	fa02 f303 	lsl.w	r3, r2, r3
 80017b4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	697a      	ldr	r2, [r7, #20]
 80017bc:	4013      	ands	r3, r2
 80017be:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80017c0:	693a      	ldr	r2, [r7, #16]
 80017c2:	697b      	ldr	r3, [r7, #20]
 80017c4:	429a      	cmp	r2, r3
 80017c6:	f040 815a 	bne.w	8001a7e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	685b      	ldr	r3, [r3, #4]
 80017ce:	f003 0303 	and.w	r3, r3, #3
 80017d2:	2b01      	cmp	r3, #1
 80017d4:	d005      	beq.n	80017e2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80017de:	2b02      	cmp	r3, #2
 80017e0:	d130      	bne.n	8001844 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	689b      	ldr	r3, [r3, #8]
 80017e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80017e8:	69fb      	ldr	r3, [r7, #28]
 80017ea:	005b      	lsls	r3, r3, #1
 80017ec:	2203      	movs	r2, #3
 80017ee:	fa02 f303 	lsl.w	r3, r2, r3
 80017f2:	43db      	mvns	r3, r3
 80017f4:	69ba      	ldr	r2, [r7, #24]
 80017f6:	4013      	ands	r3, r2
 80017f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	68da      	ldr	r2, [r3, #12]
 80017fe:	69fb      	ldr	r3, [r7, #28]
 8001800:	005b      	lsls	r3, r3, #1
 8001802:	fa02 f303 	lsl.w	r3, r2, r3
 8001806:	69ba      	ldr	r2, [r7, #24]
 8001808:	4313      	orrs	r3, r2
 800180a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	69ba      	ldr	r2, [r7, #24]
 8001810:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001818:	2201      	movs	r2, #1
 800181a:	69fb      	ldr	r3, [r7, #28]
 800181c:	fa02 f303 	lsl.w	r3, r2, r3
 8001820:	43db      	mvns	r3, r3
 8001822:	69ba      	ldr	r2, [r7, #24]
 8001824:	4013      	ands	r3, r2
 8001826:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	091b      	lsrs	r3, r3, #4
 800182e:	f003 0201 	and.w	r2, r3, #1
 8001832:	69fb      	ldr	r3, [r7, #28]
 8001834:	fa02 f303 	lsl.w	r3, r2, r3
 8001838:	69ba      	ldr	r2, [r7, #24]
 800183a:	4313      	orrs	r3, r2
 800183c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	69ba      	ldr	r2, [r7, #24]
 8001842:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	f003 0303 	and.w	r3, r3, #3
 800184c:	2b03      	cmp	r3, #3
 800184e:	d017      	beq.n	8001880 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	68db      	ldr	r3, [r3, #12]
 8001854:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001856:	69fb      	ldr	r3, [r7, #28]
 8001858:	005b      	lsls	r3, r3, #1
 800185a:	2203      	movs	r2, #3
 800185c:	fa02 f303 	lsl.w	r3, r2, r3
 8001860:	43db      	mvns	r3, r3
 8001862:	69ba      	ldr	r2, [r7, #24]
 8001864:	4013      	ands	r3, r2
 8001866:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	689a      	ldr	r2, [r3, #8]
 800186c:	69fb      	ldr	r3, [r7, #28]
 800186e:	005b      	lsls	r3, r3, #1
 8001870:	fa02 f303 	lsl.w	r3, r2, r3
 8001874:	69ba      	ldr	r2, [r7, #24]
 8001876:	4313      	orrs	r3, r2
 8001878:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	69ba      	ldr	r2, [r7, #24]
 800187e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	f003 0303 	and.w	r3, r3, #3
 8001888:	2b02      	cmp	r3, #2
 800188a:	d123      	bne.n	80018d4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800188c:	69fb      	ldr	r3, [r7, #28]
 800188e:	08da      	lsrs	r2, r3, #3
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	3208      	adds	r2, #8
 8001894:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001898:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800189a:	69fb      	ldr	r3, [r7, #28]
 800189c:	f003 0307 	and.w	r3, r3, #7
 80018a0:	009b      	lsls	r3, r3, #2
 80018a2:	220f      	movs	r2, #15
 80018a4:	fa02 f303 	lsl.w	r3, r2, r3
 80018a8:	43db      	mvns	r3, r3
 80018aa:	69ba      	ldr	r2, [r7, #24]
 80018ac:	4013      	ands	r3, r2
 80018ae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	691a      	ldr	r2, [r3, #16]
 80018b4:	69fb      	ldr	r3, [r7, #28]
 80018b6:	f003 0307 	and.w	r3, r3, #7
 80018ba:	009b      	lsls	r3, r3, #2
 80018bc:	fa02 f303 	lsl.w	r3, r2, r3
 80018c0:	69ba      	ldr	r2, [r7, #24]
 80018c2:	4313      	orrs	r3, r2
 80018c4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80018c6:	69fb      	ldr	r3, [r7, #28]
 80018c8:	08da      	lsrs	r2, r3, #3
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	3208      	adds	r2, #8
 80018ce:	69b9      	ldr	r1, [r7, #24]
 80018d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80018da:	69fb      	ldr	r3, [r7, #28]
 80018dc:	005b      	lsls	r3, r3, #1
 80018de:	2203      	movs	r2, #3
 80018e0:	fa02 f303 	lsl.w	r3, r2, r3
 80018e4:	43db      	mvns	r3, r3
 80018e6:	69ba      	ldr	r2, [r7, #24]
 80018e8:	4013      	ands	r3, r2
 80018ea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	f003 0203 	and.w	r2, r3, #3
 80018f4:	69fb      	ldr	r3, [r7, #28]
 80018f6:	005b      	lsls	r3, r3, #1
 80018f8:	fa02 f303 	lsl.w	r3, r2, r3
 80018fc:	69ba      	ldr	r2, [r7, #24]
 80018fe:	4313      	orrs	r3, r2
 8001900:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	69ba      	ldr	r2, [r7, #24]
 8001906:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001910:	2b00      	cmp	r3, #0
 8001912:	f000 80b4 	beq.w	8001a7e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001916:	2300      	movs	r3, #0
 8001918:	60fb      	str	r3, [r7, #12]
 800191a:	4b60      	ldr	r3, [pc, #384]	; (8001a9c <HAL_GPIO_Init+0x30c>)
 800191c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800191e:	4a5f      	ldr	r2, [pc, #380]	; (8001a9c <HAL_GPIO_Init+0x30c>)
 8001920:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001924:	6453      	str	r3, [r2, #68]	; 0x44
 8001926:	4b5d      	ldr	r3, [pc, #372]	; (8001a9c <HAL_GPIO_Init+0x30c>)
 8001928:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800192a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800192e:	60fb      	str	r3, [r7, #12]
 8001930:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001932:	4a5b      	ldr	r2, [pc, #364]	; (8001aa0 <HAL_GPIO_Init+0x310>)
 8001934:	69fb      	ldr	r3, [r7, #28]
 8001936:	089b      	lsrs	r3, r3, #2
 8001938:	3302      	adds	r3, #2
 800193a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800193e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001940:	69fb      	ldr	r3, [r7, #28]
 8001942:	f003 0303 	and.w	r3, r3, #3
 8001946:	009b      	lsls	r3, r3, #2
 8001948:	220f      	movs	r2, #15
 800194a:	fa02 f303 	lsl.w	r3, r2, r3
 800194e:	43db      	mvns	r3, r3
 8001950:	69ba      	ldr	r2, [r7, #24]
 8001952:	4013      	ands	r3, r2
 8001954:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	4a52      	ldr	r2, [pc, #328]	; (8001aa4 <HAL_GPIO_Init+0x314>)
 800195a:	4293      	cmp	r3, r2
 800195c:	d02b      	beq.n	80019b6 <HAL_GPIO_Init+0x226>
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	4a51      	ldr	r2, [pc, #324]	; (8001aa8 <HAL_GPIO_Init+0x318>)
 8001962:	4293      	cmp	r3, r2
 8001964:	d025      	beq.n	80019b2 <HAL_GPIO_Init+0x222>
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	4a50      	ldr	r2, [pc, #320]	; (8001aac <HAL_GPIO_Init+0x31c>)
 800196a:	4293      	cmp	r3, r2
 800196c:	d01f      	beq.n	80019ae <HAL_GPIO_Init+0x21e>
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	4a4f      	ldr	r2, [pc, #316]	; (8001ab0 <HAL_GPIO_Init+0x320>)
 8001972:	4293      	cmp	r3, r2
 8001974:	d019      	beq.n	80019aa <HAL_GPIO_Init+0x21a>
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	4a4e      	ldr	r2, [pc, #312]	; (8001ab4 <HAL_GPIO_Init+0x324>)
 800197a:	4293      	cmp	r3, r2
 800197c:	d013      	beq.n	80019a6 <HAL_GPIO_Init+0x216>
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	4a4d      	ldr	r2, [pc, #308]	; (8001ab8 <HAL_GPIO_Init+0x328>)
 8001982:	4293      	cmp	r3, r2
 8001984:	d00d      	beq.n	80019a2 <HAL_GPIO_Init+0x212>
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	4a4c      	ldr	r2, [pc, #304]	; (8001abc <HAL_GPIO_Init+0x32c>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d007      	beq.n	800199e <HAL_GPIO_Init+0x20e>
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	4a4b      	ldr	r2, [pc, #300]	; (8001ac0 <HAL_GPIO_Init+0x330>)
 8001992:	4293      	cmp	r3, r2
 8001994:	d101      	bne.n	800199a <HAL_GPIO_Init+0x20a>
 8001996:	2307      	movs	r3, #7
 8001998:	e00e      	b.n	80019b8 <HAL_GPIO_Init+0x228>
 800199a:	2308      	movs	r3, #8
 800199c:	e00c      	b.n	80019b8 <HAL_GPIO_Init+0x228>
 800199e:	2306      	movs	r3, #6
 80019a0:	e00a      	b.n	80019b8 <HAL_GPIO_Init+0x228>
 80019a2:	2305      	movs	r3, #5
 80019a4:	e008      	b.n	80019b8 <HAL_GPIO_Init+0x228>
 80019a6:	2304      	movs	r3, #4
 80019a8:	e006      	b.n	80019b8 <HAL_GPIO_Init+0x228>
 80019aa:	2303      	movs	r3, #3
 80019ac:	e004      	b.n	80019b8 <HAL_GPIO_Init+0x228>
 80019ae:	2302      	movs	r3, #2
 80019b0:	e002      	b.n	80019b8 <HAL_GPIO_Init+0x228>
 80019b2:	2301      	movs	r3, #1
 80019b4:	e000      	b.n	80019b8 <HAL_GPIO_Init+0x228>
 80019b6:	2300      	movs	r3, #0
 80019b8:	69fa      	ldr	r2, [r7, #28]
 80019ba:	f002 0203 	and.w	r2, r2, #3
 80019be:	0092      	lsls	r2, r2, #2
 80019c0:	4093      	lsls	r3, r2
 80019c2:	69ba      	ldr	r2, [r7, #24]
 80019c4:	4313      	orrs	r3, r2
 80019c6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80019c8:	4935      	ldr	r1, [pc, #212]	; (8001aa0 <HAL_GPIO_Init+0x310>)
 80019ca:	69fb      	ldr	r3, [r7, #28]
 80019cc:	089b      	lsrs	r3, r3, #2
 80019ce:	3302      	adds	r3, #2
 80019d0:	69ba      	ldr	r2, [r7, #24]
 80019d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80019d6:	4b3b      	ldr	r3, [pc, #236]	; (8001ac4 <HAL_GPIO_Init+0x334>)
 80019d8:	689b      	ldr	r3, [r3, #8]
 80019da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019dc:	693b      	ldr	r3, [r7, #16]
 80019de:	43db      	mvns	r3, r3
 80019e0:	69ba      	ldr	r2, [r7, #24]
 80019e2:	4013      	ands	r3, r2
 80019e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d003      	beq.n	80019fa <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80019f2:	69ba      	ldr	r2, [r7, #24]
 80019f4:	693b      	ldr	r3, [r7, #16]
 80019f6:	4313      	orrs	r3, r2
 80019f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80019fa:	4a32      	ldr	r2, [pc, #200]	; (8001ac4 <HAL_GPIO_Init+0x334>)
 80019fc:	69bb      	ldr	r3, [r7, #24]
 80019fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a00:	4b30      	ldr	r3, [pc, #192]	; (8001ac4 <HAL_GPIO_Init+0x334>)
 8001a02:	68db      	ldr	r3, [r3, #12]
 8001a04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a06:	693b      	ldr	r3, [r7, #16]
 8001a08:	43db      	mvns	r3, r3
 8001a0a:	69ba      	ldr	r2, [r7, #24]
 8001a0c:	4013      	ands	r3, r2
 8001a0e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d003      	beq.n	8001a24 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001a1c:	69ba      	ldr	r2, [r7, #24]
 8001a1e:	693b      	ldr	r3, [r7, #16]
 8001a20:	4313      	orrs	r3, r2
 8001a22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001a24:	4a27      	ldr	r2, [pc, #156]	; (8001ac4 <HAL_GPIO_Init+0x334>)
 8001a26:	69bb      	ldr	r3, [r7, #24]
 8001a28:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001a2a:	4b26      	ldr	r3, [pc, #152]	; (8001ac4 <HAL_GPIO_Init+0x334>)
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a30:	693b      	ldr	r3, [r7, #16]
 8001a32:	43db      	mvns	r3, r3
 8001a34:	69ba      	ldr	r2, [r7, #24]
 8001a36:	4013      	ands	r3, r2
 8001a38:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d003      	beq.n	8001a4e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001a46:	69ba      	ldr	r2, [r7, #24]
 8001a48:	693b      	ldr	r3, [r7, #16]
 8001a4a:	4313      	orrs	r3, r2
 8001a4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001a4e:	4a1d      	ldr	r2, [pc, #116]	; (8001ac4 <HAL_GPIO_Init+0x334>)
 8001a50:	69bb      	ldr	r3, [r7, #24]
 8001a52:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a54:	4b1b      	ldr	r3, [pc, #108]	; (8001ac4 <HAL_GPIO_Init+0x334>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a5a:	693b      	ldr	r3, [r7, #16]
 8001a5c:	43db      	mvns	r3, r3
 8001a5e:	69ba      	ldr	r2, [r7, #24]
 8001a60:	4013      	ands	r3, r2
 8001a62:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d003      	beq.n	8001a78 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001a70:	69ba      	ldr	r2, [r7, #24]
 8001a72:	693b      	ldr	r3, [r7, #16]
 8001a74:	4313      	orrs	r3, r2
 8001a76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001a78:	4a12      	ldr	r2, [pc, #72]	; (8001ac4 <HAL_GPIO_Init+0x334>)
 8001a7a:	69bb      	ldr	r3, [r7, #24]
 8001a7c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a7e:	69fb      	ldr	r3, [r7, #28]
 8001a80:	3301      	adds	r3, #1
 8001a82:	61fb      	str	r3, [r7, #28]
 8001a84:	69fb      	ldr	r3, [r7, #28]
 8001a86:	2b0f      	cmp	r3, #15
 8001a88:	f67f ae90 	bls.w	80017ac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001a8c:	bf00      	nop
 8001a8e:	bf00      	nop
 8001a90:	3724      	adds	r7, #36	; 0x24
 8001a92:	46bd      	mov	sp, r7
 8001a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a98:	4770      	bx	lr
 8001a9a:	bf00      	nop
 8001a9c:	40023800 	.word	0x40023800
 8001aa0:	40013800 	.word	0x40013800
 8001aa4:	40020000 	.word	0x40020000
 8001aa8:	40020400 	.word	0x40020400
 8001aac:	40020800 	.word	0x40020800
 8001ab0:	40020c00 	.word	0x40020c00
 8001ab4:	40021000 	.word	0x40021000
 8001ab8:	40021400 	.word	0x40021400
 8001abc:	40021800 	.word	0x40021800
 8001ac0:	40021c00 	.word	0x40021c00
 8001ac4:	40013c00 	.word	0x40013c00

08001ac8 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001ac8:	b590      	push	{r4, r7, lr}
 8001aca:	b08d      	sub	sp, #52	; 0x34
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001ad6:	6a3b      	ldr	r3, [r7, #32]
 8001ad8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f003 fc99 	bl	8005416 <USB_GetMode>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	f040 848a 	bne.w	8002400 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4618      	mov	r0, r3
 8001af2:	f003 fbfd 	bl	80052f0 <USB_ReadInterrupts>
 8001af6:	4603      	mov	r3, r0
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	f000 8480 	beq.w	80023fe <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001afe:	69fb      	ldr	r3, [r7, #28]
 8001b00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b04:	689b      	ldr	r3, [r3, #8]
 8001b06:	0a1b      	lsrs	r3, r3, #8
 8001b08:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	4618      	mov	r0, r3
 8001b18:	f003 fbea 	bl	80052f0 <USB_ReadInterrupts>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	f003 0302 	and.w	r3, r3, #2
 8001b22:	2b02      	cmp	r3, #2
 8001b24:	d107      	bne.n	8001b36 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	695a      	ldr	r2, [r3, #20]
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f002 0202 	and.w	r2, r2, #2
 8001b34:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f003 fbd8 	bl	80052f0 <USB_ReadInterrupts>
 8001b40:	4603      	mov	r3, r0
 8001b42:	f003 0310 	and.w	r3, r3, #16
 8001b46:	2b10      	cmp	r3, #16
 8001b48:	d161      	bne.n	8001c0e <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	699a      	ldr	r2, [r3, #24]
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f022 0210 	bic.w	r2, r2, #16
 8001b58:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001b5a:	6a3b      	ldr	r3, [r7, #32]
 8001b5c:	6a1b      	ldr	r3, [r3, #32]
 8001b5e:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001b60:	69bb      	ldr	r3, [r7, #24]
 8001b62:	f003 020f 	and.w	r2, r3, #15
 8001b66:	4613      	mov	r3, r2
 8001b68:	00db      	lsls	r3, r3, #3
 8001b6a:	4413      	add	r3, r2
 8001b6c:	009b      	lsls	r3, r3, #2
 8001b6e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001b72:	687a      	ldr	r2, [r7, #4]
 8001b74:	4413      	add	r3, r2
 8001b76:	3304      	adds	r3, #4
 8001b78:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001b7a:	69bb      	ldr	r3, [r7, #24]
 8001b7c:	0c5b      	lsrs	r3, r3, #17
 8001b7e:	f003 030f 	and.w	r3, r3, #15
 8001b82:	2b02      	cmp	r3, #2
 8001b84:	d124      	bne.n	8001bd0 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001b86:	69ba      	ldr	r2, [r7, #24]
 8001b88:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001b8c:	4013      	ands	r3, r2
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d035      	beq.n	8001bfe <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001b92:	697b      	ldr	r3, [r7, #20]
 8001b94:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001b96:	69bb      	ldr	r3, [r7, #24]
 8001b98:	091b      	lsrs	r3, r3, #4
 8001b9a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001b9c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001ba0:	b29b      	uxth	r3, r3
 8001ba2:	461a      	mov	r2, r3
 8001ba4:	6a38      	ldr	r0, [r7, #32]
 8001ba6:	f003 fa51 	bl	800504c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001baa:	697b      	ldr	r3, [r7, #20]
 8001bac:	691a      	ldr	r2, [r3, #16]
 8001bae:	69bb      	ldr	r3, [r7, #24]
 8001bb0:	091b      	lsrs	r3, r3, #4
 8001bb2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001bb6:	441a      	add	r2, r3
 8001bb8:	697b      	ldr	r3, [r7, #20]
 8001bba:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001bbc:	697b      	ldr	r3, [r7, #20]
 8001bbe:	6a1a      	ldr	r2, [r3, #32]
 8001bc0:	69bb      	ldr	r3, [r7, #24]
 8001bc2:	091b      	lsrs	r3, r3, #4
 8001bc4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001bc8:	441a      	add	r2, r3
 8001bca:	697b      	ldr	r3, [r7, #20]
 8001bcc:	621a      	str	r2, [r3, #32]
 8001bce:	e016      	b.n	8001bfe <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001bd0:	69bb      	ldr	r3, [r7, #24]
 8001bd2:	0c5b      	lsrs	r3, r3, #17
 8001bd4:	f003 030f 	and.w	r3, r3, #15
 8001bd8:	2b06      	cmp	r3, #6
 8001bda:	d110      	bne.n	8001bfe <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001be2:	2208      	movs	r2, #8
 8001be4:	4619      	mov	r1, r3
 8001be6:	6a38      	ldr	r0, [r7, #32]
 8001be8:	f003 fa30 	bl	800504c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001bec:	697b      	ldr	r3, [r7, #20]
 8001bee:	6a1a      	ldr	r2, [r3, #32]
 8001bf0:	69bb      	ldr	r3, [r7, #24]
 8001bf2:	091b      	lsrs	r3, r3, #4
 8001bf4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001bf8:	441a      	add	r2, r3
 8001bfa:	697b      	ldr	r3, [r7, #20]
 8001bfc:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	699a      	ldr	r2, [r3, #24]
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f042 0210 	orr.w	r2, r2, #16
 8001c0c:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4618      	mov	r0, r3
 8001c14:	f003 fb6c 	bl	80052f0 <USB_ReadInterrupts>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001c1e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001c22:	f040 80a7 	bne.w	8001d74 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8001c26:	2300      	movs	r3, #0
 8001c28:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4618      	mov	r0, r3
 8001c30:	f003 fb71 	bl	8005316 <USB_ReadDevAllOutEpInterrupt>
 8001c34:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001c36:	e099      	b.n	8001d6c <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001c38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c3a:	f003 0301 	and.w	r3, r3, #1
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	f000 808e 	beq.w	8001d60 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c4a:	b2d2      	uxtb	r2, r2
 8001c4c:	4611      	mov	r1, r2
 8001c4e:	4618      	mov	r0, r3
 8001c50:	f003 fb95 	bl	800537e <USB_ReadDevOutEPInterrupt>
 8001c54:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001c56:	693b      	ldr	r3, [r7, #16]
 8001c58:	f003 0301 	and.w	r3, r3, #1
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d00c      	beq.n	8001c7a <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c62:	015a      	lsls	r2, r3, #5
 8001c64:	69fb      	ldr	r3, [r7, #28]
 8001c66:	4413      	add	r3, r2
 8001c68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001c6c:	461a      	mov	r2, r3
 8001c6e:	2301      	movs	r3, #1
 8001c70:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001c72:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001c74:	6878      	ldr	r0, [r7, #4]
 8001c76:	f000 fe61 	bl	800293c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001c7a:	693b      	ldr	r3, [r7, #16]
 8001c7c:	f003 0308 	and.w	r3, r3, #8
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d00c      	beq.n	8001c9e <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c86:	015a      	lsls	r2, r3, #5
 8001c88:	69fb      	ldr	r3, [r7, #28]
 8001c8a:	4413      	add	r3, r2
 8001c8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001c90:	461a      	mov	r2, r3
 8001c92:	2308      	movs	r3, #8
 8001c94:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001c96:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001c98:	6878      	ldr	r0, [r7, #4]
 8001c9a:	f000 ff37 	bl	8002b0c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001c9e:	693b      	ldr	r3, [r7, #16]
 8001ca0:	f003 0310 	and.w	r3, r3, #16
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d008      	beq.n	8001cba <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001caa:	015a      	lsls	r2, r3, #5
 8001cac:	69fb      	ldr	r3, [r7, #28]
 8001cae:	4413      	add	r3, r2
 8001cb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001cb4:	461a      	mov	r2, r3
 8001cb6:	2310      	movs	r3, #16
 8001cb8:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8001cba:	693b      	ldr	r3, [r7, #16]
 8001cbc:	f003 0302 	and.w	r3, r3, #2
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d030      	beq.n	8001d26 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001cc4:	6a3b      	ldr	r3, [r7, #32]
 8001cc6:	695b      	ldr	r3, [r3, #20]
 8001cc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ccc:	2b80      	cmp	r3, #128	; 0x80
 8001cce:	d109      	bne.n	8001ce4 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001cd0:	69fb      	ldr	r3, [r7, #28]
 8001cd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	69fa      	ldr	r2, [r7, #28]
 8001cda:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001cde:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ce2:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8001ce4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ce6:	4613      	mov	r3, r2
 8001ce8:	00db      	lsls	r3, r3, #3
 8001cea:	4413      	add	r3, r2
 8001cec:	009b      	lsls	r3, r3, #2
 8001cee:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001cf2:	687a      	ldr	r2, [r7, #4]
 8001cf4:	4413      	add	r3, r2
 8001cf6:	3304      	adds	r3, #4
 8001cf8:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001cfa:	697b      	ldr	r3, [r7, #20]
 8001cfc:	78db      	ldrb	r3, [r3, #3]
 8001cfe:	2b01      	cmp	r3, #1
 8001d00:	d108      	bne.n	8001d14 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8001d02:	697b      	ldr	r3, [r7, #20]
 8001d04:	2200      	movs	r2, #0
 8001d06:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d0a:	b2db      	uxtb	r3, r3
 8001d0c:	4619      	mov	r1, r3
 8001d0e:	6878      	ldr	r0, [r7, #4]
 8001d10:	f004 fe6e 	bl	80069f0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8001d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d16:	015a      	lsls	r2, r3, #5
 8001d18:	69fb      	ldr	r3, [r7, #28]
 8001d1a:	4413      	add	r3, r2
 8001d1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001d20:	461a      	mov	r2, r3
 8001d22:	2302      	movs	r3, #2
 8001d24:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001d26:	693b      	ldr	r3, [r7, #16]
 8001d28:	f003 0320 	and.w	r3, r3, #32
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d008      	beq.n	8001d42 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d32:	015a      	lsls	r2, r3, #5
 8001d34:	69fb      	ldr	r3, [r7, #28]
 8001d36:	4413      	add	r3, r2
 8001d38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001d3c:	461a      	mov	r2, r3
 8001d3e:	2320      	movs	r3, #32
 8001d40:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001d42:	693b      	ldr	r3, [r7, #16]
 8001d44:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d009      	beq.n	8001d60 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d4e:	015a      	lsls	r2, r3, #5
 8001d50:	69fb      	ldr	r3, [r7, #28]
 8001d52:	4413      	add	r3, r2
 8001d54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001d58:	461a      	mov	r2, r3
 8001d5a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d5e:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d62:	3301      	adds	r3, #1
 8001d64:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001d66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d68:	085b      	lsrs	r3, r3, #1
 8001d6a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001d6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	f47f af62 	bne.w	8001c38 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f003 fab9 	bl	80052f0 <USB_ReadInterrupts>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d84:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001d88:	f040 80db 	bne.w	8001f42 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4618      	mov	r0, r3
 8001d92:	f003 fada 	bl	800534a <USB_ReadDevAllInEpInterrupt>
 8001d96:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001d9c:	e0cd      	b.n	8001f3a <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001d9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001da0:	f003 0301 	and.w	r3, r3, #1
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	f000 80c2 	beq.w	8001f2e <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001db0:	b2d2      	uxtb	r2, r2
 8001db2:	4611      	mov	r1, r2
 8001db4:	4618      	mov	r0, r3
 8001db6:	f003 fb00 	bl	80053ba <USB_ReadDevInEPInterrupt>
 8001dba:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001dbc:	693b      	ldr	r3, [r7, #16]
 8001dbe:	f003 0301 	and.w	r3, r3, #1
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d057      	beq.n	8001e76 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dc8:	f003 030f 	and.w	r3, r3, #15
 8001dcc:	2201      	movs	r2, #1
 8001dce:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd2:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001dd4:	69fb      	ldr	r3, [r7, #28]
 8001dd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001dda:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	43db      	mvns	r3, r3
 8001de0:	69f9      	ldr	r1, [r7, #28]
 8001de2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001de6:	4013      	ands	r3, r2
 8001de8:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dec:	015a      	lsls	r2, r3, #5
 8001dee:	69fb      	ldr	r3, [r7, #28]
 8001df0:	4413      	add	r3, r2
 8001df2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001df6:	461a      	mov	r2, r3
 8001df8:	2301      	movs	r3, #1
 8001dfa:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	691b      	ldr	r3, [r3, #16]
 8001e00:	2b01      	cmp	r3, #1
 8001e02:	d132      	bne.n	8001e6a <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001e04:	6879      	ldr	r1, [r7, #4]
 8001e06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e08:	4613      	mov	r3, r2
 8001e0a:	00db      	lsls	r3, r3, #3
 8001e0c:	4413      	add	r3, r2
 8001e0e:	009b      	lsls	r3, r3, #2
 8001e10:	440b      	add	r3, r1
 8001e12:	334c      	adds	r3, #76	; 0x4c
 8001e14:	6819      	ldr	r1, [r3, #0]
 8001e16:	6878      	ldr	r0, [r7, #4]
 8001e18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e1a:	4613      	mov	r3, r2
 8001e1c:	00db      	lsls	r3, r3, #3
 8001e1e:	4413      	add	r3, r2
 8001e20:	009b      	lsls	r3, r3, #2
 8001e22:	4403      	add	r3, r0
 8001e24:	3348      	adds	r3, #72	; 0x48
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4419      	add	r1, r3
 8001e2a:	6878      	ldr	r0, [r7, #4]
 8001e2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e2e:	4613      	mov	r3, r2
 8001e30:	00db      	lsls	r3, r3, #3
 8001e32:	4413      	add	r3, r2
 8001e34:	009b      	lsls	r3, r3, #2
 8001e36:	4403      	add	r3, r0
 8001e38:	334c      	adds	r3, #76	; 0x4c
 8001e3a:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d113      	bne.n	8001e6a <HAL_PCD_IRQHandler+0x3a2>
 8001e42:	6879      	ldr	r1, [r7, #4]
 8001e44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e46:	4613      	mov	r3, r2
 8001e48:	00db      	lsls	r3, r3, #3
 8001e4a:	4413      	add	r3, r2
 8001e4c:	009b      	lsls	r3, r3, #2
 8001e4e:	440b      	add	r3, r1
 8001e50:	3354      	adds	r3, #84	; 0x54
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d108      	bne.n	8001e6a <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6818      	ldr	r0, [r3, #0]
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001e62:	461a      	mov	r2, r3
 8001e64:	2101      	movs	r1, #1
 8001e66:	f003 fb07 	bl	8005478 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e6c:	b2db      	uxtb	r3, r3
 8001e6e:	4619      	mov	r1, r3
 8001e70:	6878      	ldr	r0, [r7, #4]
 8001e72:	f004 fd39 	bl	80068e8 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001e76:	693b      	ldr	r3, [r7, #16]
 8001e78:	f003 0308 	and.w	r3, r3, #8
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d008      	beq.n	8001e92 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e82:	015a      	lsls	r2, r3, #5
 8001e84:	69fb      	ldr	r3, [r7, #28]
 8001e86:	4413      	add	r3, r2
 8001e88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001e8c:	461a      	mov	r2, r3
 8001e8e:	2308      	movs	r3, #8
 8001e90:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001e92:	693b      	ldr	r3, [r7, #16]
 8001e94:	f003 0310 	and.w	r3, r3, #16
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d008      	beq.n	8001eae <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e9e:	015a      	lsls	r2, r3, #5
 8001ea0:	69fb      	ldr	r3, [r7, #28]
 8001ea2:	4413      	add	r3, r2
 8001ea4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001ea8:	461a      	mov	r2, r3
 8001eaa:	2310      	movs	r3, #16
 8001eac:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001eae:	693b      	ldr	r3, [r7, #16]
 8001eb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d008      	beq.n	8001eca <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eba:	015a      	lsls	r2, r3, #5
 8001ebc:	69fb      	ldr	r3, [r7, #28]
 8001ebe:	4413      	add	r3, r2
 8001ec0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001ec4:	461a      	mov	r2, r3
 8001ec6:	2340      	movs	r3, #64	; 0x40
 8001ec8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001eca:	693b      	ldr	r3, [r7, #16]
 8001ecc:	f003 0302 	and.w	r3, r3, #2
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d023      	beq.n	8001f1c <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8001ed4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001ed6:	6a38      	ldr	r0, [r7, #32]
 8001ed8:	f002 fb50 	bl	800457c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8001edc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ede:	4613      	mov	r3, r2
 8001ee0:	00db      	lsls	r3, r3, #3
 8001ee2:	4413      	add	r3, r2
 8001ee4:	009b      	lsls	r3, r3, #2
 8001ee6:	3338      	adds	r3, #56	; 0x38
 8001ee8:	687a      	ldr	r2, [r7, #4]
 8001eea:	4413      	add	r3, r2
 8001eec:	3304      	adds	r3, #4
 8001eee:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001ef0:	697b      	ldr	r3, [r7, #20]
 8001ef2:	78db      	ldrb	r3, [r3, #3]
 8001ef4:	2b01      	cmp	r3, #1
 8001ef6:	d108      	bne.n	8001f0a <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8001ef8:	697b      	ldr	r3, [r7, #20]
 8001efa:	2200      	movs	r2, #0
 8001efc:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f00:	b2db      	uxtb	r3, r3
 8001f02:	4619      	mov	r1, r3
 8001f04:	6878      	ldr	r0, [r7, #4]
 8001f06:	f004 fd85 	bl	8006a14 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f0c:	015a      	lsls	r2, r3, #5
 8001f0e:	69fb      	ldr	r3, [r7, #28]
 8001f10:	4413      	add	r3, r2
 8001f12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001f16:	461a      	mov	r2, r3
 8001f18:	2302      	movs	r3, #2
 8001f1a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001f1c:	693b      	ldr	r3, [r7, #16]
 8001f1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d003      	beq.n	8001f2e <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001f26:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001f28:	6878      	ldr	r0, [r7, #4]
 8001f2a:	f000 fc79 	bl	8002820 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f30:	3301      	adds	r3, #1
 8001f32:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001f34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f36:	085b      	lsrs	r3, r3, #1
 8001f38:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001f3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	f47f af2e 	bne.w	8001d9e <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4618      	mov	r0, r3
 8001f48:	f003 f9d2 	bl	80052f0 <USB_ReadInterrupts>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001f52:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001f56:	d122      	bne.n	8001f9e <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001f58:	69fb      	ldr	r3, [r7, #28]
 8001f5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	69fa      	ldr	r2, [r7, #28]
 8001f62:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001f66:	f023 0301 	bic.w	r3, r3, #1
 8001f6a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8001f72:	2b01      	cmp	r3, #1
 8001f74:	d108      	bne.n	8001f88 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2200      	movs	r2, #0
 8001f7a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001f7e:	2100      	movs	r1, #0
 8001f80:	6878      	ldr	r0, [r7, #4]
 8001f82:	f000 fe09 	bl	8002b98 <HAL_PCDEx_LPM_Callback>
 8001f86:	e002      	b.n	8001f8e <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001f88:	6878      	ldr	r0, [r7, #4]
 8001f8a:	f004 fd23 	bl	80069d4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	695a      	ldr	r2, [r3, #20]
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001f9c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	f003 f9a4 	bl	80052f0 <USB_ReadInterrupts>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001fae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001fb2:	d112      	bne.n	8001fda <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001fb4:	69fb      	ldr	r3, [r7, #28]
 8001fb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001fba:	689b      	ldr	r3, [r3, #8]
 8001fbc:	f003 0301 	and.w	r3, r3, #1
 8001fc0:	2b01      	cmp	r3, #1
 8001fc2:	d102      	bne.n	8001fca <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001fc4:	6878      	ldr	r0, [r7, #4]
 8001fc6:	f004 fcdf 	bl	8006988 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	695a      	ldr	r2, [r3, #20]
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001fd8:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4618      	mov	r0, r3
 8001fe0:	f003 f986 	bl	80052f0 <USB_ReadInterrupts>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001fea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001fee:	f040 80b7 	bne.w	8002160 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001ff2:	69fb      	ldr	r3, [r7, #28]
 8001ff4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	69fa      	ldr	r2, [r7, #28]
 8001ffc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002000:	f023 0301 	bic.w	r3, r3, #1
 8002004:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	2110      	movs	r1, #16
 800200c:	4618      	mov	r0, r3
 800200e:	f002 fab5 	bl	800457c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002012:	2300      	movs	r3, #0
 8002014:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002016:	e046      	b.n	80020a6 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002018:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800201a:	015a      	lsls	r2, r3, #5
 800201c:	69fb      	ldr	r3, [r7, #28]
 800201e:	4413      	add	r3, r2
 8002020:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002024:	461a      	mov	r2, r3
 8002026:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800202a:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800202c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800202e:	015a      	lsls	r2, r3, #5
 8002030:	69fb      	ldr	r3, [r7, #28]
 8002032:	4413      	add	r3, r2
 8002034:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800203c:	0151      	lsls	r1, r2, #5
 800203e:	69fa      	ldr	r2, [r7, #28]
 8002040:	440a      	add	r2, r1
 8002042:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002046:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800204a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800204c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800204e:	015a      	lsls	r2, r3, #5
 8002050:	69fb      	ldr	r3, [r7, #28]
 8002052:	4413      	add	r3, r2
 8002054:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002058:	461a      	mov	r2, r3
 800205a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800205e:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002060:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002062:	015a      	lsls	r2, r3, #5
 8002064:	69fb      	ldr	r3, [r7, #28]
 8002066:	4413      	add	r3, r2
 8002068:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002070:	0151      	lsls	r1, r2, #5
 8002072:	69fa      	ldr	r2, [r7, #28]
 8002074:	440a      	add	r2, r1
 8002076:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800207a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800207e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002080:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002082:	015a      	lsls	r2, r3, #5
 8002084:	69fb      	ldr	r3, [r7, #28]
 8002086:	4413      	add	r3, r2
 8002088:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002090:	0151      	lsls	r1, r2, #5
 8002092:	69fa      	ldr	r2, [r7, #28]
 8002094:	440a      	add	r2, r1
 8002096:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800209a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800209e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020a2:	3301      	adds	r3, #1
 80020a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80020ac:	429a      	cmp	r2, r3
 80020ae:	d3b3      	bcc.n	8002018 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80020b0:	69fb      	ldr	r3, [r7, #28]
 80020b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80020b6:	69db      	ldr	r3, [r3, #28]
 80020b8:	69fa      	ldr	r2, [r7, #28]
 80020ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80020be:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80020c2:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d016      	beq.n	80020fa <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80020cc:	69fb      	ldr	r3, [r7, #28]
 80020ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80020d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80020d6:	69fa      	ldr	r2, [r7, #28]
 80020d8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80020dc:	f043 030b 	orr.w	r3, r3, #11
 80020e0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80020e4:	69fb      	ldr	r3, [r7, #28]
 80020e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80020ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020ec:	69fa      	ldr	r2, [r7, #28]
 80020ee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80020f2:	f043 030b 	orr.w	r3, r3, #11
 80020f6:	6453      	str	r3, [r2, #68]	; 0x44
 80020f8:	e015      	b.n	8002126 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80020fa:	69fb      	ldr	r3, [r7, #28]
 80020fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002100:	695b      	ldr	r3, [r3, #20]
 8002102:	69fa      	ldr	r2, [r7, #28]
 8002104:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002108:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800210c:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002110:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002112:	69fb      	ldr	r3, [r7, #28]
 8002114:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002118:	691b      	ldr	r3, [r3, #16]
 800211a:	69fa      	ldr	r2, [r7, #28]
 800211c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002120:	f043 030b 	orr.w	r3, r3, #11
 8002124:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002126:	69fb      	ldr	r3, [r7, #28]
 8002128:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	69fa      	ldr	r2, [r7, #28]
 8002130:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002134:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002138:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6818      	ldr	r0, [r3, #0]
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	691b      	ldr	r3, [r3, #16]
 8002142:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800214a:	461a      	mov	r2, r3
 800214c:	f003 f994 	bl	8005478 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	695a      	ldr	r2, [r3, #20]
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800215e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4618      	mov	r0, r3
 8002166:	f003 f8c3 	bl	80052f0 <USB_ReadInterrupts>
 800216a:	4603      	mov	r3, r0
 800216c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002170:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002174:	d124      	bne.n	80021c0 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4618      	mov	r0, r3
 800217c:	f003 f959 	bl	8005432 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4618      	mov	r0, r3
 8002186:	f002 fa2d 	bl	80045e4 <USB_GetDevSpeed>
 800218a:	4603      	mov	r3, r0
 800218c:	461a      	mov	r2, r3
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681c      	ldr	r4, [r3, #0]
 8002196:	f001 f96f 	bl	8003478 <HAL_RCC_GetHCLKFreq>
 800219a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80021a0:	b2db      	uxtb	r3, r3
 80021a2:	461a      	mov	r2, r3
 80021a4:	4620      	mov	r0, r4
 80021a6:	f002 f947 	bl	8004438 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80021aa:	6878      	ldr	r0, [r7, #4]
 80021ac:	f004 fbc4 	bl	8006938 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	695a      	ldr	r2, [r3, #20]
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80021be:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4618      	mov	r0, r3
 80021c6:	f003 f893 	bl	80052f0 <USB_ReadInterrupts>
 80021ca:	4603      	mov	r3, r0
 80021cc:	f003 0308 	and.w	r3, r3, #8
 80021d0:	2b08      	cmp	r3, #8
 80021d2:	d10a      	bne.n	80021ea <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80021d4:	6878      	ldr	r0, [r7, #4]
 80021d6:	f004 fba1 	bl	800691c <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	695a      	ldr	r2, [r3, #20]
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f002 0208 	and.w	r2, r2, #8
 80021e8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4618      	mov	r0, r3
 80021f0:	f003 f87e 	bl	80052f0 <USB_ReadInterrupts>
 80021f4:	4603      	mov	r3, r0
 80021f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021fa:	2b80      	cmp	r3, #128	; 0x80
 80021fc:	d122      	bne.n	8002244 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80021fe:	6a3b      	ldr	r3, [r7, #32]
 8002200:	699b      	ldr	r3, [r3, #24]
 8002202:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002206:	6a3b      	ldr	r3, [r7, #32]
 8002208:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800220a:	2301      	movs	r3, #1
 800220c:	627b      	str	r3, [r7, #36]	; 0x24
 800220e:	e014      	b.n	800223a <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002210:	6879      	ldr	r1, [r7, #4]
 8002212:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002214:	4613      	mov	r3, r2
 8002216:	00db      	lsls	r3, r3, #3
 8002218:	4413      	add	r3, r2
 800221a:	009b      	lsls	r3, r3, #2
 800221c:	440b      	add	r3, r1
 800221e:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002222:	781b      	ldrb	r3, [r3, #0]
 8002224:	2b01      	cmp	r3, #1
 8002226:	d105      	bne.n	8002234 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800222a:	b2db      	uxtb	r3, r3
 800222c:	4619      	mov	r1, r3
 800222e:	6878      	ldr	r0, [r7, #4]
 8002230:	f000 fac5 	bl	80027be <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002236:	3301      	adds	r3, #1
 8002238:	627b      	str	r3, [r7, #36]	; 0x24
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002240:	429a      	cmp	r2, r3
 8002242:	d3e5      	bcc.n	8002210 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4618      	mov	r0, r3
 800224a:	f003 f851 	bl	80052f0 <USB_ReadInterrupts>
 800224e:	4603      	mov	r3, r0
 8002250:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002254:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002258:	d13b      	bne.n	80022d2 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800225a:	2301      	movs	r3, #1
 800225c:	627b      	str	r3, [r7, #36]	; 0x24
 800225e:	e02b      	b.n	80022b8 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002262:	015a      	lsls	r2, r3, #5
 8002264:	69fb      	ldr	r3, [r7, #28]
 8002266:	4413      	add	r3, r2
 8002268:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002270:	6879      	ldr	r1, [r7, #4]
 8002272:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002274:	4613      	mov	r3, r2
 8002276:	00db      	lsls	r3, r3, #3
 8002278:	4413      	add	r3, r2
 800227a:	009b      	lsls	r3, r3, #2
 800227c:	440b      	add	r3, r1
 800227e:	3340      	adds	r3, #64	; 0x40
 8002280:	781b      	ldrb	r3, [r3, #0]
 8002282:	2b01      	cmp	r3, #1
 8002284:	d115      	bne.n	80022b2 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002286:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002288:	2b00      	cmp	r3, #0
 800228a:	da12      	bge.n	80022b2 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800228c:	6879      	ldr	r1, [r7, #4]
 800228e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002290:	4613      	mov	r3, r2
 8002292:	00db      	lsls	r3, r3, #3
 8002294:	4413      	add	r3, r2
 8002296:	009b      	lsls	r3, r3, #2
 8002298:	440b      	add	r3, r1
 800229a:	333f      	adds	r3, #63	; 0x3f
 800229c:	2201      	movs	r2, #1
 800229e:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80022a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022a2:	b2db      	uxtb	r3, r3
 80022a4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80022a8:	b2db      	uxtb	r3, r3
 80022aa:	4619      	mov	r1, r3
 80022ac:	6878      	ldr	r0, [r7, #4]
 80022ae:	f000 fa86 	bl	80027be <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80022b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022b4:	3301      	adds	r3, #1
 80022b6:	627b      	str	r3, [r7, #36]	; 0x24
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022be:	429a      	cmp	r2, r3
 80022c0:	d3ce      	bcc.n	8002260 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	695a      	ldr	r2, [r3, #20]
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80022d0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4618      	mov	r0, r3
 80022d8:	f003 f80a 	bl	80052f0 <USB_ReadInterrupts>
 80022dc:	4603      	mov	r3, r0
 80022de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022e2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80022e6:	d155      	bne.n	8002394 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80022e8:	2301      	movs	r3, #1
 80022ea:	627b      	str	r3, [r7, #36]	; 0x24
 80022ec:	e045      	b.n	800237a <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80022ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022f0:	015a      	lsls	r2, r3, #5
 80022f2:	69fb      	ldr	r3, [r7, #28]
 80022f4:	4413      	add	r3, r2
 80022f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80022fe:	6879      	ldr	r1, [r7, #4]
 8002300:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002302:	4613      	mov	r3, r2
 8002304:	00db      	lsls	r3, r3, #3
 8002306:	4413      	add	r3, r2
 8002308:	009b      	lsls	r3, r3, #2
 800230a:	440b      	add	r3, r1
 800230c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002310:	781b      	ldrb	r3, [r3, #0]
 8002312:	2b01      	cmp	r3, #1
 8002314:	d12e      	bne.n	8002374 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002316:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002318:	2b00      	cmp	r3, #0
 800231a:	da2b      	bge.n	8002374 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800231c:	69bb      	ldr	r3, [r7, #24]
 800231e:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8002328:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800232c:	429a      	cmp	r2, r3
 800232e:	d121      	bne.n	8002374 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002330:	6879      	ldr	r1, [r7, #4]
 8002332:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002334:	4613      	mov	r3, r2
 8002336:	00db      	lsls	r3, r3, #3
 8002338:	4413      	add	r3, r2
 800233a:	009b      	lsls	r3, r3, #2
 800233c:	440b      	add	r3, r1
 800233e:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002342:	2201      	movs	r2, #1
 8002344:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002346:	6a3b      	ldr	r3, [r7, #32]
 8002348:	699b      	ldr	r3, [r3, #24]
 800234a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800234e:	6a3b      	ldr	r3, [r7, #32]
 8002350:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002352:	6a3b      	ldr	r3, [r7, #32]
 8002354:	695b      	ldr	r3, [r3, #20]
 8002356:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800235a:	2b00      	cmp	r3, #0
 800235c:	d10a      	bne.n	8002374 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800235e:	69fb      	ldr	r3, [r7, #28]
 8002360:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	69fa      	ldr	r2, [r7, #28]
 8002368:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800236c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002370:	6053      	str	r3, [r2, #4]
            break;
 8002372:	e007      	b.n	8002384 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002376:	3301      	adds	r3, #1
 8002378:	627b      	str	r3, [r7, #36]	; 0x24
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002380:	429a      	cmp	r2, r3
 8002382:	d3b4      	bcc.n	80022ee <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	695a      	ldr	r2, [r3, #20]
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002392:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4618      	mov	r0, r3
 800239a:	f002 ffa9 	bl	80052f0 <USB_ReadInterrupts>
 800239e:	4603      	mov	r3, r0
 80023a0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80023a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023a8:	d10a      	bne.n	80023c0 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80023aa:	6878      	ldr	r0, [r7, #4]
 80023ac:	f004 fb44 	bl	8006a38 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	695a      	ldr	r2, [r3, #20]
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80023be:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4618      	mov	r0, r3
 80023c6:	f002 ff93 	bl	80052f0 <USB_ReadInterrupts>
 80023ca:	4603      	mov	r3, r0
 80023cc:	f003 0304 	and.w	r3, r3, #4
 80023d0:	2b04      	cmp	r3, #4
 80023d2:	d115      	bne.n	8002400 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80023dc:	69bb      	ldr	r3, [r7, #24]
 80023de:	f003 0304 	and.w	r3, r3, #4
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d002      	beq.n	80023ec <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80023e6:	6878      	ldr	r0, [r7, #4]
 80023e8:	f004 fb34 	bl	8006a54 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	6859      	ldr	r1, [r3, #4]
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	69ba      	ldr	r2, [r7, #24]
 80023f8:	430a      	orrs	r2, r1
 80023fa:	605a      	str	r2, [r3, #4]
 80023fc:	e000      	b.n	8002400 <HAL_PCD_IRQHandler+0x938>
      return;
 80023fe:	bf00      	nop
    }
  }
}
 8002400:	3734      	adds	r7, #52	; 0x34
 8002402:	46bd      	mov	sp, r7
 8002404:	bd90      	pop	{r4, r7, pc}

08002406 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002406:	b580      	push	{r7, lr}
 8002408:	b082      	sub	sp, #8
 800240a:	af00      	add	r7, sp, #0
 800240c:	6078      	str	r0, [r7, #4]
 800240e:	460b      	mov	r3, r1
 8002410:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002418:	2b01      	cmp	r3, #1
 800241a:	d101      	bne.n	8002420 <HAL_PCD_SetAddress+0x1a>
 800241c:	2302      	movs	r3, #2
 800241e:	e013      	b.n	8002448 <HAL_PCD_SetAddress+0x42>
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2201      	movs	r2, #1
 8002424:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	78fa      	ldrb	r2, [r7, #3]
 800242c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	78fa      	ldrb	r2, [r7, #3]
 8002436:	4611      	mov	r1, r2
 8002438:	4618      	mov	r0, r3
 800243a:	f002 ff33 	bl	80052a4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	2200      	movs	r2, #0
 8002442:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002446:	2300      	movs	r3, #0
}
 8002448:	4618      	mov	r0, r3
 800244a:	3708      	adds	r7, #8
 800244c:	46bd      	mov	sp, r7
 800244e:	bd80      	pop	{r7, pc}

08002450 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b084      	sub	sp, #16
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
 8002458:	4608      	mov	r0, r1
 800245a:	4611      	mov	r1, r2
 800245c:	461a      	mov	r2, r3
 800245e:	4603      	mov	r3, r0
 8002460:	70fb      	strb	r3, [r7, #3]
 8002462:	460b      	mov	r3, r1
 8002464:	803b      	strh	r3, [r7, #0]
 8002466:	4613      	mov	r3, r2
 8002468:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800246a:	2300      	movs	r3, #0
 800246c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800246e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002472:	2b00      	cmp	r3, #0
 8002474:	da0f      	bge.n	8002496 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002476:	78fb      	ldrb	r3, [r7, #3]
 8002478:	f003 020f 	and.w	r2, r3, #15
 800247c:	4613      	mov	r3, r2
 800247e:	00db      	lsls	r3, r3, #3
 8002480:	4413      	add	r3, r2
 8002482:	009b      	lsls	r3, r3, #2
 8002484:	3338      	adds	r3, #56	; 0x38
 8002486:	687a      	ldr	r2, [r7, #4]
 8002488:	4413      	add	r3, r2
 800248a:	3304      	adds	r3, #4
 800248c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	2201      	movs	r2, #1
 8002492:	705a      	strb	r2, [r3, #1]
 8002494:	e00f      	b.n	80024b6 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002496:	78fb      	ldrb	r3, [r7, #3]
 8002498:	f003 020f 	and.w	r2, r3, #15
 800249c:	4613      	mov	r3, r2
 800249e:	00db      	lsls	r3, r3, #3
 80024a0:	4413      	add	r3, r2
 80024a2:	009b      	lsls	r3, r3, #2
 80024a4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80024a8:	687a      	ldr	r2, [r7, #4]
 80024aa:	4413      	add	r3, r2
 80024ac:	3304      	adds	r3, #4
 80024ae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	2200      	movs	r2, #0
 80024b4:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80024b6:	78fb      	ldrb	r3, [r7, #3]
 80024b8:	f003 030f 	and.w	r3, r3, #15
 80024bc:	b2da      	uxtb	r2, r3
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80024c2:	883a      	ldrh	r2, [r7, #0]
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	78ba      	ldrb	r2, [r7, #2]
 80024cc:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	785b      	ldrb	r3, [r3, #1]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d004      	beq.n	80024e0 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	781b      	ldrb	r3, [r3, #0]
 80024da:	b29a      	uxth	r2, r3
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80024e0:	78bb      	ldrb	r3, [r7, #2]
 80024e2:	2b02      	cmp	r3, #2
 80024e4:	d102      	bne.n	80024ec <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	2200      	movs	r2, #0
 80024ea:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80024f2:	2b01      	cmp	r3, #1
 80024f4:	d101      	bne.n	80024fa <HAL_PCD_EP_Open+0xaa>
 80024f6:	2302      	movs	r3, #2
 80024f8:	e00e      	b.n	8002518 <HAL_PCD_EP_Open+0xc8>
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2201      	movs	r2, #1
 80024fe:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	68f9      	ldr	r1, [r7, #12]
 8002508:	4618      	mov	r0, r3
 800250a:	f002 f890 	bl	800462e <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	2200      	movs	r2, #0
 8002512:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8002516:	7afb      	ldrb	r3, [r7, #11]
}
 8002518:	4618      	mov	r0, r3
 800251a:	3710      	adds	r7, #16
 800251c:	46bd      	mov	sp, r7
 800251e:	bd80      	pop	{r7, pc}

08002520 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b086      	sub	sp, #24
 8002524:	af00      	add	r7, sp, #0
 8002526:	60f8      	str	r0, [r7, #12]
 8002528:	607a      	str	r2, [r7, #4]
 800252a:	603b      	str	r3, [r7, #0]
 800252c:	460b      	mov	r3, r1
 800252e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002530:	7afb      	ldrb	r3, [r7, #11]
 8002532:	f003 020f 	and.w	r2, r3, #15
 8002536:	4613      	mov	r3, r2
 8002538:	00db      	lsls	r3, r3, #3
 800253a:	4413      	add	r3, r2
 800253c:	009b      	lsls	r3, r3, #2
 800253e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002542:	68fa      	ldr	r2, [r7, #12]
 8002544:	4413      	add	r3, r2
 8002546:	3304      	adds	r3, #4
 8002548:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800254a:	697b      	ldr	r3, [r7, #20]
 800254c:	687a      	ldr	r2, [r7, #4]
 800254e:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002550:	697b      	ldr	r3, [r7, #20]
 8002552:	683a      	ldr	r2, [r7, #0]
 8002554:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002556:	697b      	ldr	r3, [r7, #20]
 8002558:	2200      	movs	r2, #0
 800255a:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 800255c:	697b      	ldr	r3, [r7, #20]
 800255e:	2200      	movs	r2, #0
 8002560:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002562:	7afb      	ldrb	r3, [r7, #11]
 8002564:	f003 030f 	and.w	r3, r3, #15
 8002568:	b2da      	uxtb	r2, r3
 800256a:	697b      	ldr	r3, [r7, #20]
 800256c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	691b      	ldr	r3, [r3, #16]
 8002572:	2b01      	cmp	r3, #1
 8002574:	d102      	bne.n	800257c <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002576:	687a      	ldr	r2, [r7, #4]
 8002578:	697b      	ldr	r3, [r7, #20]
 800257a:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800257c:	7afb      	ldrb	r3, [r7, #11]
 800257e:	f003 030f 	and.w	r3, r3, #15
 8002582:	2b00      	cmp	r3, #0
 8002584:	d109      	bne.n	800259a <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	6818      	ldr	r0, [r3, #0]
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	691b      	ldr	r3, [r3, #16]
 800258e:	b2db      	uxtb	r3, r3
 8002590:	461a      	mov	r2, r3
 8002592:	6979      	ldr	r1, [r7, #20]
 8002594:	f002 fb1a 	bl	8004bcc <USB_EP0StartXfer>
 8002598:	e008      	b.n	80025ac <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	6818      	ldr	r0, [r3, #0]
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	691b      	ldr	r3, [r3, #16]
 80025a2:	b2db      	uxtb	r3, r3
 80025a4:	461a      	mov	r2, r3
 80025a6:	6979      	ldr	r1, [r7, #20]
 80025a8:	f002 f8c8 	bl	800473c <USB_EPStartXfer>
  }

  return HAL_OK;
 80025ac:	2300      	movs	r3, #0
}
 80025ae:	4618      	mov	r0, r3
 80025b0:	3718      	adds	r7, #24
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd80      	pop	{r7, pc}

080025b6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80025b6:	b580      	push	{r7, lr}
 80025b8:	b086      	sub	sp, #24
 80025ba:	af00      	add	r7, sp, #0
 80025bc:	60f8      	str	r0, [r7, #12]
 80025be:	607a      	str	r2, [r7, #4]
 80025c0:	603b      	str	r3, [r7, #0]
 80025c2:	460b      	mov	r3, r1
 80025c4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80025c6:	7afb      	ldrb	r3, [r7, #11]
 80025c8:	f003 020f 	and.w	r2, r3, #15
 80025cc:	4613      	mov	r3, r2
 80025ce:	00db      	lsls	r3, r3, #3
 80025d0:	4413      	add	r3, r2
 80025d2:	009b      	lsls	r3, r3, #2
 80025d4:	3338      	adds	r3, #56	; 0x38
 80025d6:	68fa      	ldr	r2, [r7, #12]
 80025d8:	4413      	add	r3, r2
 80025da:	3304      	adds	r3, #4
 80025dc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80025de:	697b      	ldr	r3, [r7, #20]
 80025e0:	687a      	ldr	r2, [r7, #4]
 80025e2:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80025e4:	697b      	ldr	r3, [r7, #20]
 80025e6:	683a      	ldr	r2, [r7, #0]
 80025e8:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80025ea:	697b      	ldr	r3, [r7, #20]
 80025ec:	2200      	movs	r2, #0
 80025ee:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 80025f0:	697b      	ldr	r3, [r7, #20]
 80025f2:	2201      	movs	r2, #1
 80025f4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80025f6:	7afb      	ldrb	r3, [r7, #11]
 80025f8:	f003 030f 	and.w	r3, r3, #15
 80025fc:	b2da      	uxtb	r2, r3
 80025fe:	697b      	ldr	r3, [r7, #20]
 8002600:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	691b      	ldr	r3, [r3, #16]
 8002606:	2b01      	cmp	r3, #1
 8002608:	d102      	bne.n	8002610 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800260a:	687a      	ldr	r2, [r7, #4]
 800260c:	697b      	ldr	r3, [r7, #20]
 800260e:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002610:	7afb      	ldrb	r3, [r7, #11]
 8002612:	f003 030f 	and.w	r3, r3, #15
 8002616:	2b00      	cmp	r3, #0
 8002618:	d109      	bne.n	800262e <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	6818      	ldr	r0, [r3, #0]
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	691b      	ldr	r3, [r3, #16]
 8002622:	b2db      	uxtb	r3, r3
 8002624:	461a      	mov	r2, r3
 8002626:	6979      	ldr	r1, [r7, #20]
 8002628:	f002 fad0 	bl	8004bcc <USB_EP0StartXfer>
 800262c:	e008      	b.n	8002640 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	6818      	ldr	r0, [r3, #0]
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	691b      	ldr	r3, [r3, #16]
 8002636:	b2db      	uxtb	r3, r3
 8002638:	461a      	mov	r2, r3
 800263a:	6979      	ldr	r1, [r7, #20]
 800263c:	f002 f87e 	bl	800473c <USB_EPStartXfer>
  }

  return HAL_OK;
 8002640:	2300      	movs	r3, #0
}
 8002642:	4618      	mov	r0, r3
 8002644:	3718      	adds	r7, #24
 8002646:	46bd      	mov	sp, r7
 8002648:	bd80      	pop	{r7, pc}

0800264a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800264a:	b580      	push	{r7, lr}
 800264c:	b084      	sub	sp, #16
 800264e:	af00      	add	r7, sp, #0
 8002650:	6078      	str	r0, [r7, #4]
 8002652:	460b      	mov	r3, r1
 8002654:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002656:	78fb      	ldrb	r3, [r7, #3]
 8002658:	f003 020f 	and.w	r2, r3, #15
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	429a      	cmp	r2, r3
 8002662:	d901      	bls.n	8002668 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002664:	2301      	movs	r3, #1
 8002666:	e050      	b.n	800270a <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002668:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800266c:	2b00      	cmp	r3, #0
 800266e:	da0f      	bge.n	8002690 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002670:	78fb      	ldrb	r3, [r7, #3]
 8002672:	f003 020f 	and.w	r2, r3, #15
 8002676:	4613      	mov	r3, r2
 8002678:	00db      	lsls	r3, r3, #3
 800267a:	4413      	add	r3, r2
 800267c:	009b      	lsls	r3, r3, #2
 800267e:	3338      	adds	r3, #56	; 0x38
 8002680:	687a      	ldr	r2, [r7, #4]
 8002682:	4413      	add	r3, r2
 8002684:	3304      	adds	r3, #4
 8002686:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	2201      	movs	r2, #1
 800268c:	705a      	strb	r2, [r3, #1]
 800268e:	e00d      	b.n	80026ac <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002690:	78fa      	ldrb	r2, [r7, #3]
 8002692:	4613      	mov	r3, r2
 8002694:	00db      	lsls	r3, r3, #3
 8002696:	4413      	add	r3, r2
 8002698:	009b      	lsls	r3, r3, #2
 800269a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800269e:	687a      	ldr	r2, [r7, #4]
 80026a0:	4413      	add	r3, r2
 80026a2:	3304      	adds	r3, #4
 80026a4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	2200      	movs	r2, #0
 80026aa:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	2201      	movs	r2, #1
 80026b0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80026b2:	78fb      	ldrb	r3, [r7, #3]
 80026b4:	f003 030f 	and.w	r3, r3, #15
 80026b8:	b2da      	uxtb	r2, r3
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80026c4:	2b01      	cmp	r3, #1
 80026c6:	d101      	bne.n	80026cc <HAL_PCD_EP_SetStall+0x82>
 80026c8:	2302      	movs	r3, #2
 80026ca:	e01e      	b.n	800270a <HAL_PCD_EP_SetStall+0xc0>
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2201      	movs	r2, #1
 80026d0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	68f9      	ldr	r1, [r7, #12]
 80026da:	4618      	mov	r0, r3
 80026dc:	f002 fd0e 	bl	80050fc <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80026e0:	78fb      	ldrb	r3, [r7, #3]
 80026e2:	f003 030f 	and.w	r3, r3, #15
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d10a      	bne.n	8002700 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6818      	ldr	r0, [r3, #0]
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	691b      	ldr	r3, [r3, #16]
 80026f2:	b2d9      	uxtb	r1, r3
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80026fa:	461a      	mov	r2, r3
 80026fc:	f002 febc 	bl	8005478 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2200      	movs	r2, #0
 8002704:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002708:	2300      	movs	r3, #0
}
 800270a:	4618      	mov	r0, r3
 800270c:	3710      	adds	r7, #16
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}

08002712 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002712:	b580      	push	{r7, lr}
 8002714:	b084      	sub	sp, #16
 8002716:	af00      	add	r7, sp, #0
 8002718:	6078      	str	r0, [r7, #4]
 800271a:	460b      	mov	r3, r1
 800271c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800271e:	78fb      	ldrb	r3, [r7, #3]
 8002720:	f003 020f 	and.w	r2, r3, #15
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	429a      	cmp	r2, r3
 800272a:	d901      	bls.n	8002730 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800272c:	2301      	movs	r3, #1
 800272e:	e042      	b.n	80027b6 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002730:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002734:	2b00      	cmp	r3, #0
 8002736:	da0f      	bge.n	8002758 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002738:	78fb      	ldrb	r3, [r7, #3]
 800273a:	f003 020f 	and.w	r2, r3, #15
 800273e:	4613      	mov	r3, r2
 8002740:	00db      	lsls	r3, r3, #3
 8002742:	4413      	add	r3, r2
 8002744:	009b      	lsls	r3, r3, #2
 8002746:	3338      	adds	r3, #56	; 0x38
 8002748:	687a      	ldr	r2, [r7, #4]
 800274a:	4413      	add	r3, r2
 800274c:	3304      	adds	r3, #4
 800274e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	2201      	movs	r2, #1
 8002754:	705a      	strb	r2, [r3, #1]
 8002756:	e00f      	b.n	8002778 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002758:	78fb      	ldrb	r3, [r7, #3]
 800275a:	f003 020f 	and.w	r2, r3, #15
 800275e:	4613      	mov	r3, r2
 8002760:	00db      	lsls	r3, r3, #3
 8002762:	4413      	add	r3, r2
 8002764:	009b      	lsls	r3, r3, #2
 8002766:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800276a:	687a      	ldr	r2, [r7, #4]
 800276c:	4413      	add	r3, r2
 800276e:	3304      	adds	r3, #4
 8002770:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	2200      	movs	r2, #0
 8002776:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	2200      	movs	r2, #0
 800277c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800277e:	78fb      	ldrb	r3, [r7, #3]
 8002780:	f003 030f 	and.w	r3, r3, #15
 8002784:	b2da      	uxtb	r2, r3
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002790:	2b01      	cmp	r3, #1
 8002792:	d101      	bne.n	8002798 <HAL_PCD_EP_ClrStall+0x86>
 8002794:	2302      	movs	r3, #2
 8002796:	e00e      	b.n	80027b6 <HAL_PCD_EP_ClrStall+0xa4>
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2201      	movs	r2, #1
 800279c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	68f9      	ldr	r1, [r7, #12]
 80027a6:	4618      	mov	r0, r3
 80027a8:	f002 fd16 	bl	80051d8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2200      	movs	r2, #0
 80027b0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80027b4:	2300      	movs	r3, #0
}
 80027b6:	4618      	mov	r0, r3
 80027b8:	3710      	adds	r7, #16
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bd80      	pop	{r7, pc}

080027be <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80027be:	b580      	push	{r7, lr}
 80027c0:	b084      	sub	sp, #16
 80027c2:	af00      	add	r7, sp, #0
 80027c4:	6078      	str	r0, [r7, #4]
 80027c6:	460b      	mov	r3, r1
 80027c8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80027ca:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	da0c      	bge.n	80027ec <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80027d2:	78fb      	ldrb	r3, [r7, #3]
 80027d4:	f003 020f 	and.w	r2, r3, #15
 80027d8:	4613      	mov	r3, r2
 80027da:	00db      	lsls	r3, r3, #3
 80027dc:	4413      	add	r3, r2
 80027de:	009b      	lsls	r3, r3, #2
 80027e0:	3338      	adds	r3, #56	; 0x38
 80027e2:	687a      	ldr	r2, [r7, #4]
 80027e4:	4413      	add	r3, r2
 80027e6:	3304      	adds	r3, #4
 80027e8:	60fb      	str	r3, [r7, #12]
 80027ea:	e00c      	b.n	8002806 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80027ec:	78fb      	ldrb	r3, [r7, #3]
 80027ee:	f003 020f 	and.w	r2, r3, #15
 80027f2:	4613      	mov	r3, r2
 80027f4:	00db      	lsls	r3, r3, #3
 80027f6:	4413      	add	r3, r2
 80027f8:	009b      	lsls	r3, r3, #2
 80027fa:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80027fe:	687a      	ldr	r2, [r7, #4]
 8002800:	4413      	add	r3, r2
 8002802:	3304      	adds	r3, #4
 8002804:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	68f9      	ldr	r1, [r7, #12]
 800280c:	4618      	mov	r0, r3
 800280e:	f002 fb35 	bl	8004e7c <USB_EPStopXfer>
 8002812:	4603      	mov	r3, r0
 8002814:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002816:	7afb      	ldrb	r3, [r7, #11]
}
 8002818:	4618      	mov	r0, r3
 800281a:	3710      	adds	r7, #16
 800281c:	46bd      	mov	sp, r7
 800281e:	bd80      	pop	{r7, pc}

08002820 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b08a      	sub	sp, #40	; 0x28
 8002824:	af02      	add	r7, sp, #8
 8002826:	6078      	str	r0, [r7, #4]
 8002828:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002830:	697b      	ldr	r3, [r7, #20]
 8002832:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002834:	683a      	ldr	r2, [r7, #0]
 8002836:	4613      	mov	r3, r2
 8002838:	00db      	lsls	r3, r3, #3
 800283a:	4413      	add	r3, r2
 800283c:	009b      	lsls	r3, r3, #2
 800283e:	3338      	adds	r3, #56	; 0x38
 8002840:	687a      	ldr	r2, [r7, #4]
 8002842:	4413      	add	r3, r2
 8002844:	3304      	adds	r3, #4
 8002846:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	6a1a      	ldr	r2, [r3, #32]
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	699b      	ldr	r3, [r3, #24]
 8002850:	429a      	cmp	r2, r3
 8002852:	d901      	bls.n	8002858 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002854:	2301      	movs	r3, #1
 8002856:	e06c      	b.n	8002932 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	699a      	ldr	r2, [r3, #24]
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	6a1b      	ldr	r3, [r3, #32]
 8002860:	1ad3      	subs	r3, r2, r3
 8002862:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	68db      	ldr	r3, [r3, #12]
 8002868:	69fa      	ldr	r2, [r7, #28]
 800286a:	429a      	cmp	r2, r3
 800286c:	d902      	bls.n	8002874 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	68db      	ldr	r3, [r3, #12]
 8002872:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002874:	69fb      	ldr	r3, [r7, #28]
 8002876:	3303      	adds	r3, #3
 8002878:	089b      	lsrs	r3, r3, #2
 800287a:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800287c:	e02b      	b.n	80028d6 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	699a      	ldr	r2, [r3, #24]
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	6a1b      	ldr	r3, [r3, #32]
 8002886:	1ad3      	subs	r3, r2, r3
 8002888:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	68db      	ldr	r3, [r3, #12]
 800288e:	69fa      	ldr	r2, [r7, #28]
 8002890:	429a      	cmp	r2, r3
 8002892:	d902      	bls.n	800289a <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	68db      	ldr	r3, [r3, #12]
 8002898:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800289a:	69fb      	ldr	r3, [r7, #28]
 800289c:	3303      	adds	r3, #3
 800289e:	089b      	lsrs	r3, r3, #2
 80028a0:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	6919      	ldr	r1, [r3, #16]
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	b2da      	uxtb	r2, r3
 80028aa:	69fb      	ldr	r3, [r7, #28]
 80028ac:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80028b2:	b2db      	uxtb	r3, r3
 80028b4:	9300      	str	r3, [sp, #0]
 80028b6:	4603      	mov	r3, r0
 80028b8:	6978      	ldr	r0, [r7, #20]
 80028ba:	f002 fb89 	bl	8004fd0 <USB_WritePacket>

    ep->xfer_buff  += len;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	691a      	ldr	r2, [r3, #16]
 80028c2:	69fb      	ldr	r3, [r7, #28]
 80028c4:	441a      	add	r2, r3
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	6a1a      	ldr	r2, [r3, #32]
 80028ce:	69fb      	ldr	r3, [r7, #28]
 80028d0:	441a      	add	r2, r3
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	015a      	lsls	r2, r3, #5
 80028da:	693b      	ldr	r3, [r7, #16]
 80028dc:	4413      	add	r3, r2
 80028de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80028e2:	699b      	ldr	r3, [r3, #24]
 80028e4:	b29b      	uxth	r3, r3
 80028e6:	69ba      	ldr	r2, [r7, #24]
 80028e8:	429a      	cmp	r2, r3
 80028ea:	d809      	bhi.n	8002900 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	6a1a      	ldr	r2, [r3, #32]
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80028f4:	429a      	cmp	r2, r3
 80028f6:	d203      	bcs.n	8002900 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	699b      	ldr	r3, [r3, #24]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d1be      	bne.n	800287e <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	699a      	ldr	r2, [r3, #24]
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	6a1b      	ldr	r3, [r3, #32]
 8002908:	429a      	cmp	r2, r3
 800290a:	d811      	bhi.n	8002930 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	f003 030f 	and.w	r3, r3, #15
 8002912:	2201      	movs	r2, #1
 8002914:	fa02 f303 	lsl.w	r3, r2, r3
 8002918:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800291a:	693b      	ldr	r3, [r7, #16]
 800291c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002920:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002922:	68bb      	ldr	r3, [r7, #8]
 8002924:	43db      	mvns	r3, r3
 8002926:	6939      	ldr	r1, [r7, #16]
 8002928:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800292c:	4013      	ands	r3, r2
 800292e:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002930:	2300      	movs	r3, #0
}
 8002932:	4618      	mov	r0, r3
 8002934:	3720      	adds	r7, #32
 8002936:	46bd      	mov	sp, r7
 8002938:	bd80      	pop	{r7, pc}
	...

0800293c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b088      	sub	sp, #32
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
 8002944:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800294c:	69fb      	ldr	r3, [r7, #28]
 800294e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002950:	69fb      	ldr	r3, [r7, #28]
 8002952:	333c      	adds	r3, #60	; 0x3c
 8002954:	3304      	adds	r3, #4
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	015a      	lsls	r2, r3, #5
 800295e:	69bb      	ldr	r3, [r7, #24]
 8002960:	4413      	add	r3, r2
 8002962:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002966:	689b      	ldr	r3, [r3, #8]
 8002968:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	691b      	ldr	r3, [r3, #16]
 800296e:	2b01      	cmp	r3, #1
 8002970:	d17b      	bne.n	8002a6a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002972:	693b      	ldr	r3, [r7, #16]
 8002974:	f003 0308 	and.w	r3, r3, #8
 8002978:	2b00      	cmp	r3, #0
 800297a:	d015      	beq.n	80029a8 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800297c:	697b      	ldr	r3, [r7, #20]
 800297e:	4a61      	ldr	r2, [pc, #388]	; (8002b04 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002980:	4293      	cmp	r3, r2
 8002982:	f240 80b9 	bls.w	8002af8 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002986:	693b      	ldr	r3, [r7, #16]
 8002988:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800298c:	2b00      	cmp	r3, #0
 800298e:	f000 80b3 	beq.w	8002af8 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	015a      	lsls	r2, r3, #5
 8002996:	69bb      	ldr	r3, [r7, #24]
 8002998:	4413      	add	r3, r2
 800299a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800299e:	461a      	mov	r2, r3
 80029a0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80029a4:	6093      	str	r3, [r2, #8]
 80029a6:	e0a7      	b.n	8002af8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80029a8:	693b      	ldr	r3, [r7, #16]
 80029aa:	f003 0320 	and.w	r3, r3, #32
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d009      	beq.n	80029c6 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	015a      	lsls	r2, r3, #5
 80029b6:	69bb      	ldr	r3, [r7, #24]
 80029b8:	4413      	add	r3, r2
 80029ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80029be:	461a      	mov	r2, r3
 80029c0:	2320      	movs	r3, #32
 80029c2:	6093      	str	r3, [r2, #8]
 80029c4:	e098      	b.n	8002af8 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80029c6:	693b      	ldr	r3, [r7, #16]
 80029c8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	f040 8093 	bne.w	8002af8 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80029d2:	697b      	ldr	r3, [r7, #20]
 80029d4:	4a4b      	ldr	r2, [pc, #300]	; (8002b04 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d90f      	bls.n	80029fa <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80029da:	693b      	ldr	r3, [r7, #16]
 80029dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d00a      	beq.n	80029fa <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	015a      	lsls	r2, r3, #5
 80029e8:	69bb      	ldr	r3, [r7, #24]
 80029ea:	4413      	add	r3, r2
 80029ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80029f0:	461a      	mov	r2, r3
 80029f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80029f6:	6093      	str	r3, [r2, #8]
 80029f8:	e07e      	b.n	8002af8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80029fa:	683a      	ldr	r2, [r7, #0]
 80029fc:	4613      	mov	r3, r2
 80029fe:	00db      	lsls	r3, r3, #3
 8002a00:	4413      	add	r3, r2
 8002a02:	009b      	lsls	r3, r3, #2
 8002a04:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002a08:	687a      	ldr	r2, [r7, #4]
 8002a0a:	4413      	add	r3, r2
 8002a0c:	3304      	adds	r3, #4
 8002a0e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	69da      	ldr	r2, [r3, #28]
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	0159      	lsls	r1, r3, #5
 8002a18:	69bb      	ldr	r3, [r7, #24]
 8002a1a:	440b      	add	r3, r1
 8002a1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a20:	691b      	ldr	r3, [r3, #16]
 8002a22:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a26:	1ad2      	subs	r2, r2, r3
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d114      	bne.n	8002a5c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	699b      	ldr	r3, [r3, #24]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d109      	bne.n	8002a4e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6818      	ldr	r0, [r3, #0]
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002a44:	461a      	mov	r2, r3
 8002a46:	2101      	movs	r1, #1
 8002a48:	f002 fd16 	bl	8005478 <USB_EP0_OutStart>
 8002a4c:	e006      	b.n	8002a5c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	691a      	ldr	r2, [r3, #16]
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	6a1b      	ldr	r3, [r3, #32]
 8002a56:	441a      	add	r2, r3
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	b2db      	uxtb	r3, r3
 8002a60:	4619      	mov	r1, r3
 8002a62:	6878      	ldr	r0, [r7, #4]
 8002a64:	f003 ff25 	bl	80068b2 <HAL_PCD_DataOutStageCallback>
 8002a68:	e046      	b.n	8002af8 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002a6a:	697b      	ldr	r3, [r7, #20]
 8002a6c:	4a26      	ldr	r2, [pc, #152]	; (8002b08 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d124      	bne.n	8002abc <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002a72:	693b      	ldr	r3, [r7, #16]
 8002a74:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d00a      	beq.n	8002a92 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	015a      	lsls	r2, r3, #5
 8002a80:	69bb      	ldr	r3, [r7, #24]
 8002a82:	4413      	add	r3, r2
 8002a84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a88:	461a      	mov	r2, r3
 8002a8a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002a8e:	6093      	str	r3, [r2, #8]
 8002a90:	e032      	b.n	8002af8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002a92:	693b      	ldr	r3, [r7, #16]
 8002a94:	f003 0320 	and.w	r3, r3, #32
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d008      	beq.n	8002aae <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	015a      	lsls	r2, r3, #5
 8002aa0:	69bb      	ldr	r3, [r7, #24]
 8002aa2:	4413      	add	r3, r2
 8002aa4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002aa8:	461a      	mov	r2, r3
 8002aaa:	2320      	movs	r3, #32
 8002aac:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	b2db      	uxtb	r3, r3
 8002ab2:	4619      	mov	r1, r3
 8002ab4:	6878      	ldr	r0, [r7, #4]
 8002ab6:	f003 fefc 	bl	80068b2 <HAL_PCD_DataOutStageCallback>
 8002aba:	e01d      	b.n	8002af8 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d114      	bne.n	8002aec <PCD_EP_OutXfrComplete_int+0x1b0>
 8002ac2:	6879      	ldr	r1, [r7, #4]
 8002ac4:	683a      	ldr	r2, [r7, #0]
 8002ac6:	4613      	mov	r3, r2
 8002ac8:	00db      	lsls	r3, r3, #3
 8002aca:	4413      	add	r3, r2
 8002acc:	009b      	lsls	r3, r3, #2
 8002ace:	440b      	add	r3, r1
 8002ad0:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d108      	bne.n	8002aec <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6818      	ldr	r0, [r3, #0]
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002ae4:	461a      	mov	r2, r3
 8002ae6:	2100      	movs	r1, #0
 8002ae8:	f002 fcc6 	bl	8005478 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	b2db      	uxtb	r3, r3
 8002af0:	4619      	mov	r1, r3
 8002af2:	6878      	ldr	r0, [r7, #4]
 8002af4:	f003 fedd 	bl	80068b2 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002af8:	2300      	movs	r3, #0
}
 8002afa:	4618      	mov	r0, r3
 8002afc:	3720      	adds	r7, #32
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bd80      	pop	{r7, pc}
 8002b02:	bf00      	nop
 8002b04:	4f54300a 	.word	0x4f54300a
 8002b08:	4f54310a 	.word	0x4f54310a

08002b0c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b086      	sub	sp, #24
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
 8002b14:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002b1c:	697b      	ldr	r3, [r7, #20]
 8002b1e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002b20:	697b      	ldr	r3, [r7, #20]
 8002b22:	333c      	adds	r3, #60	; 0x3c
 8002b24:	3304      	adds	r3, #4
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	015a      	lsls	r2, r3, #5
 8002b2e:	693b      	ldr	r3, [r7, #16]
 8002b30:	4413      	add	r3, r2
 8002b32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b36:	689b      	ldr	r3, [r3, #8]
 8002b38:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	4a15      	ldr	r2, [pc, #84]	; (8002b94 <PCD_EP_OutSetupPacket_int+0x88>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d90e      	bls.n	8002b60 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002b42:	68bb      	ldr	r3, [r7, #8]
 8002b44:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d009      	beq.n	8002b60 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	015a      	lsls	r2, r3, #5
 8002b50:	693b      	ldr	r3, [r7, #16]
 8002b52:	4413      	add	r3, r2
 8002b54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b58:	461a      	mov	r2, r3
 8002b5a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002b5e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002b60:	6878      	ldr	r0, [r7, #4]
 8002b62:	f003 fe94 	bl	800688e <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	4a0a      	ldr	r2, [pc, #40]	; (8002b94 <PCD_EP_OutSetupPacket_int+0x88>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d90c      	bls.n	8002b88 <PCD_EP_OutSetupPacket_int+0x7c>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	691b      	ldr	r3, [r3, #16]
 8002b72:	2b01      	cmp	r3, #1
 8002b74:	d108      	bne.n	8002b88 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6818      	ldr	r0, [r3, #0]
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002b80:	461a      	mov	r2, r3
 8002b82:	2101      	movs	r1, #1
 8002b84:	f002 fc78 	bl	8005478 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002b88:	2300      	movs	r3, #0
}
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	3718      	adds	r7, #24
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bd80      	pop	{r7, pc}
 8002b92:	bf00      	nop
 8002b94:	4f54300a 	.word	0x4f54300a

08002b98 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	b083      	sub	sp, #12
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
 8002ba0:	460b      	mov	r3, r1
 8002ba2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002ba4:	bf00      	nop
 8002ba6:	370c      	adds	r7, #12
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bae:	4770      	bx	lr

08002bb0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b086      	sub	sp, #24
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d101      	bne.n	8002bc2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	e267      	b.n	8003092 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f003 0301 	and.w	r3, r3, #1
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d075      	beq.n	8002cba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002bce:	4b88      	ldr	r3, [pc, #544]	; (8002df0 <HAL_RCC_OscConfig+0x240>)
 8002bd0:	689b      	ldr	r3, [r3, #8]
 8002bd2:	f003 030c 	and.w	r3, r3, #12
 8002bd6:	2b04      	cmp	r3, #4
 8002bd8:	d00c      	beq.n	8002bf4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002bda:	4b85      	ldr	r3, [pc, #532]	; (8002df0 <HAL_RCC_OscConfig+0x240>)
 8002bdc:	689b      	ldr	r3, [r3, #8]
 8002bde:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002be2:	2b08      	cmp	r3, #8
 8002be4:	d112      	bne.n	8002c0c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002be6:	4b82      	ldr	r3, [pc, #520]	; (8002df0 <HAL_RCC_OscConfig+0x240>)
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002bf2:	d10b      	bne.n	8002c0c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bf4:	4b7e      	ldr	r3, [pc, #504]	; (8002df0 <HAL_RCC_OscConfig+0x240>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d05b      	beq.n	8002cb8 <HAL_RCC_OscConfig+0x108>
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d157      	bne.n	8002cb8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002c08:	2301      	movs	r3, #1
 8002c0a:	e242      	b.n	8003092 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c14:	d106      	bne.n	8002c24 <HAL_RCC_OscConfig+0x74>
 8002c16:	4b76      	ldr	r3, [pc, #472]	; (8002df0 <HAL_RCC_OscConfig+0x240>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4a75      	ldr	r2, [pc, #468]	; (8002df0 <HAL_RCC_OscConfig+0x240>)
 8002c1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c20:	6013      	str	r3, [r2, #0]
 8002c22:	e01d      	b.n	8002c60 <HAL_RCC_OscConfig+0xb0>
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c2c:	d10c      	bne.n	8002c48 <HAL_RCC_OscConfig+0x98>
 8002c2e:	4b70      	ldr	r3, [pc, #448]	; (8002df0 <HAL_RCC_OscConfig+0x240>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4a6f      	ldr	r2, [pc, #444]	; (8002df0 <HAL_RCC_OscConfig+0x240>)
 8002c34:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c38:	6013      	str	r3, [r2, #0]
 8002c3a:	4b6d      	ldr	r3, [pc, #436]	; (8002df0 <HAL_RCC_OscConfig+0x240>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4a6c      	ldr	r2, [pc, #432]	; (8002df0 <HAL_RCC_OscConfig+0x240>)
 8002c40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c44:	6013      	str	r3, [r2, #0]
 8002c46:	e00b      	b.n	8002c60 <HAL_RCC_OscConfig+0xb0>
 8002c48:	4b69      	ldr	r3, [pc, #420]	; (8002df0 <HAL_RCC_OscConfig+0x240>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4a68      	ldr	r2, [pc, #416]	; (8002df0 <HAL_RCC_OscConfig+0x240>)
 8002c4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c52:	6013      	str	r3, [r2, #0]
 8002c54:	4b66      	ldr	r3, [pc, #408]	; (8002df0 <HAL_RCC_OscConfig+0x240>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4a65      	ldr	r2, [pc, #404]	; (8002df0 <HAL_RCC_OscConfig+0x240>)
 8002c5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c5e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d013      	beq.n	8002c90 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c68:	f7fe f874 	bl	8000d54 <HAL_GetTick>
 8002c6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c6e:	e008      	b.n	8002c82 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c70:	f7fe f870 	bl	8000d54 <HAL_GetTick>
 8002c74:	4602      	mov	r2, r0
 8002c76:	693b      	ldr	r3, [r7, #16]
 8002c78:	1ad3      	subs	r3, r2, r3
 8002c7a:	2b64      	cmp	r3, #100	; 0x64
 8002c7c:	d901      	bls.n	8002c82 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002c7e:	2303      	movs	r3, #3
 8002c80:	e207      	b.n	8003092 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c82:	4b5b      	ldr	r3, [pc, #364]	; (8002df0 <HAL_RCC_OscConfig+0x240>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d0f0      	beq.n	8002c70 <HAL_RCC_OscConfig+0xc0>
 8002c8e:	e014      	b.n	8002cba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c90:	f7fe f860 	bl	8000d54 <HAL_GetTick>
 8002c94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c96:	e008      	b.n	8002caa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c98:	f7fe f85c 	bl	8000d54 <HAL_GetTick>
 8002c9c:	4602      	mov	r2, r0
 8002c9e:	693b      	ldr	r3, [r7, #16]
 8002ca0:	1ad3      	subs	r3, r2, r3
 8002ca2:	2b64      	cmp	r3, #100	; 0x64
 8002ca4:	d901      	bls.n	8002caa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002ca6:	2303      	movs	r3, #3
 8002ca8:	e1f3      	b.n	8003092 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002caa:	4b51      	ldr	r3, [pc, #324]	; (8002df0 <HAL_RCC_OscConfig+0x240>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d1f0      	bne.n	8002c98 <HAL_RCC_OscConfig+0xe8>
 8002cb6:	e000      	b.n	8002cba <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cb8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f003 0302 	and.w	r3, r3, #2
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d063      	beq.n	8002d8e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002cc6:	4b4a      	ldr	r3, [pc, #296]	; (8002df0 <HAL_RCC_OscConfig+0x240>)
 8002cc8:	689b      	ldr	r3, [r3, #8]
 8002cca:	f003 030c 	and.w	r3, r3, #12
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d00b      	beq.n	8002cea <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002cd2:	4b47      	ldr	r3, [pc, #284]	; (8002df0 <HAL_RCC_OscConfig+0x240>)
 8002cd4:	689b      	ldr	r3, [r3, #8]
 8002cd6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002cda:	2b08      	cmp	r3, #8
 8002cdc:	d11c      	bne.n	8002d18 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002cde:	4b44      	ldr	r3, [pc, #272]	; (8002df0 <HAL_RCC_OscConfig+0x240>)
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d116      	bne.n	8002d18 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cea:	4b41      	ldr	r3, [pc, #260]	; (8002df0 <HAL_RCC_OscConfig+0x240>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f003 0302 	and.w	r3, r3, #2
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d005      	beq.n	8002d02 <HAL_RCC_OscConfig+0x152>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	68db      	ldr	r3, [r3, #12]
 8002cfa:	2b01      	cmp	r3, #1
 8002cfc:	d001      	beq.n	8002d02 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002cfe:	2301      	movs	r3, #1
 8002d00:	e1c7      	b.n	8003092 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d02:	4b3b      	ldr	r3, [pc, #236]	; (8002df0 <HAL_RCC_OscConfig+0x240>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	691b      	ldr	r3, [r3, #16]
 8002d0e:	00db      	lsls	r3, r3, #3
 8002d10:	4937      	ldr	r1, [pc, #220]	; (8002df0 <HAL_RCC_OscConfig+0x240>)
 8002d12:	4313      	orrs	r3, r2
 8002d14:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d16:	e03a      	b.n	8002d8e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	68db      	ldr	r3, [r3, #12]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d020      	beq.n	8002d62 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d20:	4b34      	ldr	r3, [pc, #208]	; (8002df4 <HAL_RCC_OscConfig+0x244>)
 8002d22:	2201      	movs	r2, #1
 8002d24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d26:	f7fe f815 	bl	8000d54 <HAL_GetTick>
 8002d2a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d2c:	e008      	b.n	8002d40 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d2e:	f7fe f811 	bl	8000d54 <HAL_GetTick>
 8002d32:	4602      	mov	r2, r0
 8002d34:	693b      	ldr	r3, [r7, #16]
 8002d36:	1ad3      	subs	r3, r2, r3
 8002d38:	2b02      	cmp	r3, #2
 8002d3a:	d901      	bls.n	8002d40 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002d3c:	2303      	movs	r3, #3
 8002d3e:	e1a8      	b.n	8003092 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d40:	4b2b      	ldr	r3, [pc, #172]	; (8002df0 <HAL_RCC_OscConfig+0x240>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f003 0302 	and.w	r3, r3, #2
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d0f0      	beq.n	8002d2e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d4c:	4b28      	ldr	r3, [pc, #160]	; (8002df0 <HAL_RCC_OscConfig+0x240>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	691b      	ldr	r3, [r3, #16]
 8002d58:	00db      	lsls	r3, r3, #3
 8002d5a:	4925      	ldr	r1, [pc, #148]	; (8002df0 <HAL_RCC_OscConfig+0x240>)
 8002d5c:	4313      	orrs	r3, r2
 8002d5e:	600b      	str	r3, [r1, #0]
 8002d60:	e015      	b.n	8002d8e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d62:	4b24      	ldr	r3, [pc, #144]	; (8002df4 <HAL_RCC_OscConfig+0x244>)
 8002d64:	2200      	movs	r2, #0
 8002d66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d68:	f7fd fff4 	bl	8000d54 <HAL_GetTick>
 8002d6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d6e:	e008      	b.n	8002d82 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d70:	f7fd fff0 	bl	8000d54 <HAL_GetTick>
 8002d74:	4602      	mov	r2, r0
 8002d76:	693b      	ldr	r3, [r7, #16]
 8002d78:	1ad3      	subs	r3, r2, r3
 8002d7a:	2b02      	cmp	r3, #2
 8002d7c:	d901      	bls.n	8002d82 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002d7e:	2303      	movs	r3, #3
 8002d80:	e187      	b.n	8003092 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d82:	4b1b      	ldr	r3, [pc, #108]	; (8002df0 <HAL_RCC_OscConfig+0x240>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f003 0302 	and.w	r3, r3, #2
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d1f0      	bne.n	8002d70 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f003 0308 	and.w	r3, r3, #8
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d036      	beq.n	8002e08 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	695b      	ldr	r3, [r3, #20]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d016      	beq.n	8002dd0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002da2:	4b15      	ldr	r3, [pc, #84]	; (8002df8 <HAL_RCC_OscConfig+0x248>)
 8002da4:	2201      	movs	r2, #1
 8002da6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002da8:	f7fd ffd4 	bl	8000d54 <HAL_GetTick>
 8002dac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dae:	e008      	b.n	8002dc2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002db0:	f7fd ffd0 	bl	8000d54 <HAL_GetTick>
 8002db4:	4602      	mov	r2, r0
 8002db6:	693b      	ldr	r3, [r7, #16]
 8002db8:	1ad3      	subs	r3, r2, r3
 8002dba:	2b02      	cmp	r3, #2
 8002dbc:	d901      	bls.n	8002dc2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002dbe:	2303      	movs	r3, #3
 8002dc0:	e167      	b.n	8003092 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dc2:	4b0b      	ldr	r3, [pc, #44]	; (8002df0 <HAL_RCC_OscConfig+0x240>)
 8002dc4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002dc6:	f003 0302 	and.w	r3, r3, #2
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d0f0      	beq.n	8002db0 <HAL_RCC_OscConfig+0x200>
 8002dce:	e01b      	b.n	8002e08 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002dd0:	4b09      	ldr	r3, [pc, #36]	; (8002df8 <HAL_RCC_OscConfig+0x248>)
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dd6:	f7fd ffbd 	bl	8000d54 <HAL_GetTick>
 8002dda:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ddc:	e00e      	b.n	8002dfc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002dde:	f7fd ffb9 	bl	8000d54 <HAL_GetTick>
 8002de2:	4602      	mov	r2, r0
 8002de4:	693b      	ldr	r3, [r7, #16]
 8002de6:	1ad3      	subs	r3, r2, r3
 8002de8:	2b02      	cmp	r3, #2
 8002dea:	d907      	bls.n	8002dfc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002dec:	2303      	movs	r3, #3
 8002dee:	e150      	b.n	8003092 <HAL_RCC_OscConfig+0x4e2>
 8002df0:	40023800 	.word	0x40023800
 8002df4:	42470000 	.word	0x42470000
 8002df8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002dfc:	4b88      	ldr	r3, [pc, #544]	; (8003020 <HAL_RCC_OscConfig+0x470>)
 8002dfe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e00:	f003 0302 	and.w	r3, r3, #2
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d1ea      	bne.n	8002dde <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f003 0304 	and.w	r3, r3, #4
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	f000 8097 	beq.w	8002f44 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e16:	2300      	movs	r3, #0
 8002e18:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e1a:	4b81      	ldr	r3, [pc, #516]	; (8003020 <HAL_RCC_OscConfig+0x470>)
 8002e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d10f      	bne.n	8002e46 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e26:	2300      	movs	r3, #0
 8002e28:	60bb      	str	r3, [r7, #8]
 8002e2a:	4b7d      	ldr	r3, [pc, #500]	; (8003020 <HAL_RCC_OscConfig+0x470>)
 8002e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e2e:	4a7c      	ldr	r2, [pc, #496]	; (8003020 <HAL_RCC_OscConfig+0x470>)
 8002e30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e34:	6413      	str	r3, [r2, #64]	; 0x40
 8002e36:	4b7a      	ldr	r3, [pc, #488]	; (8003020 <HAL_RCC_OscConfig+0x470>)
 8002e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e3e:	60bb      	str	r3, [r7, #8]
 8002e40:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e42:	2301      	movs	r3, #1
 8002e44:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e46:	4b77      	ldr	r3, [pc, #476]	; (8003024 <HAL_RCC_OscConfig+0x474>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d118      	bne.n	8002e84 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e52:	4b74      	ldr	r3, [pc, #464]	; (8003024 <HAL_RCC_OscConfig+0x474>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4a73      	ldr	r2, [pc, #460]	; (8003024 <HAL_RCC_OscConfig+0x474>)
 8002e58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e5c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e5e:	f7fd ff79 	bl	8000d54 <HAL_GetTick>
 8002e62:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e64:	e008      	b.n	8002e78 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e66:	f7fd ff75 	bl	8000d54 <HAL_GetTick>
 8002e6a:	4602      	mov	r2, r0
 8002e6c:	693b      	ldr	r3, [r7, #16]
 8002e6e:	1ad3      	subs	r3, r2, r3
 8002e70:	2b02      	cmp	r3, #2
 8002e72:	d901      	bls.n	8002e78 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002e74:	2303      	movs	r3, #3
 8002e76:	e10c      	b.n	8003092 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e78:	4b6a      	ldr	r3, [pc, #424]	; (8003024 <HAL_RCC_OscConfig+0x474>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d0f0      	beq.n	8002e66 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	689b      	ldr	r3, [r3, #8]
 8002e88:	2b01      	cmp	r3, #1
 8002e8a:	d106      	bne.n	8002e9a <HAL_RCC_OscConfig+0x2ea>
 8002e8c:	4b64      	ldr	r3, [pc, #400]	; (8003020 <HAL_RCC_OscConfig+0x470>)
 8002e8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e90:	4a63      	ldr	r2, [pc, #396]	; (8003020 <HAL_RCC_OscConfig+0x470>)
 8002e92:	f043 0301 	orr.w	r3, r3, #1
 8002e96:	6713      	str	r3, [r2, #112]	; 0x70
 8002e98:	e01c      	b.n	8002ed4 <HAL_RCC_OscConfig+0x324>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	689b      	ldr	r3, [r3, #8]
 8002e9e:	2b05      	cmp	r3, #5
 8002ea0:	d10c      	bne.n	8002ebc <HAL_RCC_OscConfig+0x30c>
 8002ea2:	4b5f      	ldr	r3, [pc, #380]	; (8003020 <HAL_RCC_OscConfig+0x470>)
 8002ea4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ea6:	4a5e      	ldr	r2, [pc, #376]	; (8003020 <HAL_RCC_OscConfig+0x470>)
 8002ea8:	f043 0304 	orr.w	r3, r3, #4
 8002eac:	6713      	str	r3, [r2, #112]	; 0x70
 8002eae:	4b5c      	ldr	r3, [pc, #368]	; (8003020 <HAL_RCC_OscConfig+0x470>)
 8002eb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eb2:	4a5b      	ldr	r2, [pc, #364]	; (8003020 <HAL_RCC_OscConfig+0x470>)
 8002eb4:	f043 0301 	orr.w	r3, r3, #1
 8002eb8:	6713      	str	r3, [r2, #112]	; 0x70
 8002eba:	e00b      	b.n	8002ed4 <HAL_RCC_OscConfig+0x324>
 8002ebc:	4b58      	ldr	r3, [pc, #352]	; (8003020 <HAL_RCC_OscConfig+0x470>)
 8002ebe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ec0:	4a57      	ldr	r2, [pc, #348]	; (8003020 <HAL_RCC_OscConfig+0x470>)
 8002ec2:	f023 0301 	bic.w	r3, r3, #1
 8002ec6:	6713      	str	r3, [r2, #112]	; 0x70
 8002ec8:	4b55      	ldr	r3, [pc, #340]	; (8003020 <HAL_RCC_OscConfig+0x470>)
 8002eca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ecc:	4a54      	ldr	r2, [pc, #336]	; (8003020 <HAL_RCC_OscConfig+0x470>)
 8002ece:	f023 0304 	bic.w	r3, r3, #4
 8002ed2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	689b      	ldr	r3, [r3, #8]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d015      	beq.n	8002f08 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002edc:	f7fd ff3a 	bl	8000d54 <HAL_GetTick>
 8002ee0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ee2:	e00a      	b.n	8002efa <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ee4:	f7fd ff36 	bl	8000d54 <HAL_GetTick>
 8002ee8:	4602      	mov	r2, r0
 8002eea:	693b      	ldr	r3, [r7, #16]
 8002eec:	1ad3      	subs	r3, r2, r3
 8002eee:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d901      	bls.n	8002efa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002ef6:	2303      	movs	r3, #3
 8002ef8:	e0cb      	b.n	8003092 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002efa:	4b49      	ldr	r3, [pc, #292]	; (8003020 <HAL_RCC_OscConfig+0x470>)
 8002efc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002efe:	f003 0302 	and.w	r3, r3, #2
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d0ee      	beq.n	8002ee4 <HAL_RCC_OscConfig+0x334>
 8002f06:	e014      	b.n	8002f32 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f08:	f7fd ff24 	bl	8000d54 <HAL_GetTick>
 8002f0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f0e:	e00a      	b.n	8002f26 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f10:	f7fd ff20 	bl	8000d54 <HAL_GetTick>
 8002f14:	4602      	mov	r2, r0
 8002f16:	693b      	ldr	r3, [r7, #16]
 8002f18:	1ad3      	subs	r3, r2, r3
 8002f1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d901      	bls.n	8002f26 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002f22:	2303      	movs	r3, #3
 8002f24:	e0b5      	b.n	8003092 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f26:	4b3e      	ldr	r3, [pc, #248]	; (8003020 <HAL_RCC_OscConfig+0x470>)
 8002f28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f2a:	f003 0302 	and.w	r3, r3, #2
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d1ee      	bne.n	8002f10 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002f32:	7dfb      	ldrb	r3, [r7, #23]
 8002f34:	2b01      	cmp	r3, #1
 8002f36:	d105      	bne.n	8002f44 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f38:	4b39      	ldr	r3, [pc, #228]	; (8003020 <HAL_RCC_OscConfig+0x470>)
 8002f3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f3c:	4a38      	ldr	r2, [pc, #224]	; (8003020 <HAL_RCC_OscConfig+0x470>)
 8002f3e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f42:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	699b      	ldr	r3, [r3, #24]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	f000 80a1 	beq.w	8003090 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002f4e:	4b34      	ldr	r3, [pc, #208]	; (8003020 <HAL_RCC_OscConfig+0x470>)
 8002f50:	689b      	ldr	r3, [r3, #8]
 8002f52:	f003 030c 	and.w	r3, r3, #12
 8002f56:	2b08      	cmp	r3, #8
 8002f58:	d05c      	beq.n	8003014 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	699b      	ldr	r3, [r3, #24]
 8002f5e:	2b02      	cmp	r3, #2
 8002f60:	d141      	bne.n	8002fe6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f62:	4b31      	ldr	r3, [pc, #196]	; (8003028 <HAL_RCC_OscConfig+0x478>)
 8002f64:	2200      	movs	r2, #0
 8002f66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f68:	f7fd fef4 	bl	8000d54 <HAL_GetTick>
 8002f6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f6e:	e008      	b.n	8002f82 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f70:	f7fd fef0 	bl	8000d54 <HAL_GetTick>
 8002f74:	4602      	mov	r2, r0
 8002f76:	693b      	ldr	r3, [r7, #16]
 8002f78:	1ad3      	subs	r3, r2, r3
 8002f7a:	2b02      	cmp	r3, #2
 8002f7c:	d901      	bls.n	8002f82 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002f7e:	2303      	movs	r3, #3
 8002f80:	e087      	b.n	8003092 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f82:	4b27      	ldr	r3, [pc, #156]	; (8003020 <HAL_RCC_OscConfig+0x470>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d1f0      	bne.n	8002f70 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	69da      	ldr	r2, [r3, #28]
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6a1b      	ldr	r3, [r3, #32]
 8002f96:	431a      	orrs	r2, r3
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f9c:	019b      	lsls	r3, r3, #6
 8002f9e:	431a      	orrs	r2, r3
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fa4:	085b      	lsrs	r3, r3, #1
 8002fa6:	3b01      	subs	r3, #1
 8002fa8:	041b      	lsls	r3, r3, #16
 8002faa:	431a      	orrs	r2, r3
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fb0:	061b      	lsls	r3, r3, #24
 8002fb2:	491b      	ldr	r1, [pc, #108]	; (8003020 <HAL_RCC_OscConfig+0x470>)
 8002fb4:	4313      	orrs	r3, r2
 8002fb6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002fb8:	4b1b      	ldr	r3, [pc, #108]	; (8003028 <HAL_RCC_OscConfig+0x478>)
 8002fba:	2201      	movs	r2, #1
 8002fbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fbe:	f7fd fec9 	bl	8000d54 <HAL_GetTick>
 8002fc2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fc4:	e008      	b.n	8002fd8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fc6:	f7fd fec5 	bl	8000d54 <HAL_GetTick>
 8002fca:	4602      	mov	r2, r0
 8002fcc:	693b      	ldr	r3, [r7, #16]
 8002fce:	1ad3      	subs	r3, r2, r3
 8002fd0:	2b02      	cmp	r3, #2
 8002fd2:	d901      	bls.n	8002fd8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002fd4:	2303      	movs	r3, #3
 8002fd6:	e05c      	b.n	8003092 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fd8:	4b11      	ldr	r3, [pc, #68]	; (8003020 <HAL_RCC_OscConfig+0x470>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d0f0      	beq.n	8002fc6 <HAL_RCC_OscConfig+0x416>
 8002fe4:	e054      	b.n	8003090 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fe6:	4b10      	ldr	r3, [pc, #64]	; (8003028 <HAL_RCC_OscConfig+0x478>)
 8002fe8:	2200      	movs	r2, #0
 8002fea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fec:	f7fd feb2 	bl	8000d54 <HAL_GetTick>
 8002ff0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ff2:	e008      	b.n	8003006 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ff4:	f7fd feae 	bl	8000d54 <HAL_GetTick>
 8002ff8:	4602      	mov	r2, r0
 8002ffa:	693b      	ldr	r3, [r7, #16]
 8002ffc:	1ad3      	subs	r3, r2, r3
 8002ffe:	2b02      	cmp	r3, #2
 8003000:	d901      	bls.n	8003006 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003002:	2303      	movs	r3, #3
 8003004:	e045      	b.n	8003092 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003006:	4b06      	ldr	r3, [pc, #24]	; (8003020 <HAL_RCC_OscConfig+0x470>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800300e:	2b00      	cmp	r3, #0
 8003010:	d1f0      	bne.n	8002ff4 <HAL_RCC_OscConfig+0x444>
 8003012:	e03d      	b.n	8003090 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	699b      	ldr	r3, [r3, #24]
 8003018:	2b01      	cmp	r3, #1
 800301a:	d107      	bne.n	800302c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800301c:	2301      	movs	r3, #1
 800301e:	e038      	b.n	8003092 <HAL_RCC_OscConfig+0x4e2>
 8003020:	40023800 	.word	0x40023800
 8003024:	40007000 	.word	0x40007000
 8003028:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800302c:	4b1b      	ldr	r3, [pc, #108]	; (800309c <HAL_RCC_OscConfig+0x4ec>)
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	699b      	ldr	r3, [r3, #24]
 8003036:	2b01      	cmp	r3, #1
 8003038:	d028      	beq.n	800308c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003044:	429a      	cmp	r2, r3
 8003046:	d121      	bne.n	800308c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003052:	429a      	cmp	r2, r3
 8003054:	d11a      	bne.n	800308c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003056:	68fa      	ldr	r2, [r7, #12]
 8003058:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800305c:	4013      	ands	r3, r2
 800305e:	687a      	ldr	r2, [r7, #4]
 8003060:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003062:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003064:	4293      	cmp	r3, r2
 8003066:	d111      	bne.n	800308c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003072:	085b      	lsrs	r3, r3, #1
 8003074:	3b01      	subs	r3, #1
 8003076:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003078:	429a      	cmp	r2, r3
 800307a:	d107      	bne.n	800308c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003086:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003088:	429a      	cmp	r2, r3
 800308a:	d001      	beq.n	8003090 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800308c:	2301      	movs	r3, #1
 800308e:	e000      	b.n	8003092 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003090:	2300      	movs	r3, #0
}
 8003092:	4618      	mov	r0, r3
 8003094:	3718      	adds	r7, #24
 8003096:	46bd      	mov	sp, r7
 8003098:	bd80      	pop	{r7, pc}
 800309a:	bf00      	nop
 800309c:	40023800 	.word	0x40023800

080030a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b084      	sub	sp, #16
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
 80030a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d101      	bne.n	80030b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80030b0:	2301      	movs	r3, #1
 80030b2:	e0cc      	b.n	800324e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80030b4:	4b68      	ldr	r3, [pc, #416]	; (8003258 <HAL_RCC_ClockConfig+0x1b8>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f003 0307 	and.w	r3, r3, #7
 80030bc:	683a      	ldr	r2, [r7, #0]
 80030be:	429a      	cmp	r2, r3
 80030c0:	d90c      	bls.n	80030dc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030c2:	4b65      	ldr	r3, [pc, #404]	; (8003258 <HAL_RCC_ClockConfig+0x1b8>)
 80030c4:	683a      	ldr	r2, [r7, #0]
 80030c6:	b2d2      	uxtb	r2, r2
 80030c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030ca:	4b63      	ldr	r3, [pc, #396]	; (8003258 <HAL_RCC_ClockConfig+0x1b8>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f003 0307 	and.w	r3, r3, #7
 80030d2:	683a      	ldr	r2, [r7, #0]
 80030d4:	429a      	cmp	r2, r3
 80030d6:	d001      	beq.n	80030dc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80030d8:	2301      	movs	r3, #1
 80030da:	e0b8      	b.n	800324e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f003 0302 	and.w	r3, r3, #2
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d020      	beq.n	800312a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f003 0304 	and.w	r3, r3, #4
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d005      	beq.n	8003100 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80030f4:	4b59      	ldr	r3, [pc, #356]	; (800325c <HAL_RCC_ClockConfig+0x1bc>)
 80030f6:	689b      	ldr	r3, [r3, #8]
 80030f8:	4a58      	ldr	r2, [pc, #352]	; (800325c <HAL_RCC_ClockConfig+0x1bc>)
 80030fa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80030fe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f003 0308 	and.w	r3, r3, #8
 8003108:	2b00      	cmp	r3, #0
 800310a:	d005      	beq.n	8003118 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800310c:	4b53      	ldr	r3, [pc, #332]	; (800325c <HAL_RCC_ClockConfig+0x1bc>)
 800310e:	689b      	ldr	r3, [r3, #8]
 8003110:	4a52      	ldr	r2, [pc, #328]	; (800325c <HAL_RCC_ClockConfig+0x1bc>)
 8003112:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003116:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003118:	4b50      	ldr	r3, [pc, #320]	; (800325c <HAL_RCC_ClockConfig+0x1bc>)
 800311a:	689b      	ldr	r3, [r3, #8]
 800311c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	689b      	ldr	r3, [r3, #8]
 8003124:	494d      	ldr	r1, [pc, #308]	; (800325c <HAL_RCC_ClockConfig+0x1bc>)
 8003126:	4313      	orrs	r3, r2
 8003128:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f003 0301 	and.w	r3, r3, #1
 8003132:	2b00      	cmp	r3, #0
 8003134:	d044      	beq.n	80031c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	2b01      	cmp	r3, #1
 800313c:	d107      	bne.n	800314e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800313e:	4b47      	ldr	r3, [pc, #284]	; (800325c <HAL_RCC_ClockConfig+0x1bc>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003146:	2b00      	cmp	r3, #0
 8003148:	d119      	bne.n	800317e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800314a:	2301      	movs	r3, #1
 800314c:	e07f      	b.n	800324e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	2b02      	cmp	r3, #2
 8003154:	d003      	beq.n	800315e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800315a:	2b03      	cmp	r3, #3
 800315c:	d107      	bne.n	800316e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800315e:	4b3f      	ldr	r3, [pc, #252]	; (800325c <HAL_RCC_ClockConfig+0x1bc>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003166:	2b00      	cmp	r3, #0
 8003168:	d109      	bne.n	800317e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800316a:	2301      	movs	r3, #1
 800316c:	e06f      	b.n	800324e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800316e:	4b3b      	ldr	r3, [pc, #236]	; (800325c <HAL_RCC_ClockConfig+0x1bc>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f003 0302 	and.w	r3, r3, #2
 8003176:	2b00      	cmp	r3, #0
 8003178:	d101      	bne.n	800317e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800317a:	2301      	movs	r3, #1
 800317c:	e067      	b.n	800324e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800317e:	4b37      	ldr	r3, [pc, #220]	; (800325c <HAL_RCC_ClockConfig+0x1bc>)
 8003180:	689b      	ldr	r3, [r3, #8]
 8003182:	f023 0203 	bic.w	r2, r3, #3
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	4934      	ldr	r1, [pc, #208]	; (800325c <HAL_RCC_ClockConfig+0x1bc>)
 800318c:	4313      	orrs	r3, r2
 800318e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003190:	f7fd fde0 	bl	8000d54 <HAL_GetTick>
 8003194:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003196:	e00a      	b.n	80031ae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003198:	f7fd fddc 	bl	8000d54 <HAL_GetTick>
 800319c:	4602      	mov	r2, r0
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	1ad3      	subs	r3, r2, r3
 80031a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d901      	bls.n	80031ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80031aa:	2303      	movs	r3, #3
 80031ac:	e04f      	b.n	800324e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031ae:	4b2b      	ldr	r3, [pc, #172]	; (800325c <HAL_RCC_ClockConfig+0x1bc>)
 80031b0:	689b      	ldr	r3, [r3, #8]
 80031b2:	f003 020c 	and.w	r2, r3, #12
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	009b      	lsls	r3, r3, #2
 80031bc:	429a      	cmp	r2, r3
 80031be:	d1eb      	bne.n	8003198 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80031c0:	4b25      	ldr	r3, [pc, #148]	; (8003258 <HAL_RCC_ClockConfig+0x1b8>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f003 0307 	and.w	r3, r3, #7
 80031c8:	683a      	ldr	r2, [r7, #0]
 80031ca:	429a      	cmp	r2, r3
 80031cc:	d20c      	bcs.n	80031e8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031ce:	4b22      	ldr	r3, [pc, #136]	; (8003258 <HAL_RCC_ClockConfig+0x1b8>)
 80031d0:	683a      	ldr	r2, [r7, #0]
 80031d2:	b2d2      	uxtb	r2, r2
 80031d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031d6:	4b20      	ldr	r3, [pc, #128]	; (8003258 <HAL_RCC_ClockConfig+0x1b8>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f003 0307 	and.w	r3, r3, #7
 80031de:	683a      	ldr	r2, [r7, #0]
 80031e0:	429a      	cmp	r2, r3
 80031e2:	d001      	beq.n	80031e8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80031e4:	2301      	movs	r3, #1
 80031e6:	e032      	b.n	800324e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f003 0304 	and.w	r3, r3, #4
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d008      	beq.n	8003206 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80031f4:	4b19      	ldr	r3, [pc, #100]	; (800325c <HAL_RCC_ClockConfig+0x1bc>)
 80031f6:	689b      	ldr	r3, [r3, #8]
 80031f8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	68db      	ldr	r3, [r3, #12]
 8003200:	4916      	ldr	r1, [pc, #88]	; (800325c <HAL_RCC_ClockConfig+0x1bc>)
 8003202:	4313      	orrs	r3, r2
 8003204:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f003 0308 	and.w	r3, r3, #8
 800320e:	2b00      	cmp	r3, #0
 8003210:	d009      	beq.n	8003226 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003212:	4b12      	ldr	r3, [pc, #72]	; (800325c <HAL_RCC_ClockConfig+0x1bc>)
 8003214:	689b      	ldr	r3, [r3, #8]
 8003216:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	691b      	ldr	r3, [r3, #16]
 800321e:	00db      	lsls	r3, r3, #3
 8003220:	490e      	ldr	r1, [pc, #56]	; (800325c <HAL_RCC_ClockConfig+0x1bc>)
 8003222:	4313      	orrs	r3, r2
 8003224:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003226:	f000 f821 	bl	800326c <HAL_RCC_GetSysClockFreq>
 800322a:	4602      	mov	r2, r0
 800322c:	4b0b      	ldr	r3, [pc, #44]	; (800325c <HAL_RCC_ClockConfig+0x1bc>)
 800322e:	689b      	ldr	r3, [r3, #8]
 8003230:	091b      	lsrs	r3, r3, #4
 8003232:	f003 030f 	and.w	r3, r3, #15
 8003236:	490a      	ldr	r1, [pc, #40]	; (8003260 <HAL_RCC_ClockConfig+0x1c0>)
 8003238:	5ccb      	ldrb	r3, [r1, r3]
 800323a:	fa22 f303 	lsr.w	r3, r2, r3
 800323e:	4a09      	ldr	r2, [pc, #36]	; (8003264 <HAL_RCC_ClockConfig+0x1c4>)
 8003240:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003242:	4b09      	ldr	r3, [pc, #36]	; (8003268 <HAL_RCC_ClockConfig+0x1c8>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4618      	mov	r0, r3
 8003248:	f7fd fd40 	bl	8000ccc <HAL_InitTick>

  return HAL_OK;
 800324c:	2300      	movs	r3, #0
}
 800324e:	4618      	mov	r0, r3
 8003250:	3710      	adds	r7, #16
 8003252:	46bd      	mov	sp, r7
 8003254:	bd80      	pop	{r7, pc}
 8003256:	bf00      	nop
 8003258:	40023c00 	.word	0x40023c00
 800325c:	40023800 	.word	0x40023800
 8003260:	08006d1c 	.word	0x08006d1c
 8003264:	20000000 	.word	0x20000000
 8003268:	20000004 	.word	0x20000004

0800326c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800326c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003270:	b094      	sub	sp, #80	; 0x50
 8003272:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003274:	2300      	movs	r3, #0
 8003276:	647b      	str	r3, [r7, #68]	; 0x44
 8003278:	2300      	movs	r3, #0
 800327a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800327c:	2300      	movs	r3, #0
 800327e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003280:	2300      	movs	r3, #0
 8003282:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003284:	4b79      	ldr	r3, [pc, #484]	; (800346c <HAL_RCC_GetSysClockFreq+0x200>)
 8003286:	689b      	ldr	r3, [r3, #8]
 8003288:	f003 030c 	and.w	r3, r3, #12
 800328c:	2b08      	cmp	r3, #8
 800328e:	d00d      	beq.n	80032ac <HAL_RCC_GetSysClockFreq+0x40>
 8003290:	2b08      	cmp	r3, #8
 8003292:	f200 80e1 	bhi.w	8003458 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003296:	2b00      	cmp	r3, #0
 8003298:	d002      	beq.n	80032a0 <HAL_RCC_GetSysClockFreq+0x34>
 800329a:	2b04      	cmp	r3, #4
 800329c:	d003      	beq.n	80032a6 <HAL_RCC_GetSysClockFreq+0x3a>
 800329e:	e0db      	b.n	8003458 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80032a0:	4b73      	ldr	r3, [pc, #460]	; (8003470 <HAL_RCC_GetSysClockFreq+0x204>)
 80032a2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80032a4:	e0db      	b.n	800345e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80032a6:	4b73      	ldr	r3, [pc, #460]	; (8003474 <HAL_RCC_GetSysClockFreq+0x208>)
 80032a8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80032aa:	e0d8      	b.n	800345e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80032ac:	4b6f      	ldr	r3, [pc, #444]	; (800346c <HAL_RCC_GetSysClockFreq+0x200>)
 80032ae:	685b      	ldr	r3, [r3, #4]
 80032b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80032b4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80032b6:	4b6d      	ldr	r3, [pc, #436]	; (800346c <HAL_RCC_GetSysClockFreq+0x200>)
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d063      	beq.n	800338a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032c2:	4b6a      	ldr	r3, [pc, #424]	; (800346c <HAL_RCC_GetSysClockFreq+0x200>)
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	099b      	lsrs	r3, r3, #6
 80032c8:	2200      	movs	r2, #0
 80032ca:	63bb      	str	r3, [r7, #56]	; 0x38
 80032cc:	63fa      	str	r2, [r7, #60]	; 0x3c
 80032ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032d4:	633b      	str	r3, [r7, #48]	; 0x30
 80032d6:	2300      	movs	r3, #0
 80032d8:	637b      	str	r3, [r7, #52]	; 0x34
 80032da:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80032de:	4622      	mov	r2, r4
 80032e0:	462b      	mov	r3, r5
 80032e2:	f04f 0000 	mov.w	r0, #0
 80032e6:	f04f 0100 	mov.w	r1, #0
 80032ea:	0159      	lsls	r1, r3, #5
 80032ec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80032f0:	0150      	lsls	r0, r2, #5
 80032f2:	4602      	mov	r2, r0
 80032f4:	460b      	mov	r3, r1
 80032f6:	4621      	mov	r1, r4
 80032f8:	1a51      	subs	r1, r2, r1
 80032fa:	6139      	str	r1, [r7, #16]
 80032fc:	4629      	mov	r1, r5
 80032fe:	eb63 0301 	sbc.w	r3, r3, r1
 8003302:	617b      	str	r3, [r7, #20]
 8003304:	f04f 0200 	mov.w	r2, #0
 8003308:	f04f 0300 	mov.w	r3, #0
 800330c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003310:	4659      	mov	r1, fp
 8003312:	018b      	lsls	r3, r1, #6
 8003314:	4651      	mov	r1, sl
 8003316:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800331a:	4651      	mov	r1, sl
 800331c:	018a      	lsls	r2, r1, #6
 800331e:	4651      	mov	r1, sl
 8003320:	ebb2 0801 	subs.w	r8, r2, r1
 8003324:	4659      	mov	r1, fp
 8003326:	eb63 0901 	sbc.w	r9, r3, r1
 800332a:	f04f 0200 	mov.w	r2, #0
 800332e:	f04f 0300 	mov.w	r3, #0
 8003332:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003336:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800333a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800333e:	4690      	mov	r8, r2
 8003340:	4699      	mov	r9, r3
 8003342:	4623      	mov	r3, r4
 8003344:	eb18 0303 	adds.w	r3, r8, r3
 8003348:	60bb      	str	r3, [r7, #8]
 800334a:	462b      	mov	r3, r5
 800334c:	eb49 0303 	adc.w	r3, r9, r3
 8003350:	60fb      	str	r3, [r7, #12]
 8003352:	f04f 0200 	mov.w	r2, #0
 8003356:	f04f 0300 	mov.w	r3, #0
 800335a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800335e:	4629      	mov	r1, r5
 8003360:	024b      	lsls	r3, r1, #9
 8003362:	4621      	mov	r1, r4
 8003364:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003368:	4621      	mov	r1, r4
 800336a:	024a      	lsls	r2, r1, #9
 800336c:	4610      	mov	r0, r2
 800336e:	4619      	mov	r1, r3
 8003370:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003372:	2200      	movs	r2, #0
 8003374:	62bb      	str	r3, [r7, #40]	; 0x28
 8003376:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003378:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800337c:	f7fc ff24 	bl	80001c8 <__aeabi_uldivmod>
 8003380:	4602      	mov	r2, r0
 8003382:	460b      	mov	r3, r1
 8003384:	4613      	mov	r3, r2
 8003386:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003388:	e058      	b.n	800343c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800338a:	4b38      	ldr	r3, [pc, #224]	; (800346c <HAL_RCC_GetSysClockFreq+0x200>)
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	099b      	lsrs	r3, r3, #6
 8003390:	2200      	movs	r2, #0
 8003392:	4618      	mov	r0, r3
 8003394:	4611      	mov	r1, r2
 8003396:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800339a:	623b      	str	r3, [r7, #32]
 800339c:	2300      	movs	r3, #0
 800339e:	627b      	str	r3, [r7, #36]	; 0x24
 80033a0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80033a4:	4642      	mov	r2, r8
 80033a6:	464b      	mov	r3, r9
 80033a8:	f04f 0000 	mov.w	r0, #0
 80033ac:	f04f 0100 	mov.w	r1, #0
 80033b0:	0159      	lsls	r1, r3, #5
 80033b2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80033b6:	0150      	lsls	r0, r2, #5
 80033b8:	4602      	mov	r2, r0
 80033ba:	460b      	mov	r3, r1
 80033bc:	4641      	mov	r1, r8
 80033be:	ebb2 0a01 	subs.w	sl, r2, r1
 80033c2:	4649      	mov	r1, r9
 80033c4:	eb63 0b01 	sbc.w	fp, r3, r1
 80033c8:	f04f 0200 	mov.w	r2, #0
 80033cc:	f04f 0300 	mov.w	r3, #0
 80033d0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80033d4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80033d8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80033dc:	ebb2 040a 	subs.w	r4, r2, sl
 80033e0:	eb63 050b 	sbc.w	r5, r3, fp
 80033e4:	f04f 0200 	mov.w	r2, #0
 80033e8:	f04f 0300 	mov.w	r3, #0
 80033ec:	00eb      	lsls	r3, r5, #3
 80033ee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80033f2:	00e2      	lsls	r2, r4, #3
 80033f4:	4614      	mov	r4, r2
 80033f6:	461d      	mov	r5, r3
 80033f8:	4643      	mov	r3, r8
 80033fa:	18e3      	adds	r3, r4, r3
 80033fc:	603b      	str	r3, [r7, #0]
 80033fe:	464b      	mov	r3, r9
 8003400:	eb45 0303 	adc.w	r3, r5, r3
 8003404:	607b      	str	r3, [r7, #4]
 8003406:	f04f 0200 	mov.w	r2, #0
 800340a:	f04f 0300 	mov.w	r3, #0
 800340e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003412:	4629      	mov	r1, r5
 8003414:	028b      	lsls	r3, r1, #10
 8003416:	4621      	mov	r1, r4
 8003418:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800341c:	4621      	mov	r1, r4
 800341e:	028a      	lsls	r2, r1, #10
 8003420:	4610      	mov	r0, r2
 8003422:	4619      	mov	r1, r3
 8003424:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003426:	2200      	movs	r2, #0
 8003428:	61bb      	str	r3, [r7, #24]
 800342a:	61fa      	str	r2, [r7, #28]
 800342c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003430:	f7fc feca 	bl	80001c8 <__aeabi_uldivmod>
 8003434:	4602      	mov	r2, r0
 8003436:	460b      	mov	r3, r1
 8003438:	4613      	mov	r3, r2
 800343a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800343c:	4b0b      	ldr	r3, [pc, #44]	; (800346c <HAL_RCC_GetSysClockFreq+0x200>)
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	0c1b      	lsrs	r3, r3, #16
 8003442:	f003 0303 	and.w	r3, r3, #3
 8003446:	3301      	adds	r3, #1
 8003448:	005b      	lsls	r3, r3, #1
 800344a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800344c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800344e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003450:	fbb2 f3f3 	udiv	r3, r2, r3
 8003454:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003456:	e002      	b.n	800345e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003458:	4b05      	ldr	r3, [pc, #20]	; (8003470 <HAL_RCC_GetSysClockFreq+0x204>)
 800345a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800345c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800345e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003460:	4618      	mov	r0, r3
 8003462:	3750      	adds	r7, #80	; 0x50
 8003464:	46bd      	mov	sp, r7
 8003466:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800346a:	bf00      	nop
 800346c:	40023800 	.word	0x40023800
 8003470:	00f42400 	.word	0x00f42400
 8003474:	007a1200 	.word	0x007a1200

08003478 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003478:	b480      	push	{r7}
 800347a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800347c:	4b03      	ldr	r3, [pc, #12]	; (800348c <HAL_RCC_GetHCLKFreq+0x14>)
 800347e:	681b      	ldr	r3, [r3, #0]
}
 8003480:	4618      	mov	r0, r3
 8003482:	46bd      	mov	sp, r7
 8003484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003488:	4770      	bx	lr
 800348a:	bf00      	nop
 800348c:	20000000 	.word	0x20000000

08003490 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b082      	sub	sp, #8
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2b00      	cmp	r3, #0
 800349c:	d101      	bne.n	80034a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800349e:	2301      	movs	r3, #1
 80034a0:	e041      	b.n	8003526 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034a8:	b2db      	uxtb	r3, r3
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d106      	bne.n	80034bc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2200      	movs	r2, #0
 80034b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80034b6:	6878      	ldr	r0, [r7, #4]
 80034b8:	f7fd faba 	bl	8000a30 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2202      	movs	r2, #2
 80034c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681a      	ldr	r2, [r3, #0]
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	3304      	adds	r3, #4
 80034cc:	4619      	mov	r1, r3
 80034ce:	4610      	mov	r0, r2
 80034d0:	f000 fc12 	bl	8003cf8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2201      	movs	r2, #1
 80034d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2201      	movs	r2, #1
 80034e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2201      	movs	r2, #1
 80034e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2201      	movs	r2, #1
 80034f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2201      	movs	r2, #1
 80034f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2201      	movs	r2, #1
 8003500:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2201      	movs	r2, #1
 8003508:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2201      	movs	r2, #1
 8003510:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2201      	movs	r2, #1
 8003518:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2201      	movs	r2, #1
 8003520:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003524:	2300      	movs	r3, #0
}
 8003526:	4618      	mov	r0, r3
 8003528:	3708      	adds	r7, #8
 800352a:	46bd      	mov	sp, r7
 800352c:	bd80      	pop	{r7, pc}

0800352e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800352e:	b580      	push	{r7, lr}
 8003530:	b082      	sub	sp, #8
 8003532:	af00      	add	r7, sp, #0
 8003534:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d101      	bne.n	8003540 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800353c:	2301      	movs	r3, #1
 800353e:	e041      	b.n	80035c4 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003546:	b2db      	uxtb	r3, r3
 8003548:	2b00      	cmp	r3, #0
 800354a:	d106      	bne.n	800355a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2200      	movs	r2, #0
 8003550:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003554:	6878      	ldr	r0, [r7, #4]
 8003556:	f000 f839 	bl	80035cc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2202      	movs	r2, #2
 800355e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681a      	ldr	r2, [r3, #0]
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	3304      	adds	r3, #4
 800356a:	4619      	mov	r1, r3
 800356c:	4610      	mov	r0, r2
 800356e:	f000 fbc3 	bl	8003cf8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2201      	movs	r2, #1
 8003576:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2201      	movs	r2, #1
 800357e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2201      	movs	r2, #1
 8003586:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2201      	movs	r2, #1
 800358e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2201      	movs	r2, #1
 8003596:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2201      	movs	r2, #1
 800359e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2201      	movs	r2, #1
 80035a6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2201      	movs	r2, #1
 80035ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2201      	movs	r2, #1
 80035b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2201      	movs	r2, #1
 80035be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80035c2:	2300      	movs	r3, #0
}
 80035c4:	4618      	mov	r0, r3
 80035c6:	3708      	adds	r7, #8
 80035c8:	46bd      	mov	sp, r7
 80035ca:	bd80      	pop	{r7, pc}

080035cc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80035cc:	b480      	push	{r7}
 80035ce:	b083      	sub	sp, #12
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80035d4:	bf00      	nop
 80035d6:	370c      	adds	r7, #12
 80035d8:	46bd      	mov	sp, r7
 80035da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035de:	4770      	bx	lr

080035e0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b084      	sub	sp, #16
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
 80035e8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d109      	bne.n	8003604 <HAL_TIM_PWM_Start+0x24>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80035f6:	b2db      	uxtb	r3, r3
 80035f8:	2b01      	cmp	r3, #1
 80035fa:	bf14      	ite	ne
 80035fc:	2301      	movne	r3, #1
 80035fe:	2300      	moveq	r3, #0
 8003600:	b2db      	uxtb	r3, r3
 8003602:	e022      	b.n	800364a <HAL_TIM_PWM_Start+0x6a>
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	2b04      	cmp	r3, #4
 8003608:	d109      	bne.n	800361e <HAL_TIM_PWM_Start+0x3e>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003610:	b2db      	uxtb	r3, r3
 8003612:	2b01      	cmp	r3, #1
 8003614:	bf14      	ite	ne
 8003616:	2301      	movne	r3, #1
 8003618:	2300      	moveq	r3, #0
 800361a:	b2db      	uxtb	r3, r3
 800361c:	e015      	b.n	800364a <HAL_TIM_PWM_Start+0x6a>
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	2b08      	cmp	r3, #8
 8003622:	d109      	bne.n	8003638 <HAL_TIM_PWM_Start+0x58>
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800362a:	b2db      	uxtb	r3, r3
 800362c:	2b01      	cmp	r3, #1
 800362e:	bf14      	ite	ne
 8003630:	2301      	movne	r3, #1
 8003632:	2300      	moveq	r3, #0
 8003634:	b2db      	uxtb	r3, r3
 8003636:	e008      	b.n	800364a <HAL_TIM_PWM_Start+0x6a>
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800363e:	b2db      	uxtb	r3, r3
 8003640:	2b01      	cmp	r3, #1
 8003642:	bf14      	ite	ne
 8003644:	2301      	movne	r3, #1
 8003646:	2300      	moveq	r3, #0
 8003648:	b2db      	uxtb	r3, r3
 800364a:	2b00      	cmp	r3, #0
 800364c:	d001      	beq.n	8003652 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800364e:	2301      	movs	r3, #1
 8003650:	e07c      	b.n	800374c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d104      	bne.n	8003662 <HAL_TIM_PWM_Start+0x82>
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2202      	movs	r2, #2
 800365c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003660:	e013      	b.n	800368a <HAL_TIM_PWM_Start+0xaa>
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	2b04      	cmp	r3, #4
 8003666:	d104      	bne.n	8003672 <HAL_TIM_PWM_Start+0x92>
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2202      	movs	r2, #2
 800366c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003670:	e00b      	b.n	800368a <HAL_TIM_PWM_Start+0xaa>
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	2b08      	cmp	r3, #8
 8003676:	d104      	bne.n	8003682 <HAL_TIM_PWM_Start+0xa2>
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2202      	movs	r2, #2
 800367c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003680:	e003      	b.n	800368a <HAL_TIM_PWM_Start+0xaa>
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2202      	movs	r2, #2
 8003686:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	2201      	movs	r2, #1
 8003690:	6839      	ldr	r1, [r7, #0]
 8003692:	4618      	mov	r0, r3
 8003694:	f000 fe1a 	bl	80042cc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4a2d      	ldr	r2, [pc, #180]	; (8003754 <HAL_TIM_PWM_Start+0x174>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d004      	beq.n	80036ac <HAL_TIM_PWM_Start+0xcc>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4a2c      	ldr	r2, [pc, #176]	; (8003758 <HAL_TIM_PWM_Start+0x178>)
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d101      	bne.n	80036b0 <HAL_TIM_PWM_Start+0xd0>
 80036ac:	2301      	movs	r3, #1
 80036ae:	e000      	b.n	80036b2 <HAL_TIM_PWM_Start+0xd2>
 80036b0:	2300      	movs	r3, #0
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d007      	beq.n	80036c6 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80036c4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	4a22      	ldr	r2, [pc, #136]	; (8003754 <HAL_TIM_PWM_Start+0x174>)
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d022      	beq.n	8003716 <HAL_TIM_PWM_Start+0x136>
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036d8:	d01d      	beq.n	8003716 <HAL_TIM_PWM_Start+0x136>
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4a1f      	ldr	r2, [pc, #124]	; (800375c <HAL_TIM_PWM_Start+0x17c>)
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d018      	beq.n	8003716 <HAL_TIM_PWM_Start+0x136>
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4a1d      	ldr	r2, [pc, #116]	; (8003760 <HAL_TIM_PWM_Start+0x180>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d013      	beq.n	8003716 <HAL_TIM_PWM_Start+0x136>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4a1c      	ldr	r2, [pc, #112]	; (8003764 <HAL_TIM_PWM_Start+0x184>)
 80036f4:	4293      	cmp	r3, r2
 80036f6:	d00e      	beq.n	8003716 <HAL_TIM_PWM_Start+0x136>
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4a16      	ldr	r2, [pc, #88]	; (8003758 <HAL_TIM_PWM_Start+0x178>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d009      	beq.n	8003716 <HAL_TIM_PWM_Start+0x136>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4a18      	ldr	r2, [pc, #96]	; (8003768 <HAL_TIM_PWM_Start+0x188>)
 8003708:	4293      	cmp	r3, r2
 800370a:	d004      	beq.n	8003716 <HAL_TIM_PWM_Start+0x136>
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4a16      	ldr	r2, [pc, #88]	; (800376c <HAL_TIM_PWM_Start+0x18c>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d111      	bne.n	800373a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	689b      	ldr	r3, [r3, #8]
 800371c:	f003 0307 	and.w	r3, r3, #7
 8003720:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	2b06      	cmp	r3, #6
 8003726:	d010      	beq.n	800374a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	681a      	ldr	r2, [r3, #0]
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f042 0201 	orr.w	r2, r2, #1
 8003736:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003738:	e007      	b.n	800374a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	681a      	ldr	r2, [r3, #0]
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f042 0201 	orr.w	r2, r2, #1
 8003748:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800374a:	2300      	movs	r3, #0
}
 800374c:	4618      	mov	r0, r3
 800374e:	3710      	adds	r7, #16
 8003750:	46bd      	mov	sp, r7
 8003752:	bd80      	pop	{r7, pc}
 8003754:	40010000 	.word	0x40010000
 8003758:	40010400 	.word	0x40010400
 800375c:	40000400 	.word	0x40000400
 8003760:	40000800 	.word	0x40000800
 8003764:	40000c00 	.word	0x40000c00
 8003768:	40014000 	.word	0x40014000
 800376c:	40001800 	.word	0x40001800

08003770 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b082      	sub	sp, #8
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	691b      	ldr	r3, [r3, #16]
 800377e:	f003 0302 	and.w	r3, r3, #2
 8003782:	2b02      	cmp	r3, #2
 8003784:	d122      	bne.n	80037cc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	68db      	ldr	r3, [r3, #12]
 800378c:	f003 0302 	and.w	r3, r3, #2
 8003790:	2b02      	cmp	r3, #2
 8003792:	d11b      	bne.n	80037cc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f06f 0202 	mvn.w	r2, #2
 800379c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2201      	movs	r2, #1
 80037a2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	699b      	ldr	r3, [r3, #24]
 80037aa:	f003 0303 	and.w	r3, r3, #3
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d003      	beq.n	80037ba <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80037b2:	6878      	ldr	r0, [r7, #4]
 80037b4:	f000 fa81 	bl	8003cba <HAL_TIM_IC_CaptureCallback>
 80037b8:	e005      	b.n	80037c6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80037ba:	6878      	ldr	r0, [r7, #4]
 80037bc:	f000 fa73 	bl	8003ca6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037c0:	6878      	ldr	r0, [r7, #4]
 80037c2:	f000 fa84 	bl	8003cce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2200      	movs	r2, #0
 80037ca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	691b      	ldr	r3, [r3, #16]
 80037d2:	f003 0304 	and.w	r3, r3, #4
 80037d6:	2b04      	cmp	r3, #4
 80037d8:	d122      	bne.n	8003820 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	68db      	ldr	r3, [r3, #12]
 80037e0:	f003 0304 	and.w	r3, r3, #4
 80037e4:	2b04      	cmp	r3, #4
 80037e6:	d11b      	bne.n	8003820 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f06f 0204 	mvn.w	r2, #4
 80037f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2202      	movs	r2, #2
 80037f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	699b      	ldr	r3, [r3, #24]
 80037fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003802:	2b00      	cmp	r3, #0
 8003804:	d003      	beq.n	800380e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003806:	6878      	ldr	r0, [r7, #4]
 8003808:	f000 fa57 	bl	8003cba <HAL_TIM_IC_CaptureCallback>
 800380c:	e005      	b.n	800381a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800380e:	6878      	ldr	r0, [r7, #4]
 8003810:	f000 fa49 	bl	8003ca6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003814:	6878      	ldr	r0, [r7, #4]
 8003816:	f000 fa5a 	bl	8003cce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2200      	movs	r2, #0
 800381e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	691b      	ldr	r3, [r3, #16]
 8003826:	f003 0308 	and.w	r3, r3, #8
 800382a:	2b08      	cmp	r3, #8
 800382c:	d122      	bne.n	8003874 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	68db      	ldr	r3, [r3, #12]
 8003834:	f003 0308 	and.w	r3, r3, #8
 8003838:	2b08      	cmp	r3, #8
 800383a:	d11b      	bne.n	8003874 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f06f 0208 	mvn.w	r2, #8
 8003844:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2204      	movs	r2, #4
 800384a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	69db      	ldr	r3, [r3, #28]
 8003852:	f003 0303 	and.w	r3, r3, #3
 8003856:	2b00      	cmp	r3, #0
 8003858:	d003      	beq.n	8003862 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800385a:	6878      	ldr	r0, [r7, #4]
 800385c:	f000 fa2d 	bl	8003cba <HAL_TIM_IC_CaptureCallback>
 8003860:	e005      	b.n	800386e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003862:	6878      	ldr	r0, [r7, #4]
 8003864:	f000 fa1f 	bl	8003ca6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003868:	6878      	ldr	r0, [r7, #4]
 800386a:	f000 fa30 	bl	8003cce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2200      	movs	r2, #0
 8003872:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	691b      	ldr	r3, [r3, #16]
 800387a:	f003 0310 	and.w	r3, r3, #16
 800387e:	2b10      	cmp	r3, #16
 8003880:	d122      	bne.n	80038c8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	68db      	ldr	r3, [r3, #12]
 8003888:	f003 0310 	and.w	r3, r3, #16
 800388c:	2b10      	cmp	r3, #16
 800388e:	d11b      	bne.n	80038c8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f06f 0210 	mvn.w	r2, #16
 8003898:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2208      	movs	r2, #8
 800389e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	69db      	ldr	r3, [r3, #28]
 80038a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d003      	beq.n	80038b6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038ae:	6878      	ldr	r0, [r7, #4]
 80038b0:	f000 fa03 	bl	8003cba <HAL_TIM_IC_CaptureCallback>
 80038b4:	e005      	b.n	80038c2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038b6:	6878      	ldr	r0, [r7, #4]
 80038b8:	f000 f9f5 	bl	8003ca6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038bc:	6878      	ldr	r0, [r7, #4]
 80038be:	f000 fa06 	bl	8003cce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2200      	movs	r2, #0
 80038c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	691b      	ldr	r3, [r3, #16]
 80038ce:	f003 0301 	and.w	r3, r3, #1
 80038d2:	2b01      	cmp	r3, #1
 80038d4:	d10e      	bne.n	80038f4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	68db      	ldr	r3, [r3, #12]
 80038dc:	f003 0301 	and.w	r3, r3, #1
 80038e0:	2b01      	cmp	r3, #1
 80038e2:	d107      	bne.n	80038f4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f06f 0201 	mvn.w	r2, #1
 80038ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80038ee:	6878      	ldr	r0, [r7, #4]
 80038f0:	f000 f9cf 	bl	8003c92 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	691b      	ldr	r3, [r3, #16]
 80038fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038fe:	2b80      	cmp	r3, #128	; 0x80
 8003900:	d10e      	bne.n	8003920 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	68db      	ldr	r3, [r3, #12]
 8003908:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800390c:	2b80      	cmp	r3, #128	; 0x80
 800390e:	d107      	bne.n	8003920 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003918:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800391a:	6878      	ldr	r0, [r7, #4]
 800391c:	f000 fd82 	bl	8004424 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	691b      	ldr	r3, [r3, #16]
 8003926:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800392a:	2b40      	cmp	r3, #64	; 0x40
 800392c:	d10e      	bne.n	800394c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	68db      	ldr	r3, [r3, #12]
 8003934:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003938:	2b40      	cmp	r3, #64	; 0x40
 800393a:	d107      	bne.n	800394c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003944:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003946:	6878      	ldr	r0, [r7, #4]
 8003948:	f000 f9cb 	bl	8003ce2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	691b      	ldr	r3, [r3, #16]
 8003952:	f003 0320 	and.w	r3, r3, #32
 8003956:	2b20      	cmp	r3, #32
 8003958:	d10e      	bne.n	8003978 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	68db      	ldr	r3, [r3, #12]
 8003960:	f003 0320 	and.w	r3, r3, #32
 8003964:	2b20      	cmp	r3, #32
 8003966:	d107      	bne.n	8003978 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f06f 0220 	mvn.w	r2, #32
 8003970:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003972:	6878      	ldr	r0, [r7, #4]
 8003974:	f000 fd4c 	bl	8004410 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003978:	bf00      	nop
 800397a:	3708      	adds	r7, #8
 800397c:	46bd      	mov	sp, r7
 800397e:	bd80      	pop	{r7, pc}

08003980 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b086      	sub	sp, #24
 8003984:	af00      	add	r7, sp, #0
 8003986:	60f8      	str	r0, [r7, #12]
 8003988:	60b9      	str	r1, [r7, #8]
 800398a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800398c:	2300      	movs	r3, #0
 800398e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003996:	2b01      	cmp	r3, #1
 8003998:	d101      	bne.n	800399e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800399a:	2302      	movs	r3, #2
 800399c:	e0ae      	b.n	8003afc <HAL_TIM_PWM_ConfigChannel+0x17c>
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	2201      	movs	r2, #1
 80039a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2b0c      	cmp	r3, #12
 80039aa:	f200 809f 	bhi.w	8003aec <HAL_TIM_PWM_ConfigChannel+0x16c>
 80039ae:	a201      	add	r2, pc, #4	; (adr r2, 80039b4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80039b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039b4:	080039e9 	.word	0x080039e9
 80039b8:	08003aed 	.word	0x08003aed
 80039bc:	08003aed 	.word	0x08003aed
 80039c0:	08003aed 	.word	0x08003aed
 80039c4:	08003a29 	.word	0x08003a29
 80039c8:	08003aed 	.word	0x08003aed
 80039cc:	08003aed 	.word	0x08003aed
 80039d0:	08003aed 	.word	0x08003aed
 80039d4:	08003a6b 	.word	0x08003a6b
 80039d8:	08003aed 	.word	0x08003aed
 80039dc:	08003aed 	.word	0x08003aed
 80039e0:	08003aed 	.word	0x08003aed
 80039e4:	08003aab 	.word	0x08003aab
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	68b9      	ldr	r1, [r7, #8]
 80039ee:	4618      	mov	r0, r3
 80039f0:	f000 fa22 	bl	8003e38 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	699a      	ldr	r2, [r3, #24]
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f042 0208 	orr.w	r2, r2, #8
 8003a02:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	699a      	ldr	r2, [r3, #24]
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f022 0204 	bic.w	r2, r2, #4
 8003a12:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	6999      	ldr	r1, [r3, #24]
 8003a1a:	68bb      	ldr	r3, [r7, #8]
 8003a1c:	691a      	ldr	r2, [r3, #16]
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	430a      	orrs	r2, r1
 8003a24:	619a      	str	r2, [r3, #24]
      break;
 8003a26:	e064      	b.n	8003af2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	68b9      	ldr	r1, [r7, #8]
 8003a2e:	4618      	mov	r0, r3
 8003a30:	f000 fa72 	bl	8003f18 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	699a      	ldr	r2, [r3, #24]
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a42:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	699a      	ldr	r2, [r3, #24]
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a52:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	6999      	ldr	r1, [r3, #24]
 8003a5a:	68bb      	ldr	r3, [r7, #8]
 8003a5c:	691b      	ldr	r3, [r3, #16]
 8003a5e:	021a      	lsls	r2, r3, #8
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	430a      	orrs	r2, r1
 8003a66:	619a      	str	r2, [r3, #24]
      break;
 8003a68:	e043      	b.n	8003af2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	68b9      	ldr	r1, [r7, #8]
 8003a70:	4618      	mov	r0, r3
 8003a72:	f000 fac7 	bl	8004004 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	69da      	ldr	r2, [r3, #28]
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f042 0208 	orr.w	r2, r2, #8
 8003a84:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	69da      	ldr	r2, [r3, #28]
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f022 0204 	bic.w	r2, r2, #4
 8003a94:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	69d9      	ldr	r1, [r3, #28]
 8003a9c:	68bb      	ldr	r3, [r7, #8]
 8003a9e:	691a      	ldr	r2, [r3, #16]
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	430a      	orrs	r2, r1
 8003aa6:	61da      	str	r2, [r3, #28]
      break;
 8003aa8:	e023      	b.n	8003af2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	68b9      	ldr	r1, [r7, #8]
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	f000 fb1b 	bl	80040ec <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	69da      	ldr	r2, [r3, #28]
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003ac4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	69da      	ldr	r2, [r3, #28]
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ad4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	69d9      	ldr	r1, [r3, #28]
 8003adc:	68bb      	ldr	r3, [r7, #8]
 8003ade:	691b      	ldr	r3, [r3, #16]
 8003ae0:	021a      	lsls	r2, r3, #8
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	430a      	orrs	r2, r1
 8003ae8:	61da      	str	r2, [r3, #28]
      break;
 8003aea:	e002      	b.n	8003af2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003aec:	2301      	movs	r3, #1
 8003aee:	75fb      	strb	r3, [r7, #23]
      break;
 8003af0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	2200      	movs	r2, #0
 8003af6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003afa:	7dfb      	ldrb	r3, [r7, #23]
}
 8003afc:	4618      	mov	r0, r3
 8003afe:	3718      	adds	r7, #24
 8003b00:	46bd      	mov	sp, r7
 8003b02:	bd80      	pop	{r7, pc}

08003b04 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b084      	sub	sp, #16
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
 8003b0c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003b0e:	2300      	movs	r3, #0
 8003b10:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b18:	2b01      	cmp	r3, #1
 8003b1a:	d101      	bne.n	8003b20 <HAL_TIM_ConfigClockSource+0x1c>
 8003b1c:	2302      	movs	r3, #2
 8003b1e:	e0b4      	b.n	8003c8a <HAL_TIM_ConfigClockSource+0x186>
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2201      	movs	r2, #1
 8003b24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2202      	movs	r2, #2
 8003b2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	689b      	ldr	r3, [r3, #8]
 8003b36:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003b38:	68bb      	ldr	r3, [r7, #8]
 8003b3a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003b3e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b40:	68bb      	ldr	r3, [r7, #8]
 8003b42:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003b46:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	68ba      	ldr	r2, [r7, #8]
 8003b4e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b58:	d03e      	beq.n	8003bd8 <HAL_TIM_ConfigClockSource+0xd4>
 8003b5a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b5e:	f200 8087 	bhi.w	8003c70 <HAL_TIM_ConfigClockSource+0x16c>
 8003b62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b66:	f000 8086 	beq.w	8003c76 <HAL_TIM_ConfigClockSource+0x172>
 8003b6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b6e:	d87f      	bhi.n	8003c70 <HAL_TIM_ConfigClockSource+0x16c>
 8003b70:	2b70      	cmp	r3, #112	; 0x70
 8003b72:	d01a      	beq.n	8003baa <HAL_TIM_ConfigClockSource+0xa6>
 8003b74:	2b70      	cmp	r3, #112	; 0x70
 8003b76:	d87b      	bhi.n	8003c70 <HAL_TIM_ConfigClockSource+0x16c>
 8003b78:	2b60      	cmp	r3, #96	; 0x60
 8003b7a:	d050      	beq.n	8003c1e <HAL_TIM_ConfigClockSource+0x11a>
 8003b7c:	2b60      	cmp	r3, #96	; 0x60
 8003b7e:	d877      	bhi.n	8003c70 <HAL_TIM_ConfigClockSource+0x16c>
 8003b80:	2b50      	cmp	r3, #80	; 0x50
 8003b82:	d03c      	beq.n	8003bfe <HAL_TIM_ConfigClockSource+0xfa>
 8003b84:	2b50      	cmp	r3, #80	; 0x50
 8003b86:	d873      	bhi.n	8003c70 <HAL_TIM_ConfigClockSource+0x16c>
 8003b88:	2b40      	cmp	r3, #64	; 0x40
 8003b8a:	d058      	beq.n	8003c3e <HAL_TIM_ConfigClockSource+0x13a>
 8003b8c:	2b40      	cmp	r3, #64	; 0x40
 8003b8e:	d86f      	bhi.n	8003c70 <HAL_TIM_ConfigClockSource+0x16c>
 8003b90:	2b30      	cmp	r3, #48	; 0x30
 8003b92:	d064      	beq.n	8003c5e <HAL_TIM_ConfigClockSource+0x15a>
 8003b94:	2b30      	cmp	r3, #48	; 0x30
 8003b96:	d86b      	bhi.n	8003c70 <HAL_TIM_ConfigClockSource+0x16c>
 8003b98:	2b20      	cmp	r3, #32
 8003b9a:	d060      	beq.n	8003c5e <HAL_TIM_ConfigClockSource+0x15a>
 8003b9c:	2b20      	cmp	r3, #32
 8003b9e:	d867      	bhi.n	8003c70 <HAL_TIM_ConfigClockSource+0x16c>
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d05c      	beq.n	8003c5e <HAL_TIM_ConfigClockSource+0x15a>
 8003ba4:	2b10      	cmp	r3, #16
 8003ba6:	d05a      	beq.n	8003c5e <HAL_TIM_ConfigClockSource+0x15a>
 8003ba8:	e062      	b.n	8003c70 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6818      	ldr	r0, [r3, #0]
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	6899      	ldr	r1, [r3, #8]
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	685a      	ldr	r2, [r3, #4]
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	68db      	ldr	r3, [r3, #12]
 8003bba:	f000 fb67 	bl	800428c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	689b      	ldr	r3, [r3, #8]
 8003bc4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003bc6:	68bb      	ldr	r3, [r7, #8]
 8003bc8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003bcc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	68ba      	ldr	r2, [r7, #8]
 8003bd4:	609a      	str	r2, [r3, #8]
      break;
 8003bd6:	e04f      	b.n	8003c78 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6818      	ldr	r0, [r3, #0]
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	6899      	ldr	r1, [r3, #8]
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	685a      	ldr	r2, [r3, #4]
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	68db      	ldr	r3, [r3, #12]
 8003be8:	f000 fb50 	bl	800428c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	689a      	ldr	r2, [r3, #8]
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003bfa:	609a      	str	r2, [r3, #8]
      break;
 8003bfc:	e03c      	b.n	8003c78 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6818      	ldr	r0, [r3, #0]
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	6859      	ldr	r1, [r3, #4]
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	68db      	ldr	r3, [r3, #12]
 8003c0a:	461a      	mov	r2, r3
 8003c0c:	f000 fac4 	bl	8004198 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	2150      	movs	r1, #80	; 0x50
 8003c16:	4618      	mov	r0, r3
 8003c18:	f000 fb1d 	bl	8004256 <TIM_ITRx_SetConfig>
      break;
 8003c1c:	e02c      	b.n	8003c78 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6818      	ldr	r0, [r3, #0]
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	6859      	ldr	r1, [r3, #4]
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	68db      	ldr	r3, [r3, #12]
 8003c2a:	461a      	mov	r2, r3
 8003c2c:	f000 fae3 	bl	80041f6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	2160      	movs	r1, #96	; 0x60
 8003c36:	4618      	mov	r0, r3
 8003c38:	f000 fb0d 	bl	8004256 <TIM_ITRx_SetConfig>
      break;
 8003c3c:	e01c      	b.n	8003c78 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6818      	ldr	r0, [r3, #0]
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	6859      	ldr	r1, [r3, #4]
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	68db      	ldr	r3, [r3, #12]
 8003c4a:	461a      	mov	r2, r3
 8003c4c:	f000 faa4 	bl	8004198 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	2140      	movs	r1, #64	; 0x40
 8003c56:	4618      	mov	r0, r3
 8003c58:	f000 fafd 	bl	8004256 <TIM_ITRx_SetConfig>
      break;
 8003c5c:	e00c      	b.n	8003c78 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681a      	ldr	r2, [r3, #0]
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4619      	mov	r1, r3
 8003c68:	4610      	mov	r0, r2
 8003c6a:	f000 faf4 	bl	8004256 <TIM_ITRx_SetConfig>
      break;
 8003c6e:	e003      	b.n	8003c78 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003c70:	2301      	movs	r3, #1
 8003c72:	73fb      	strb	r3, [r7, #15]
      break;
 8003c74:	e000      	b.n	8003c78 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003c76:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2201      	movs	r2, #1
 8003c7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2200      	movs	r2, #0
 8003c84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003c88:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	3710      	adds	r7, #16
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	bd80      	pop	{r7, pc}

08003c92 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003c92:	b480      	push	{r7}
 8003c94:	b083      	sub	sp, #12
 8003c96:	af00      	add	r7, sp, #0
 8003c98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003c9a:	bf00      	nop
 8003c9c:	370c      	adds	r7, #12
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca4:	4770      	bx	lr

08003ca6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003ca6:	b480      	push	{r7}
 8003ca8:	b083      	sub	sp, #12
 8003caa:	af00      	add	r7, sp, #0
 8003cac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003cae:	bf00      	nop
 8003cb0:	370c      	adds	r7, #12
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb8:	4770      	bx	lr

08003cba <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003cba:	b480      	push	{r7}
 8003cbc:	b083      	sub	sp, #12
 8003cbe:	af00      	add	r7, sp, #0
 8003cc0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003cc2:	bf00      	nop
 8003cc4:	370c      	adds	r7, #12
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ccc:	4770      	bx	lr

08003cce <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003cce:	b480      	push	{r7}
 8003cd0:	b083      	sub	sp, #12
 8003cd2:	af00      	add	r7, sp, #0
 8003cd4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003cd6:	bf00      	nop
 8003cd8:	370c      	adds	r7, #12
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce0:	4770      	bx	lr

08003ce2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003ce2:	b480      	push	{r7}
 8003ce4:	b083      	sub	sp, #12
 8003ce6:	af00      	add	r7, sp, #0
 8003ce8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003cea:	bf00      	nop
 8003cec:	370c      	adds	r7, #12
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf4:	4770      	bx	lr
	...

08003cf8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	b085      	sub	sp, #20
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
 8003d00:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	4a40      	ldr	r2, [pc, #256]	; (8003e0c <TIM_Base_SetConfig+0x114>)
 8003d0c:	4293      	cmp	r3, r2
 8003d0e:	d013      	beq.n	8003d38 <TIM_Base_SetConfig+0x40>
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d16:	d00f      	beq.n	8003d38 <TIM_Base_SetConfig+0x40>
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	4a3d      	ldr	r2, [pc, #244]	; (8003e10 <TIM_Base_SetConfig+0x118>)
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d00b      	beq.n	8003d38 <TIM_Base_SetConfig+0x40>
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	4a3c      	ldr	r2, [pc, #240]	; (8003e14 <TIM_Base_SetConfig+0x11c>)
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d007      	beq.n	8003d38 <TIM_Base_SetConfig+0x40>
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	4a3b      	ldr	r2, [pc, #236]	; (8003e18 <TIM_Base_SetConfig+0x120>)
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d003      	beq.n	8003d38 <TIM_Base_SetConfig+0x40>
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	4a3a      	ldr	r2, [pc, #232]	; (8003e1c <TIM_Base_SetConfig+0x124>)
 8003d34:	4293      	cmp	r3, r2
 8003d36:	d108      	bne.n	8003d4a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d3e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	685b      	ldr	r3, [r3, #4]
 8003d44:	68fa      	ldr	r2, [r7, #12]
 8003d46:	4313      	orrs	r3, r2
 8003d48:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	4a2f      	ldr	r2, [pc, #188]	; (8003e0c <TIM_Base_SetConfig+0x114>)
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d02b      	beq.n	8003daa <TIM_Base_SetConfig+0xb2>
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d58:	d027      	beq.n	8003daa <TIM_Base_SetConfig+0xb2>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	4a2c      	ldr	r2, [pc, #176]	; (8003e10 <TIM_Base_SetConfig+0x118>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d023      	beq.n	8003daa <TIM_Base_SetConfig+0xb2>
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	4a2b      	ldr	r2, [pc, #172]	; (8003e14 <TIM_Base_SetConfig+0x11c>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d01f      	beq.n	8003daa <TIM_Base_SetConfig+0xb2>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	4a2a      	ldr	r2, [pc, #168]	; (8003e18 <TIM_Base_SetConfig+0x120>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d01b      	beq.n	8003daa <TIM_Base_SetConfig+0xb2>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	4a29      	ldr	r2, [pc, #164]	; (8003e1c <TIM_Base_SetConfig+0x124>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d017      	beq.n	8003daa <TIM_Base_SetConfig+0xb2>
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	4a28      	ldr	r2, [pc, #160]	; (8003e20 <TIM_Base_SetConfig+0x128>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d013      	beq.n	8003daa <TIM_Base_SetConfig+0xb2>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	4a27      	ldr	r2, [pc, #156]	; (8003e24 <TIM_Base_SetConfig+0x12c>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d00f      	beq.n	8003daa <TIM_Base_SetConfig+0xb2>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	4a26      	ldr	r2, [pc, #152]	; (8003e28 <TIM_Base_SetConfig+0x130>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d00b      	beq.n	8003daa <TIM_Base_SetConfig+0xb2>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	4a25      	ldr	r2, [pc, #148]	; (8003e2c <TIM_Base_SetConfig+0x134>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d007      	beq.n	8003daa <TIM_Base_SetConfig+0xb2>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	4a24      	ldr	r2, [pc, #144]	; (8003e30 <TIM_Base_SetConfig+0x138>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d003      	beq.n	8003daa <TIM_Base_SetConfig+0xb2>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	4a23      	ldr	r2, [pc, #140]	; (8003e34 <TIM_Base_SetConfig+0x13c>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d108      	bne.n	8003dbc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003db0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	68db      	ldr	r3, [r3, #12]
 8003db6:	68fa      	ldr	r2, [r7, #12]
 8003db8:	4313      	orrs	r3, r2
 8003dba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	695b      	ldr	r3, [r3, #20]
 8003dc6:	4313      	orrs	r3, r2
 8003dc8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	68fa      	ldr	r2, [r7, #12]
 8003dce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	689a      	ldr	r2, [r3, #8]
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	681a      	ldr	r2, [r3, #0]
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	4a0a      	ldr	r2, [pc, #40]	; (8003e0c <TIM_Base_SetConfig+0x114>)
 8003de4:	4293      	cmp	r3, r2
 8003de6:	d003      	beq.n	8003df0 <TIM_Base_SetConfig+0xf8>
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	4a0c      	ldr	r2, [pc, #48]	; (8003e1c <TIM_Base_SetConfig+0x124>)
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d103      	bne.n	8003df8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	691a      	ldr	r2, [r3, #16]
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2201      	movs	r2, #1
 8003dfc:	615a      	str	r2, [r3, #20]
}
 8003dfe:	bf00      	nop
 8003e00:	3714      	adds	r7, #20
 8003e02:	46bd      	mov	sp, r7
 8003e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e08:	4770      	bx	lr
 8003e0a:	bf00      	nop
 8003e0c:	40010000 	.word	0x40010000
 8003e10:	40000400 	.word	0x40000400
 8003e14:	40000800 	.word	0x40000800
 8003e18:	40000c00 	.word	0x40000c00
 8003e1c:	40010400 	.word	0x40010400
 8003e20:	40014000 	.word	0x40014000
 8003e24:	40014400 	.word	0x40014400
 8003e28:	40014800 	.word	0x40014800
 8003e2c:	40001800 	.word	0x40001800
 8003e30:	40001c00 	.word	0x40001c00
 8003e34:	40002000 	.word	0x40002000

08003e38 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003e38:	b480      	push	{r7}
 8003e3a:	b087      	sub	sp, #28
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
 8003e40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6a1b      	ldr	r3, [r3, #32]
 8003e46:	f023 0201 	bic.w	r2, r3, #1
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6a1b      	ldr	r3, [r3, #32]
 8003e52:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	685b      	ldr	r3, [r3, #4]
 8003e58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	699b      	ldr	r3, [r3, #24]
 8003e5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	f023 0303 	bic.w	r3, r3, #3
 8003e6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	68fa      	ldr	r2, [r7, #12]
 8003e76:	4313      	orrs	r3, r2
 8003e78:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003e7a:	697b      	ldr	r3, [r7, #20]
 8003e7c:	f023 0302 	bic.w	r3, r3, #2
 8003e80:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	689b      	ldr	r3, [r3, #8]
 8003e86:	697a      	ldr	r2, [r7, #20]
 8003e88:	4313      	orrs	r3, r2
 8003e8a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	4a20      	ldr	r2, [pc, #128]	; (8003f10 <TIM_OC1_SetConfig+0xd8>)
 8003e90:	4293      	cmp	r3, r2
 8003e92:	d003      	beq.n	8003e9c <TIM_OC1_SetConfig+0x64>
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	4a1f      	ldr	r2, [pc, #124]	; (8003f14 <TIM_OC1_SetConfig+0xdc>)
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d10c      	bne.n	8003eb6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003e9c:	697b      	ldr	r3, [r7, #20]
 8003e9e:	f023 0308 	bic.w	r3, r3, #8
 8003ea2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	68db      	ldr	r3, [r3, #12]
 8003ea8:	697a      	ldr	r2, [r7, #20]
 8003eaa:	4313      	orrs	r3, r2
 8003eac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003eae:	697b      	ldr	r3, [r7, #20]
 8003eb0:	f023 0304 	bic.w	r3, r3, #4
 8003eb4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	4a15      	ldr	r2, [pc, #84]	; (8003f10 <TIM_OC1_SetConfig+0xd8>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d003      	beq.n	8003ec6 <TIM_OC1_SetConfig+0x8e>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	4a14      	ldr	r2, [pc, #80]	; (8003f14 <TIM_OC1_SetConfig+0xdc>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d111      	bne.n	8003eea <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003ec6:	693b      	ldr	r3, [r7, #16]
 8003ec8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003ecc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003ece:	693b      	ldr	r3, [r7, #16]
 8003ed0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003ed4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	695b      	ldr	r3, [r3, #20]
 8003eda:	693a      	ldr	r2, [r7, #16]
 8003edc:	4313      	orrs	r3, r2
 8003ede:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	699b      	ldr	r3, [r3, #24]
 8003ee4:	693a      	ldr	r2, [r7, #16]
 8003ee6:	4313      	orrs	r3, r2
 8003ee8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	693a      	ldr	r2, [r7, #16]
 8003eee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	68fa      	ldr	r2, [r7, #12]
 8003ef4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	685a      	ldr	r2, [r3, #4]
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	697a      	ldr	r2, [r7, #20]
 8003f02:	621a      	str	r2, [r3, #32]
}
 8003f04:	bf00      	nop
 8003f06:	371c      	adds	r7, #28
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0e:	4770      	bx	lr
 8003f10:	40010000 	.word	0x40010000
 8003f14:	40010400 	.word	0x40010400

08003f18 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003f18:	b480      	push	{r7}
 8003f1a:	b087      	sub	sp, #28
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
 8003f20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6a1b      	ldr	r3, [r3, #32]
 8003f26:	f023 0210 	bic.w	r2, r3, #16
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6a1b      	ldr	r3, [r3, #32]
 8003f32:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	685b      	ldr	r3, [r3, #4]
 8003f38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	699b      	ldr	r3, [r3, #24]
 8003f3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f4e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	021b      	lsls	r3, r3, #8
 8003f56:	68fa      	ldr	r2, [r7, #12]
 8003f58:	4313      	orrs	r3, r2
 8003f5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003f5c:	697b      	ldr	r3, [r7, #20]
 8003f5e:	f023 0320 	bic.w	r3, r3, #32
 8003f62:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	689b      	ldr	r3, [r3, #8]
 8003f68:	011b      	lsls	r3, r3, #4
 8003f6a:	697a      	ldr	r2, [r7, #20]
 8003f6c:	4313      	orrs	r3, r2
 8003f6e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	4a22      	ldr	r2, [pc, #136]	; (8003ffc <TIM_OC2_SetConfig+0xe4>)
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d003      	beq.n	8003f80 <TIM_OC2_SetConfig+0x68>
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	4a21      	ldr	r2, [pc, #132]	; (8004000 <TIM_OC2_SetConfig+0xe8>)
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	d10d      	bne.n	8003f9c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003f80:	697b      	ldr	r3, [r7, #20]
 8003f82:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f86:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	68db      	ldr	r3, [r3, #12]
 8003f8c:	011b      	lsls	r3, r3, #4
 8003f8e:	697a      	ldr	r2, [r7, #20]
 8003f90:	4313      	orrs	r3, r2
 8003f92:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003f94:	697b      	ldr	r3, [r7, #20]
 8003f96:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f9a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	4a17      	ldr	r2, [pc, #92]	; (8003ffc <TIM_OC2_SetConfig+0xe4>)
 8003fa0:	4293      	cmp	r3, r2
 8003fa2:	d003      	beq.n	8003fac <TIM_OC2_SetConfig+0x94>
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	4a16      	ldr	r2, [pc, #88]	; (8004000 <TIM_OC2_SetConfig+0xe8>)
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d113      	bne.n	8003fd4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003fac:	693b      	ldr	r3, [r7, #16]
 8003fae:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003fb2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003fb4:	693b      	ldr	r3, [r7, #16]
 8003fb6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003fba:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	695b      	ldr	r3, [r3, #20]
 8003fc0:	009b      	lsls	r3, r3, #2
 8003fc2:	693a      	ldr	r2, [r7, #16]
 8003fc4:	4313      	orrs	r3, r2
 8003fc6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	699b      	ldr	r3, [r3, #24]
 8003fcc:	009b      	lsls	r3, r3, #2
 8003fce:	693a      	ldr	r2, [r7, #16]
 8003fd0:	4313      	orrs	r3, r2
 8003fd2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	693a      	ldr	r2, [r7, #16]
 8003fd8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	68fa      	ldr	r2, [r7, #12]
 8003fde:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	685a      	ldr	r2, [r3, #4]
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	697a      	ldr	r2, [r7, #20]
 8003fec:	621a      	str	r2, [r3, #32]
}
 8003fee:	bf00      	nop
 8003ff0:	371c      	adds	r7, #28
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff8:	4770      	bx	lr
 8003ffa:	bf00      	nop
 8003ffc:	40010000 	.word	0x40010000
 8004000:	40010400 	.word	0x40010400

08004004 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004004:	b480      	push	{r7}
 8004006:	b087      	sub	sp, #28
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
 800400c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6a1b      	ldr	r3, [r3, #32]
 8004012:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6a1b      	ldr	r3, [r3, #32]
 800401e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	685b      	ldr	r3, [r3, #4]
 8004024:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	69db      	ldr	r3, [r3, #28]
 800402a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004032:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	f023 0303 	bic.w	r3, r3, #3
 800403a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	68fa      	ldr	r2, [r7, #12]
 8004042:	4313      	orrs	r3, r2
 8004044:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004046:	697b      	ldr	r3, [r7, #20]
 8004048:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800404c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	689b      	ldr	r3, [r3, #8]
 8004052:	021b      	lsls	r3, r3, #8
 8004054:	697a      	ldr	r2, [r7, #20]
 8004056:	4313      	orrs	r3, r2
 8004058:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	4a21      	ldr	r2, [pc, #132]	; (80040e4 <TIM_OC3_SetConfig+0xe0>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d003      	beq.n	800406a <TIM_OC3_SetConfig+0x66>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	4a20      	ldr	r2, [pc, #128]	; (80040e8 <TIM_OC3_SetConfig+0xe4>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d10d      	bne.n	8004086 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800406a:	697b      	ldr	r3, [r7, #20]
 800406c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004070:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	68db      	ldr	r3, [r3, #12]
 8004076:	021b      	lsls	r3, r3, #8
 8004078:	697a      	ldr	r2, [r7, #20]
 800407a:	4313      	orrs	r3, r2
 800407c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800407e:	697b      	ldr	r3, [r7, #20]
 8004080:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004084:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	4a16      	ldr	r2, [pc, #88]	; (80040e4 <TIM_OC3_SetConfig+0xe0>)
 800408a:	4293      	cmp	r3, r2
 800408c:	d003      	beq.n	8004096 <TIM_OC3_SetConfig+0x92>
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	4a15      	ldr	r2, [pc, #84]	; (80040e8 <TIM_OC3_SetConfig+0xe4>)
 8004092:	4293      	cmp	r3, r2
 8004094:	d113      	bne.n	80040be <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004096:	693b      	ldr	r3, [r7, #16]
 8004098:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800409c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800409e:	693b      	ldr	r3, [r7, #16]
 80040a0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80040a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	695b      	ldr	r3, [r3, #20]
 80040aa:	011b      	lsls	r3, r3, #4
 80040ac:	693a      	ldr	r2, [r7, #16]
 80040ae:	4313      	orrs	r3, r2
 80040b0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	699b      	ldr	r3, [r3, #24]
 80040b6:	011b      	lsls	r3, r3, #4
 80040b8:	693a      	ldr	r2, [r7, #16]
 80040ba:	4313      	orrs	r3, r2
 80040bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	693a      	ldr	r2, [r7, #16]
 80040c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	68fa      	ldr	r2, [r7, #12]
 80040c8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	685a      	ldr	r2, [r3, #4]
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	697a      	ldr	r2, [r7, #20]
 80040d6:	621a      	str	r2, [r3, #32]
}
 80040d8:	bf00      	nop
 80040da:	371c      	adds	r7, #28
 80040dc:	46bd      	mov	sp, r7
 80040de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e2:	4770      	bx	lr
 80040e4:	40010000 	.word	0x40010000
 80040e8:	40010400 	.word	0x40010400

080040ec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80040ec:	b480      	push	{r7}
 80040ee:	b087      	sub	sp, #28
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
 80040f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6a1b      	ldr	r3, [r3, #32]
 80040fa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6a1b      	ldr	r3, [r3, #32]
 8004106:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	685b      	ldr	r3, [r3, #4]
 800410c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	69db      	ldr	r3, [r3, #28]
 8004112:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800411a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004122:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	021b      	lsls	r3, r3, #8
 800412a:	68fa      	ldr	r2, [r7, #12]
 800412c:	4313      	orrs	r3, r2
 800412e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004130:	693b      	ldr	r3, [r7, #16]
 8004132:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004136:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	689b      	ldr	r3, [r3, #8]
 800413c:	031b      	lsls	r3, r3, #12
 800413e:	693a      	ldr	r2, [r7, #16]
 8004140:	4313      	orrs	r3, r2
 8004142:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	4a12      	ldr	r2, [pc, #72]	; (8004190 <TIM_OC4_SetConfig+0xa4>)
 8004148:	4293      	cmp	r3, r2
 800414a:	d003      	beq.n	8004154 <TIM_OC4_SetConfig+0x68>
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	4a11      	ldr	r2, [pc, #68]	; (8004194 <TIM_OC4_SetConfig+0xa8>)
 8004150:	4293      	cmp	r3, r2
 8004152:	d109      	bne.n	8004168 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004154:	697b      	ldr	r3, [r7, #20]
 8004156:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800415a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	695b      	ldr	r3, [r3, #20]
 8004160:	019b      	lsls	r3, r3, #6
 8004162:	697a      	ldr	r2, [r7, #20]
 8004164:	4313      	orrs	r3, r2
 8004166:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	697a      	ldr	r2, [r7, #20]
 800416c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	68fa      	ldr	r2, [r7, #12]
 8004172:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	685a      	ldr	r2, [r3, #4]
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	693a      	ldr	r2, [r7, #16]
 8004180:	621a      	str	r2, [r3, #32]
}
 8004182:	bf00      	nop
 8004184:	371c      	adds	r7, #28
 8004186:	46bd      	mov	sp, r7
 8004188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418c:	4770      	bx	lr
 800418e:	bf00      	nop
 8004190:	40010000 	.word	0x40010000
 8004194:	40010400 	.word	0x40010400

08004198 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004198:	b480      	push	{r7}
 800419a:	b087      	sub	sp, #28
 800419c:	af00      	add	r7, sp, #0
 800419e:	60f8      	str	r0, [r7, #12]
 80041a0:	60b9      	str	r1, [r7, #8]
 80041a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	6a1b      	ldr	r3, [r3, #32]
 80041a8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	6a1b      	ldr	r3, [r3, #32]
 80041ae:	f023 0201 	bic.w	r2, r3, #1
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	699b      	ldr	r3, [r3, #24]
 80041ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80041bc:	693b      	ldr	r3, [r7, #16]
 80041be:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80041c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	011b      	lsls	r3, r3, #4
 80041c8:	693a      	ldr	r2, [r7, #16]
 80041ca:	4313      	orrs	r3, r2
 80041cc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80041ce:	697b      	ldr	r3, [r7, #20]
 80041d0:	f023 030a 	bic.w	r3, r3, #10
 80041d4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80041d6:	697a      	ldr	r2, [r7, #20]
 80041d8:	68bb      	ldr	r3, [r7, #8]
 80041da:	4313      	orrs	r3, r2
 80041dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	693a      	ldr	r2, [r7, #16]
 80041e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	697a      	ldr	r2, [r7, #20]
 80041e8:	621a      	str	r2, [r3, #32]
}
 80041ea:	bf00      	nop
 80041ec:	371c      	adds	r7, #28
 80041ee:	46bd      	mov	sp, r7
 80041f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f4:	4770      	bx	lr

080041f6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80041f6:	b480      	push	{r7}
 80041f8:	b087      	sub	sp, #28
 80041fa:	af00      	add	r7, sp, #0
 80041fc:	60f8      	str	r0, [r7, #12]
 80041fe:	60b9      	str	r1, [r7, #8]
 8004200:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	6a1b      	ldr	r3, [r3, #32]
 8004206:	f023 0210 	bic.w	r2, r3, #16
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	699b      	ldr	r3, [r3, #24]
 8004212:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	6a1b      	ldr	r3, [r3, #32]
 8004218:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800421a:	697b      	ldr	r3, [r7, #20]
 800421c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004220:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	031b      	lsls	r3, r3, #12
 8004226:	697a      	ldr	r2, [r7, #20]
 8004228:	4313      	orrs	r3, r2
 800422a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800422c:	693b      	ldr	r3, [r7, #16]
 800422e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004232:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004234:	68bb      	ldr	r3, [r7, #8]
 8004236:	011b      	lsls	r3, r3, #4
 8004238:	693a      	ldr	r2, [r7, #16]
 800423a:	4313      	orrs	r3, r2
 800423c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	697a      	ldr	r2, [r7, #20]
 8004242:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	693a      	ldr	r2, [r7, #16]
 8004248:	621a      	str	r2, [r3, #32]
}
 800424a:	bf00      	nop
 800424c:	371c      	adds	r7, #28
 800424e:	46bd      	mov	sp, r7
 8004250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004254:	4770      	bx	lr

08004256 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004256:	b480      	push	{r7}
 8004258:	b085      	sub	sp, #20
 800425a:	af00      	add	r7, sp, #0
 800425c:	6078      	str	r0, [r7, #4]
 800425e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	689b      	ldr	r3, [r3, #8]
 8004264:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800426c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800426e:	683a      	ldr	r2, [r7, #0]
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	4313      	orrs	r3, r2
 8004274:	f043 0307 	orr.w	r3, r3, #7
 8004278:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	68fa      	ldr	r2, [r7, #12]
 800427e:	609a      	str	r2, [r3, #8]
}
 8004280:	bf00      	nop
 8004282:	3714      	adds	r7, #20
 8004284:	46bd      	mov	sp, r7
 8004286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428a:	4770      	bx	lr

0800428c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800428c:	b480      	push	{r7}
 800428e:	b087      	sub	sp, #28
 8004290:	af00      	add	r7, sp, #0
 8004292:	60f8      	str	r0, [r7, #12]
 8004294:	60b9      	str	r1, [r7, #8]
 8004296:	607a      	str	r2, [r7, #4]
 8004298:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	689b      	ldr	r3, [r3, #8]
 800429e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80042a0:	697b      	ldr	r3, [r7, #20]
 80042a2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80042a6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	021a      	lsls	r2, r3, #8
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	431a      	orrs	r2, r3
 80042b0:	68bb      	ldr	r3, [r7, #8]
 80042b2:	4313      	orrs	r3, r2
 80042b4:	697a      	ldr	r2, [r7, #20]
 80042b6:	4313      	orrs	r3, r2
 80042b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	697a      	ldr	r2, [r7, #20]
 80042be:	609a      	str	r2, [r3, #8]
}
 80042c0:	bf00      	nop
 80042c2:	371c      	adds	r7, #28
 80042c4:	46bd      	mov	sp, r7
 80042c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ca:	4770      	bx	lr

080042cc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80042cc:	b480      	push	{r7}
 80042ce:	b087      	sub	sp, #28
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	60f8      	str	r0, [r7, #12]
 80042d4:	60b9      	str	r1, [r7, #8]
 80042d6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80042d8:	68bb      	ldr	r3, [r7, #8]
 80042da:	f003 031f 	and.w	r3, r3, #31
 80042de:	2201      	movs	r2, #1
 80042e0:	fa02 f303 	lsl.w	r3, r2, r3
 80042e4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	6a1a      	ldr	r2, [r3, #32]
 80042ea:	697b      	ldr	r3, [r7, #20]
 80042ec:	43db      	mvns	r3, r3
 80042ee:	401a      	ands	r2, r3
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	6a1a      	ldr	r2, [r3, #32]
 80042f8:	68bb      	ldr	r3, [r7, #8]
 80042fa:	f003 031f 	and.w	r3, r3, #31
 80042fe:	6879      	ldr	r1, [r7, #4]
 8004300:	fa01 f303 	lsl.w	r3, r1, r3
 8004304:	431a      	orrs	r2, r3
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	621a      	str	r2, [r3, #32]
}
 800430a:	bf00      	nop
 800430c:	371c      	adds	r7, #28
 800430e:	46bd      	mov	sp, r7
 8004310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004314:	4770      	bx	lr
	...

08004318 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004318:	b480      	push	{r7}
 800431a:	b085      	sub	sp, #20
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
 8004320:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004328:	2b01      	cmp	r3, #1
 800432a:	d101      	bne.n	8004330 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800432c:	2302      	movs	r3, #2
 800432e:	e05a      	b.n	80043e6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2201      	movs	r2, #1
 8004334:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2202      	movs	r2, #2
 800433c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	685b      	ldr	r3, [r3, #4]
 8004346:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	689b      	ldr	r3, [r3, #8]
 800434e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004356:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	68fa      	ldr	r2, [r7, #12]
 800435e:	4313      	orrs	r3, r2
 8004360:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	68fa      	ldr	r2, [r7, #12]
 8004368:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	4a21      	ldr	r2, [pc, #132]	; (80043f4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004370:	4293      	cmp	r3, r2
 8004372:	d022      	beq.n	80043ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800437c:	d01d      	beq.n	80043ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	4a1d      	ldr	r2, [pc, #116]	; (80043f8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004384:	4293      	cmp	r3, r2
 8004386:	d018      	beq.n	80043ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	4a1b      	ldr	r2, [pc, #108]	; (80043fc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d013      	beq.n	80043ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	4a1a      	ldr	r2, [pc, #104]	; (8004400 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004398:	4293      	cmp	r3, r2
 800439a:	d00e      	beq.n	80043ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	4a18      	ldr	r2, [pc, #96]	; (8004404 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d009      	beq.n	80043ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	4a17      	ldr	r2, [pc, #92]	; (8004408 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80043ac:	4293      	cmp	r3, r2
 80043ae:	d004      	beq.n	80043ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	4a15      	ldr	r2, [pc, #84]	; (800440c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d10c      	bne.n	80043d4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80043ba:	68bb      	ldr	r3, [r7, #8]
 80043bc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80043c0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	685b      	ldr	r3, [r3, #4]
 80043c6:	68ba      	ldr	r2, [r7, #8]
 80043c8:	4313      	orrs	r3, r2
 80043ca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	68ba      	ldr	r2, [r7, #8]
 80043d2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2201      	movs	r2, #1
 80043d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2200      	movs	r2, #0
 80043e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80043e4:	2300      	movs	r3, #0
}
 80043e6:	4618      	mov	r0, r3
 80043e8:	3714      	adds	r7, #20
 80043ea:	46bd      	mov	sp, r7
 80043ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f0:	4770      	bx	lr
 80043f2:	bf00      	nop
 80043f4:	40010000 	.word	0x40010000
 80043f8:	40000400 	.word	0x40000400
 80043fc:	40000800 	.word	0x40000800
 8004400:	40000c00 	.word	0x40000c00
 8004404:	40010400 	.word	0x40010400
 8004408:	40014000 	.word	0x40014000
 800440c:	40001800 	.word	0x40001800

08004410 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004410:	b480      	push	{r7}
 8004412:	b083      	sub	sp, #12
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004418:	bf00      	nop
 800441a:	370c      	adds	r7, #12
 800441c:	46bd      	mov	sp, r7
 800441e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004422:	4770      	bx	lr

08004424 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004424:	b480      	push	{r7}
 8004426:	b083      	sub	sp, #12
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800442c:	bf00      	nop
 800442e:	370c      	adds	r7, #12
 8004430:	46bd      	mov	sp, r7
 8004432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004436:	4770      	bx	lr

08004438 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004438:	b480      	push	{r7}
 800443a:	b087      	sub	sp, #28
 800443c:	af00      	add	r7, sp, #0
 800443e:	60f8      	str	r0, [r7, #12]
 8004440:	60b9      	str	r1, [r7, #8]
 8004442:	4613      	mov	r3, r2
 8004444:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004446:	79fb      	ldrb	r3, [r7, #7]
 8004448:	2b02      	cmp	r3, #2
 800444a:	d165      	bne.n	8004518 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800444c:	68bb      	ldr	r3, [r7, #8]
 800444e:	4a41      	ldr	r2, [pc, #260]	; (8004554 <USB_SetTurnaroundTime+0x11c>)
 8004450:	4293      	cmp	r3, r2
 8004452:	d906      	bls.n	8004462 <USB_SetTurnaroundTime+0x2a>
 8004454:	68bb      	ldr	r3, [r7, #8]
 8004456:	4a40      	ldr	r2, [pc, #256]	; (8004558 <USB_SetTurnaroundTime+0x120>)
 8004458:	4293      	cmp	r3, r2
 800445a:	d202      	bcs.n	8004462 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800445c:	230f      	movs	r3, #15
 800445e:	617b      	str	r3, [r7, #20]
 8004460:	e062      	b.n	8004528 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004462:	68bb      	ldr	r3, [r7, #8]
 8004464:	4a3c      	ldr	r2, [pc, #240]	; (8004558 <USB_SetTurnaroundTime+0x120>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d306      	bcc.n	8004478 <USB_SetTurnaroundTime+0x40>
 800446a:	68bb      	ldr	r3, [r7, #8]
 800446c:	4a3b      	ldr	r2, [pc, #236]	; (800455c <USB_SetTurnaroundTime+0x124>)
 800446e:	4293      	cmp	r3, r2
 8004470:	d202      	bcs.n	8004478 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004472:	230e      	movs	r3, #14
 8004474:	617b      	str	r3, [r7, #20]
 8004476:	e057      	b.n	8004528 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004478:	68bb      	ldr	r3, [r7, #8]
 800447a:	4a38      	ldr	r2, [pc, #224]	; (800455c <USB_SetTurnaroundTime+0x124>)
 800447c:	4293      	cmp	r3, r2
 800447e:	d306      	bcc.n	800448e <USB_SetTurnaroundTime+0x56>
 8004480:	68bb      	ldr	r3, [r7, #8]
 8004482:	4a37      	ldr	r2, [pc, #220]	; (8004560 <USB_SetTurnaroundTime+0x128>)
 8004484:	4293      	cmp	r3, r2
 8004486:	d202      	bcs.n	800448e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004488:	230d      	movs	r3, #13
 800448a:	617b      	str	r3, [r7, #20]
 800448c:	e04c      	b.n	8004528 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800448e:	68bb      	ldr	r3, [r7, #8]
 8004490:	4a33      	ldr	r2, [pc, #204]	; (8004560 <USB_SetTurnaroundTime+0x128>)
 8004492:	4293      	cmp	r3, r2
 8004494:	d306      	bcc.n	80044a4 <USB_SetTurnaroundTime+0x6c>
 8004496:	68bb      	ldr	r3, [r7, #8]
 8004498:	4a32      	ldr	r2, [pc, #200]	; (8004564 <USB_SetTurnaroundTime+0x12c>)
 800449a:	4293      	cmp	r3, r2
 800449c:	d802      	bhi.n	80044a4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800449e:	230c      	movs	r3, #12
 80044a0:	617b      	str	r3, [r7, #20]
 80044a2:	e041      	b.n	8004528 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80044a4:	68bb      	ldr	r3, [r7, #8]
 80044a6:	4a2f      	ldr	r2, [pc, #188]	; (8004564 <USB_SetTurnaroundTime+0x12c>)
 80044a8:	4293      	cmp	r3, r2
 80044aa:	d906      	bls.n	80044ba <USB_SetTurnaroundTime+0x82>
 80044ac:	68bb      	ldr	r3, [r7, #8]
 80044ae:	4a2e      	ldr	r2, [pc, #184]	; (8004568 <USB_SetTurnaroundTime+0x130>)
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d802      	bhi.n	80044ba <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80044b4:	230b      	movs	r3, #11
 80044b6:	617b      	str	r3, [r7, #20]
 80044b8:	e036      	b.n	8004528 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80044ba:	68bb      	ldr	r3, [r7, #8]
 80044bc:	4a2a      	ldr	r2, [pc, #168]	; (8004568 <USB_SetTurnaroundTime+0x130>)
 80044be:	4293      	cmp	r3, r2
 80044c0:	d906      	bls.n	80044d0 <USB_SetTurnaroundTime+0x98>
 80044c2:	68bb      	ldr	r3, [r7, #8]
 80044c4:	4a29      	ldr	r2, [pc, #164]	; (800456c <USB_SetTurnaroundTime+0x134>)
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d802      	bhi.n	80044d0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80044ca:	230a      	movs	r3, #10
 80044cc:	617b      	str	r3, [r7, #20]
 80044ce:	e02b      	b.n	8004528 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80044d0:	68bb      	ldr	r3, [r7, #8]
 80044d2:	4a26      	ldr	r2, [pc, #152]	; (800456c <USB_SetTurnaroundTime+0x134>)
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d906      	bls.n	80044e6 <USB_SetTurnaroundTime+0xae>
 80044d8:	68bb      	ldr	r3, [r7, #8]
 80044da:	4a25      	ldr	r2, [pc, #148]	; (8004570 <USB_SetTurnaroundTime+0x138>)
 80044dc:	4293      	cmp	r3, r2
 80044de:	d202      	bcs.n	80044e6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80044e0:	2309      	movs	r3, #9
 80044e2:	617b      	str	r3, [r7, #20]
 80044e4:	e020      	b.n	8004528 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80044e6:	68bb      	ldr	r3, [r7, #8]
 80044e8:	4a21      	ldr	r2, [pc, #132]	; (8004570 <USB_SetTurnaroundTime+0x138>)
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d306      	bcc.n	80044fc <USB_SetTurnaroundTime+0xc4>
 80044ee:	68bb      	ldr	r3, [r7, #8]
 80044f0:	4a20      	ldr	r2, [pc, #128]	; (8004574 <USB_SetTurnaroundTime+0x13c>)
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d802      	bhi.n	80044fc <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80044f6:	2308      	movs	r3, #8
 80044f8:	617b      	str	r3, [r7, #20]
 80044fa:	e015      	b.n	8004528 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80044fc:	68bb      	ldr	r3, [r7, #8]
 80044fe:	4a1d      	ldr	r2, [pc, #116]	; (8004574 <USB_SetTurnaroundTime+0x13c>)
 8004500:	4293      	cmp	r3, r2
 8004502:	d906      	bls.n	8004512 <USB_SetTurnaroundTime+0xda>
 8004504:	68bb      	ldr	r3, [r7, #8]
 8004506:	4a1c      	ldr	r2, [pc, #112]	; (8004578 <USB_SetTurnaroundTime+0x140>)
 8004508:	4293      	cmp	r3, r2
 800450a:	d202      	bcs.n	8004512 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800450c:	2307      	movs	r3, #7
 800450e:	617b      	str	r3, [r7, #20]
 8004510:	e00a      	b.n	8004528 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004512:	2306      	movs	r3, #6
 8004514:	617b      	str	r3, [r7, #20]
 8004516:	e007      	b.n	8004528 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004518:	79fb      	ldrb	r3, [r7, #7]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d102      	bne.n	8004524 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800451e:	2309      	movs	r3, #9
 8004520:	617b      	str	r3, [r7, #20]
 8004522:	e001      	b.n	8004528 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004524:	2309      	movs	r3, #9
 8004526:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	68db      	ldr	r3, [r3, #12]
 800452c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	68da      	ldr	r2, [r3, #12]
 8004538:	697b      	ldr	r3, [r7, #20]
 800453a:	029b      	lsls	r3, r3, #10
 800453c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004540:	431a      	orrs	r2, r3
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004546:	2300      	movs	r3, #0
}
 8004548:	4618      	mov	r0, r3
 800454a:	371c      	adds	r7, #28
 800454c:	46bd      	mov	sp, r7
 800454e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004552:	4770      	bx	lr
 8004554:	00d8acbf 	.word	0x00d8acbf
 8004558:	00e4e1c0 	.word	0x00e4e1c0
 800455c:	00f42400 	.word	0x00f42400
 8004560:	01067380 	.word	0x01067380
 8004564:	011a499f 	.word	0x011a499f
 8004568:	01312cff 	.word	0x01312cff
 800456c:	014ca43f 	.word	0x014ca43f
 8004570:	016e3600 	.word	0x016e3600
 8004574:	01a6ab1f 	.word	0x01a6ab1f
 8004578:	01e84800 	.word	0x01e84800

0800457c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800457c:	b480      	push	{r7}
 800457e:	b085      	sub	sp, #20
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
 8004584:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004586:	2300      	movs	r3, #0
 8004588:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	3301      	adds	r3, #1
 800458e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	4a13      	ldr	r2, [pc, #76]	; (80045e0 <USB_FlushTxFifo+0x64>)
 8004594:	4293      	cmp	r3, r2
 8004596:	d901      	bls.n	800459c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004598:	2303      	movs	r3, #3
 800459a:	e01b      	b.n	80045d4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	691b      	ldr	r3, [r3, #16]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	daf2      	bge.n	800458a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80045a4:	2300      	movs	r3, #0
 80045a6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	019b      	lsls	r3, r3, #6
 80045ac:	f043 0220 	orr.w	r2, r3, #32
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	3301      	adds	r3, #1
 80045b8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	4a08      	ldr	r2, [pc, #32]	; (80045e0 <USB_FlushTxFifo+0x64>)
 80045be:	4293      	cmp	r3, r2
 80045c0:	d901      	bls.n	80045c6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80045c2:	2303      	movs	r3, #3
 80045c4:	e006      	b.n	80045d4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	691b      	ldr	r3, [r3, #16]
 80045ca:	f003 0320 	and.w	r3, r3, #32
 80045ce:	2b20      	cmp	r3, #32
 80045d0:	d0f0      	beq.n	80045b4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80045d2:	2300      	movs	r3, #0
}
 80045d4:	4618      	mov	r0, r3
 80045d6:	3714      	adds	r7, #20
 80045d8:	46bd      	mov	sp, r7
 80045da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045de:	4770      	bx	lr
 80045e0:	00030d40 	.word	0x00030d40

080045e4 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80045e4:	b480      	push	{r7}
 80045e6:	b087      	sub	sp, #28
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80045f0:	693b      	ldr	r3, [r7, #16]
 80045f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045f6:	689b      	ldr	r3, [r3, #8]
 80045f8:	f003 0306 	and.w	r3, r3, #6
 80045fc:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	2b00      	cmp	r3, #0
 8004602:	d102      	bne.n	800460a <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004604:	2300      	movs	r3, #0
 8004606:	75fb      	strb	r3, [r7, #23]
 8004608:	e00a      	b.n	8004620 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	2b02      	cmp	r3, #2
 800460e:	d002      	beq.n	8004616 <USB_GetDevSpeed+0x32>
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	2b06      	cmp	r3, #6
 8004614:	d102      	bne.n	800461c <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004616:	2302      	movs	r3, #2
 8004618:	75fb      	strb	r3, [r7, #23]
 800461a:	e001      	b.n	8004620 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800461c:	230f      	movs	r3, #15
 800461e:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004620:	7dfb      	ldrb	r3, [r7, #23]
}
 8004622:	4618      	mov	r0, r3
 8004624:	371c      	adds	r7, #28
 8004626:	46bd      	mov	sp, r7
 8004628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462c:	4770      	bx	lr

0800462e <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800462e:	b480      	push	{r7}
 8004630:	b085      	sub	sp, #20
 8004632:	af00      	add	r7, sp, #0
 8004634:	6078      	str	r0, [r7, #4]
 8004636:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	781b      	ldrb	r3, [r3, #0]
 8004640:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	785b      	ldrb	r3, [r3, #1]
 8004646:	2b01      	cmp	r3, #1
 8004648:	d13a      	bne.n	80046c0 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004650:	69da      	ldr	r2, [r3, #28]
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	781b      	ldrb	r3, [r3, #0]
 8004656:	f003 030f 	and.w	r3, r3, #15
 800465a:	2101      	movs	r1, #1
 800465c:	fa01 f303 	lsl.w	r3, r1, r3
 8004660:	b29b      	uxth	r3, r3
 8004662:	68f9      	ldr	r1, [r7, #12]
 8004664:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004668:	4313      	orrs	r3, r2
 800466a:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800466c:	68bb      	ldr	r3, [r7, #8]
 800466e:	015a      	lsls	r2, r3, #5
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	4413      	add	r3, r2
 8004674:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800467e:	2b00      	cmp	r3, #0
 8004680:	d155      	bne.n	800472e <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004682:	68bb      	ldr	r3, [r7, #8]
 8004684:	015a      	lsls	r2, r3, #5
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	4413      	add	r3, r2
 800468a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800468e:	681a      	ldr	r2, [r3, #0]
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	68db      	ldr	r3, [r3, #12]
 8004694:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	791b      	ldrb	r3, [r3, #4]
 800469c:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800469e:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80046a0:	68bb      	ldr	r3, [r7, #8]
 80046a2:	059b      	lsls	r3, r3, #22
 80046a4:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80046a6:	4313      	orrs	r3, r2
 80046a8:	68ba      	ldr	r2, [r7, #8]
 80046aa:	0151      	lsls	r1, r2, #5
 80046ac:	68fa      	ldr	r2, [r7, #12]
 80046ae:	440a      	add	r2, r1
 80046b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80046b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80046bc:	6013      	str	r3, [r2, #0]
 80046be:	e036      	b.n	800472e <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046c6:	69da      	ldr	r2, [r3, #28]
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	781b      	ldrb	r3, [r3, #0]
 80046cc:	f003 030f 	and.w	r3, r3, #15
 80046d0:	2101      	movs	r1, #1
 80046d2:	fa01 f303 	lsl.w	r3, r1, r3
 80046d6:	041b      	lsls	r3, r3, #16
 80046d8:	68f9      	ldr	r1, [r7, #12]
 80046da:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80046de:	4313      	orrs	r3, r2
 80046e0:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80046e2:	68bb      	ldr	r3, [r7, #8]
 80046e4:	015a      	lsls	r2, r3, #5
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	4413      	add	r3, r2
 80046ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d11a      	bne.n	800472e <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80046f8:	68bb      	ldr	r3, [r7, #8]
 80046fa:	015a      	lsls	r2, r3, #5
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	4413      	add	r3, r2
 8004700:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004704:	681a      	ldr	r2, [r3, #0]
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	68db      	ldr	r3, [r3, #12]
 800470a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	791b      	ldrb	r3, [r3, #4]
 8004712:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004714:	430b      	orrs	r3, r1
 8004716:	4313      	orrs	r3, r2
 8004718:	68ba      	ldr	r2, [r7, #8]
 800471a:	0151      	lsls	r1, r2, #5
 800471c:	68fa      	ldr	r2, [r7, #12]
 800471e:	440a      	add	r2, r1
 8004720:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004724:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004728:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800472c:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800472e:	2300      	movs	r3, #0
}
 8004730:	4618      	mov	r0, r3
 8004732:	3714      	adds	r7, #20
 8004734:	46bd      	mov	sp, r7
 8004736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473a:	4770      	bx	lr

0800473c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800473c:	b580      	push	{r7, lr}
 800473e:	b08a      	sub	sp, #40	; 0x28
 8004740:	af02      	add	r7, sp, #8
 8004742:	60f8      	str	r0, [r7, #12]
 8004744:	60b9      	str	r1, [r7, #8]
 8004746:	4613      	mov	r3, r2
 8004748:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800474e:	68bb      	ldr	r3, [r7, #8]
 8004750:	781b      	ldrb	r3, [r3, #0]
 8004752:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004754:	68bb      	ldr	r3, [r7, #8]
 8004756:	785b      	ldrb	r3, [r3, #1]
 8004758:	2b01      	cmp	r3, #1
 800475a:	f040 815c 	bne.w	8004a16 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800475e:	68bb      	ldr	r3, [r7, #8]
 8004760:	699b      	ldr	r3, [r3, #24]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d132      	bne.n	80047cc <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004766:	69bb      	ldr	r3, [r7, #24]
 8004768:	015a      	lsls	r2, r3, #5
 800476a:	69fb      	ldr	r3, [r7, #28]
 800476c:	4413      	add	r3, r2
 800476e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004772:	691b      	ldr	r3, [r3, #16]
 8004774:	69ba      	ldr	r2, [r7, #24]
 8004776:	0151      	lsls	r1, r2, #5
 8004778:	69fa      	ldr	r2, [r7, #28]
 800477a:	440a      	add	r2, r1
 800477c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004780:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004784:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004788:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800478a:	69bb      	ldr	r3, [r7, #24]
 800478c:	015a      	lsls	r2, r3, #5
 800478e:	69fb      	ldr	r3, [r7, #28]
 8004790:	4413      	add	r3, r2
 8004792:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004796:	691b      	ldr	r3, [r3, #16]
 8004798:	69ba      	ldr	r2, [r7, #24]
 800479a:	0151      	lsls	r1, r2, #5
 800479c:	69fa      	ldr	r2, [r7, #28]
 800479e:	440a      	add	r2, r1
 80047a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80047a4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80047a8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80047aa:	69bb      	ldr	r3, [r7, #24]
 80047ac:	015a      	lsls	r2, r3, #5
 80047ae:	69fb      	ldr	r3, [r7, #28]
 80047b0:	4413      	add	r3, r2
 80047b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047b6:	691b      	ldr	r3, [r3, #16]
 80047b8:	69ba      	ldr	r2, [r7, #24]
 80047ba:	0151      	lsls	r1, r2, #5
 80047bc:	69fa      	ldr	r2, [r7, #28]
 80047be:	440a      	add	r2, r1
 80047c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80047c4:	0cdb      	lsrs	r3, r3, #19
 80047c6:	04db      	lsls	r3, r3, #19
 80047c8:	6113      	str	r3, [r2, #16]
 80047ca:	e074      	b.n	80048b6 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80047cc:	69bb      	ldr	r3, [r7, #24]
 80047ce:	015a      	lsls	r2, r3, #5
 80047d0:	69fb      	ldr	r3, [r7, #28]
 80047d2:	4413      	add	r3, r2
 80047d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047d8:	691b      	ldr	r3, [r3, #16]
 80047da:	69ba      	ldr	r2, [r7, #24]
 80047dc:	0151      	lsls	r1, r2, #5
 80047de:	69fa      	ldr	r2, [r7, #28]
 80047e0:	440a      	add	r2, r1
 80047e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80047e6:	0cdb      	lsrs	r3, r3, #19
 80047e8:	04db      	lsls	r3, r3, #19
 80047ea:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80047ec:	69bb      	ldr	r3, [r7, #24]
 80047ee:	015a      	lsls	r2, r3, #5
 80047f0:	69fb      	ldr	r3, [r7, #28]
 80047f2:	4413      	add	r3, r2
 80047f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047f8:	691b      	ldr	r3, [r3, #16]
 80047fa:	69ba      	ldr	r2, [r7, #24]
 80047fc:	0151      	lsls	r1, r2, #5
 80047fe:	69fa      	ldr	r2, [r7, #28]
 8004800:	440a      	add	r2, r1
 8004802:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004806:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800480a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800480e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004810:	69bb      	ldr	r3, [r7, #24]
 8004812:	015a      	lsls	r2, r3, #5
 8004814:	69fb      	ldr	r3, [r7, #28]
 8004816:	4413      	add	r3, r2
 8004818:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800481c:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800481e:	68bb      	ldr	r3, [r7, #8]
 8004820:	6999      	ldr	r1, [r3, #24]
 8004822:	68bb      	ldr	r3, [r7, #8]
 8004824:	68db      	ldr	r3, [r3, #12]
 8004826:	440b      	add	r3, r1
 8004828:	1e59      	subs	r1, r3, #1
 800482a:	68bb      	ldr	r3, [r7, #8]
 800482c:	68db      	ldr	r3, [r3, #12]
 800482e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004832:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004834:	4b9d      	ldr	r3, [pc, #628]	; (8004aac <USB_EPStartXfer+0x370>)
 8004836:	400b      	ands	r3, r1
 8004838:	69b9      	ldr	r1, [r7, #24]
 800483a:	0148      	lsls	r0, r1, #5
 800483c:	69f9      	ldr	r1, [r7, #28]
 800483e:	4401      	add	r1, r0
 8004840:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004844:	4313      	orrs	r3, r2
 8004846:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004848:	69bb      	ldr	r3, [r7, #24]
 800484a:	015a      	lsls	r2, r3, #5
 800484c:	69fb      	ldr	r3, [r7, #28]
 800484e:	4413      	add	r3, r2
 8004850:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004854:	691a      	ldr	r2, [r3, #16]
 8004856:	68bb      	ldr	r3, [r7, #8]
 8004858:	699b      	ldr	r3, [r3, #24]
 800485a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800485e:	69b9      	ldr	r1, [r7, #24]
 8004860:	0148      	lsls	r0, r1, #5
 8004862:	69f9      	ldr	r1, [r7, #28]
 8004864:	4401      	add	r1, r0
 8004866:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800486a:	4313      	orrs	r3, r2
 800486c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800486e:	68bb      	ldr	r3, [r7, #8]
 8004870:	791b      	ldrb	r3, [r3, #4]
 8004872:	2b01      	cmp	r3, #1
 8004874:	d11f      	bne.n	80048b6 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004876:	69bb      	ldr	r3, [r7, #24]
 8004878:	015a      	lsls	r2, r3, #5
 800487a:	69fb      	ldr	r3, [r7, #28]
 800487c:	4413      	add	r3, r2
 800487e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004882:	691b      	ldr	r3, [r3, #16]
 8004884:	69ba      	ldr	r2, [r7, #24]
 8004886:	0151      	lsls	r1, r2, #5
 8004888:	69fa      	ldr	r2, [r7, #28]
 800488a:	440a      	add	r2, r1
 800488c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004890:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8004894:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8004896:	69bb      	ldr	r3, [r7, #24]
 8004898:	015a      	lsls	r2, r3, #5
 800489a:	69fb      	ldr	r3, [r7, #28]
 800489c:	4413      	add	r3, r2
 800489e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048a2:	691b      	ldr	r3, [r3, #16]
 80048a4:	69ba      	ldr	r2, [r7, #24]
 80048a6:	0151      	lsls	r1, r2, #5
 80048a8:	69fa      	ldr	r2, [r7, #28]
 80048aa:	440a      	add	r2, r1
 80048ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80048b0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80048b4:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80048b6:	79fb      	ldrb	r3, [r7, #7]
 80048b8:	2b01      	cmp	r3, #1
 80048ba:	d14b      	bne.n	8004954 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80048bc:	68bb      	ldr	r3, [r7, #8]
 80048be:	695b      	ldr	r3, [r3, #20]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d009      	beq.n	80048d8 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80048c4:	69bb      	ldr	r3, [r7, #24]
 80048c6:	015a      	lsls	r2, r3, #5
 80048c8:	69fb      	ldr	r3, [r7, #28]
 80048ca:	4413      	add	r3, r2
 80048cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048d0:	461a      	mov	r2, r3
 80048d2:	68bb      	ldr	r3, [r7, #8]
 80048d4:	695b      	ldr	r3, [r3, #20]
 80048d6:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80048d8:	68bb      	ldr	r3, [r7, #8]
 80048da:	791b      	ldrb	r3, [r3, #4]
 80048dc:	2b01      	cmp	r3, #1
 80048de:	d128      	bne.n	8004932 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80048e0:	69fb      	ldr	r3, [r7, #28]
 80048e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048e6:	689b      	ldr	r3, [r3, #8]
 80048e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d110      	bne.n	8004912 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80048f0:	69bb      	ldr	r3, [r7, #24]
 80048f2:	015a      	lsls	r2, r3, #5
 80048f4:	69fb      	ldr	r3, [r7, #28]
 80048f6:	4413      	add	r3, r2
 80048f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	69ba      	ldr	r2, [r7, #24]
 8004900:	0151      	lsls	r1, r2, #5
 8004902:	69fa      	ldr	r2, [r7, #28]
 8004904:	440a      	add	r2, r1
 8004906:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800490a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800490e:	6013      	str	r3, [r2, #0]
 8004910:	e00f      	b.n	8004932 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004912:	69bb      	ldr	r3, [r7, #24]
 8004914:	015a      	lsls	r2, r3, #5
 8004916:	69fb      	ldr	r3, [r7, #28]
 8004918:	4413      	add	r3, r2
 800491a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	69ba      	ldr	r2, [r7, #24]
 8004922:	0151      	lsls	r1, r2, #5
 8004924:	69fa      	ldr	r2, [r7, #28]
 8004926:	440a      	add	r2, r1
 8004928:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800492c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004930:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004932:	69bb      	ldr	r3, [r7, #24]
 8004934:	015a      	lsls	r2, r3, #5
 8004936:	69fb      	ldr	r3, [r7, #28]
 8004938:	4413      	add	r3, r2
 800493a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	69ba      	ldr	r2, [r7, #24]
 8004942:	0151      	lsls	r1, r2, #5
 8004944:	69fa      	ldr	r2, [r7, #28]
 8004946:	440a      	add	r2, r1
 8004948:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800494c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004950:	6013      	str	r3, [r2, #0]
 8004952:	e133      	b.n	8004bbc <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004954:	69bb      	ldr	r3, [r7, #24]
 8004956:	015a      	lsls	r2, r3, #5
 8004958:	69fb      	ldr	r3, [r7, #28]
 800495a:	4413      	add	r3, r2
 800495c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	69ba      	ldr	r2, [r7, #24]
 8004964:	0151      	lsls	r1, r2, #5
 8004966:	69fa      	ldr	r2, [r7, #28]
 8004968:	440a      	add	r2, r1
 800496a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800496e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004972:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004974:	68bb      	ldr	r3, [r7, #8]
 8004976:	791b      	ldrb	r3, [r3, #4]
 8004978:	2b01      	cmp	r3, #1
 800497a:	d015      	beq.n	80049a8 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800497c:	68bb      	ldr	r3, [r7, #8]
 800497e:	699b      	ldr	r3, [r3, #24]
 8004980:	2b00      	cmp	r3, #0
 8004982:	f000 811b 	beq.w	8004bbc <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004986:	69fb      	ldr	r3, [r7, #28]
 8004988:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800498c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800498e:	68bb      	ldr	r3, [r7, #8]
 8004990:	781b      	ldrb	r3, [r3, #0]
 8004992:	f003 030f 	and.w	r3, r3, #15
 8004996:	2101      	movs	r1, #1
 8004998:	fa01 f303 	lsl.w	r3, r1, r3
 800499c:	69f9      	ldr	r1, [r7, #28]
 800499e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80049a2:	4313      	orrs	r3, r2
 80049a4:	634b      	str	r3, [r1, #52]	; 0x34
 80049a6:	e109      	b.n	8004bbc <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80049a8:	69fb      	ldr	r3, [r7, #28]
 80049aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049ae:	689b      	ldr	r3, [r3, #8]
 80049b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d110      	bne.n	80049da <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80049b8:	69bb      	ldr	r3, [r7, #24]
 80049ba:	015a      	lsls	r2, r3, #5
 80049bc:	69fb      	ldr	r3, [r7, #28]
 80049be:	4413      	add	r3, r2
 80049c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	69ba      	ldr	r2, [r7, #24]
 80049c8:	0151      	lsls	r1, r2, #5
 80049ca:	69fa      	ldr	r2, [r7, #28]
 80049cc:	440a      	add	r2, r1
 80049ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80049d2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80049d6:	6013      	str	r3, [r2, #0]
 80049d8:	e00f      	b.n	80049fa <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80049da:	69bb      	ldr	r3, [r7, #24]
 80049dc:	015a      	lsls	r2, r3, #5
 80049de:	69fb      	ldr	r3, [r7, #28]
 80049e0:	4413      	add	r3, r2
 80049e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	69ba      	ldr	r2, [r7, #24]
 80049ea:	0151      	lsls	r1, r2, #5
 80049ec:	69fa      	ldr	r2, [r7, #28]
 80049ee:	440a      	add	r2, r1
 80049f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80049f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049f8:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80049fa:	68bb      	ldr	r3, [r7, #8]
 80049fc:	6919      	ldr	r1, [r3, #16]
 80049fe:	68bb      	ldr	r3, [r7, #8]
 8004a00:	781a      	ldrb	r2, [r3, #0]
 8004a02:	68bb      	ldr	r3, [r7, #8]
 8004a04:	699b      	ldr	r3, [r3, #24]
 8004a06:	b298      	uxth	r0, r3
 8004a08:	79fb      	ldrb	r3, [r7, #7]
 8004a0a:	9300      	str	r3, [sp, #0]
 8004a0c:	4603      	mov	r3, r0
 8004a0e:	68f8      	ldr	r0, [r7, #12]
 8004a10:	f000 fade 	bl	8004fd0 <USB_WritePacket>
 8004a14:	e0d2      	b.n	8004bbc <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004a16:	69bb      	ldr	r3, [r7, #24]
 8004a18:	015a      	lsls	r2, r3, #5
 8004a1a:	69fb      	ldr	r3, [r7, #28]
 8004a1c:	4413      	add	r3, r2
 8004a1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a22:	691b      	ldr	r3, [r3, #16]
 8004a24:	69ba      	ldr	r2, [r7, #24]
 8004a26:	0151      	lsls	r1, r2, #5
 8004a28:	69fa      	ldr	r2, [r7, #28]
 8004a2a:	440a      	add	r2, r1
 8004a2c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a30:	0cdb      	lsrs	r3, r3, #19
 8004a32:	04db      	lsls	r3, r3, #19
 8004a34:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004a36:	69bb      	ldr	r3, [r7, #24]
 8004a38:	015a      	lsls	r2, r3, #5
 8004a3a:	69fb      	ldr	r3, [r7, #28]
 8004a3c:	4413      	add	r3, r2
 8004a3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a42:	691b      	ldr	r3, [r3, #16]
 8004a44:	69ba      	ldr	r2, [r7, #24]
 8004a46:	0151      	lsls	r1, r2, #5
 8004a48:	69fa      	ldr	r2, [r7, #28]
 8004a4a:	440a      	add	r2, r1
 8004a4c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a50:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004a54:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004a58:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8004a5a:	68bb      	ldr	r3, [r7, #8]
 8004a5c:	699b      	ldr	r3, [r3, #24]
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d126      	bne.n	8004ab0 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004a62:	69bb      	ldr	r3, [r7, #24]
 8004a64:	015a      	lsls	r2, r3, #5
 8004a66:	69fb      	ldr	r3, [r7, #28]
 8004a68:	4413      	add	r3, r2
 8004a6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a6e:	691a      	ldr	r2, [r3, #16]
 8004a70:	68bb      	ldr	r3, [r7, #8]
 8004a72:	68db      	ldr	r3, [r3, #12]
 8004a74:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a78:	69b9      	ldr	r1, [r7, #24]
 8004a7a:	0148      	lsls	r0, r1, #5
 8004a7c:	69f9      	ldr	r1, [r7, #28]
 8004a7e:	4401      	add	r1, r0
 8004a80:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004a84:	4313      	orrs	r3, r2
 8004a86:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004a88:	69bb      	ldr	r3, [r7, #24]
 8004a8a:	015a      	lsls	r2, r3, #5
 8004a8c:	69fb      	ldr	r3, [r7, #28]
 8004a8e:	4413      	add	r3, r2
 8004a90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a94:	691b      	ldr	r3, [r3, #16]
 8004a96:	69ba      	ldr	r2, [r7, #24]
 8004a98:	0151      	lsls	r1, r2, #5
 8004a9a:	69fa      	ldr	r2, [r7, #28]
 8004a9c:	440a      	add	r2, r1
 8004a9e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004aa2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004aa6:	6113      	str	r3, [r2, #16]
 8004aa8:	e03a      	b.n	8004b20 <USB_EPStartXfer+0x3e4>
 8004aaa:	bf00      	nop
 8004aac:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004ab0:	68bb      	ldr	r3, [r7, #8]
 8004ab2:	699a      	ldr	r2, [r3, #24]
 8004ab4:	68bb      	ldr	r3, [r7, #8]
 8004ab6:	68db      	ldr	r3, [r3, #12]
 8004ab8:	4413      	add	r3, r2
 8004aba:	1e5a      	subs	r2, r3, #1
 8004abc:	68bb      	ldr	r3, [r7, #8]
 8004abe:	68db      	ldr	r3, [r3, #12]
 8004ac0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ac4:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8004ac6:	68bb      	ldr	r3, [r7, #8]
 8004ac8:	68db      	ldr	r3, [r3, #12]
 8004aca:	8afa      	ldrh	r2, [r7, #22]
 8004acc:	fb03 f202 	mul.w	r2, r3, r2
 8004ad0:	68bb      	ldr	r3, [r7, #8]
 8004ad2:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004ad4:	69bb      	ldr	r3, [r7, #24]
 8004ad6:	015a      	lsls	r2, r3, #5
 8004ad8:	69fb      	ldr	r3, [r7, #28]
 8004ada:	4413      	add	r3, r2
 8004adc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ae0:	691a      	ldr	r2, [r3, #16]
 8004ae2:	8afb      	ldrh	r3, [r7, #22]
 8004ae4:	04d9      	lsls	r1, r3, #19
 8004ae6:	4b38      	ldr	r3, [pc, #224]	; (8004bc8 <USB_EPStartXfer+0x48c>)
 8004ae8:	400b      	ands	r3, r1
 8004aea:	69b9      	ldr	r1, [r7, #24]
 8004aec:	0148      	lsls	r0, r1, #5
 8004aee:	69f9      	ldr	r1, [r7, #28]
 8004af0:	4401      	add	r1, r0
 8004af2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004af6:	4313      	orrs	r3, r2
 8004af8:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8004afa:	69bb      	ldr	r3, [r7, #24]
 8004afc:	015a      	lsls	r2, r3, #5
 8004afe:	69fb      	ldr	r3, [r7, #28]
 8004b00:	4413      	add	r3, r2
 8004b02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b06:	691a      	ldr	r2, [r3, #16]
 8004b08:	68bb      	ldr	r3, [r7, #8]
 8004b0a:	69db      	ldr	r3, [r3, #28]
 8004b0c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b10:	69b9      	ldr	r1, [r7, #24]
 8004b12:	0148      	lsls	r0, r1, #5
 8004b14:	69f9      	ldr	r1, [r7, #28]
 8004b16:	4401      	add	r1, r0
 8004b18:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004b1c:	4313      	orrs	r3, r2
 8004b1e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004b20:	79fb      	ldrb	r3, [r7, #7]
 8004b22:	2b01      	cmp	r3, #1
 8004b24:	d10d      	bne.n	8004b42 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004b26:	68bb      	ldr	r3, [r7, #8]
 8004b28:	691b      	ldr	r3, [r3, #16]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d009      	beq.n	8004b42 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004b2e:	68bb      	ldr	r3, [r7, #8]
 8004b30:	6919      	ldr	r1, [r3, #16]
 8004b32:	69bb      	ldr	r3, [r7, #24]
 8004b34:	015a      	lsls	r2, r3, #5
 8004b36:	69fb      	ldr	r3, [r7, #28]
 8004b38:	4413      	add	r3, r2
 8004b3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b3e:	460a      	mov	r2, r1
 8004b40:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8004b42:	68bb      	ldr	r3, [r7, #8]
 8004b44:	791b      	ldrb	r3, [r3, #4]
 8004b46:	2b01      	cmp	r3, #1
 8004b48:	d128      	bne.n	8004b9c <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004b4a:	69fb      	ldr	r3, [r7, #28]
 8004b4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b50:	689b      	ldr	r3, [r3, #8]
 8004b52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d110      	bne.n	8004b7c <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004b5a:	69bb      	ldr	r3, [r7, #24]
 8004b5c:	015a      	lsls	r2, r3, #5
 8004b5e:	69fb      	ldr	r3, [r7, #28]
 8004b60:	4413      	add	r3, r2
 8004b62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	69ba      	ldr	r2, [r7, #24]
 8004b6a:	0151      	lsls	r1, r2, #5
 8004b6c:	69fa      	ldr	r2, [r7, #28]
 8004b6e:	440a      	add	r2, r1
 8004b70:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004b74:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004b78:	6013      	str	r3, [r2, #0]
 8004b7a:	e00f      	b.n	8004b9c <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004b7c:	69bb      	ldr	r3, [r7, #24]
 8004b7e:	015a      	lsls	r2, r3, #5
 8004b80:	69fb      	ldr	r3, [r7, #28]
 8004b82:	4413      	add	r3, r2
 8004b84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	69ba      	ldr	r2, [r7, #24]
 8004b8c:	0151      	lsls	r1, r2, #5
 8004b8e:	69fa      	ldr	r2, [r7, #28]
 8004b90:	440a      	add	r2, r1
 8004b92:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004b96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b9a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004b9c:	69bb      	ldr	r3, [r7, #24]
 8004b9e:	015a      	lsls	r2, r3, #5
 8004ba0:	69fb      	ldr	r3, [r7, #28]
 8004ba2:	4413      	add	r3, r2
 8004ba4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	69ba      	ldr	r2, [r7, #24]
 8004bac:	0151      	lsls	r1, r2, #5
 8004bae:	69fa      	ldr	r2, [r7, #28]
 8004bb0:	440a      	add	r2, r1
 8004bb2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004bb6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004bba:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004bbc:	2300      	movs	r3, #0
}
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	3720      	adds	r7, #32
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	bd80      	pop	{r7, pc}
 8004bc6:	bf00      	nop
 8004bc8:	1ff80000 	.word	0x1ff80000

08004bcc <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004bcc:	b480      	push	{r7}
 8004bce:	b087      	sub	sp, #28
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	60f8      	str	r0, [r7, #12]
 8004bd4:	60b9      	str	r1, [r7, #8]
 8004bd6:	4613      	mov	r3, r2
 8004bd8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8004bde:	68bb      	ldr	r3, [r7, #8]
 8004be0:	781b      	ldrb	r3, [r3, #0]
 8004be2:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004be4:	68bb      	ldr	r3, [r7, #8]
 8004be6:	785b      	ldrb	r3, [r3, #1]
 8004be8:	2b01      	cmp	r3, #1
 8004bea:	f040 80ce 	bne.w	8004d8a <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004bee:	68bb      	ldr	r3, [r7, #8]
 8004bf0:	699b      	ldr	r3, [r3, #24]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d132      	bne.n	8004c5c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004bf6:	693b      	ldr	r3, [r7, #16]
 8004bf8:	015a      	lsls	r2, r3, #5
 8004bfa:	697b      	ldr	r3, [r7, #20]
 8004bfc:	4413      	add	r3, r2
 8004bfe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c02:	691b      	ldr	r3, [r3, #16]
 8004c04:	693a      	ldr	r2, [r7, #16]
 8004c06:	0151      	lsls	r1, r2, #5
 8004c08:	697a      	ldr	r2, [r7, #20]
 8004c0a:	440a      	add	r2, r1
 8004c0c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c10:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004c14:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004c18:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004c1a:	693b      	ldr	r3, [r7, #16]
 8004c1c:	015a      	lsls	r2, r3, #5
 8004c1e:	697b      	ldr	r3, [r7, #20]
 8004c20:	4413      	add	r3, r2
 8004c22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c26:	691b      	ldr	r3, [r3, #16]
 8004c28:	693a      	ldr	r2, [r7, #16]
 8004c2a:	0151      	lsls	r1, r2, #5
 8004c2c:	697a      	ldr	r2, [r7, #20]
 8004c2e:	440a      	add	r2, r1
 8004c30:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c34:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004c38:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004c3a:	693b      	ldr	r3, [r7, #16]
 8004c3c:	015a      	lsls	r2, r3, #5
 8004c3e:	697b      	ldr	r3, [r7, #20]
 8004c40:	4413      	add	r3, r2
 8004c42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c46:	691b      	ldr	r3, [r3, #16]
 8004c48:	693a      	ldr	r2, [r7, #16]
 8004c4a:	0151      	lsls	r1, r2, #5
 8004c4c:	697a      	ldr	r2, [r7, #20]
 8004c4e:	440a      	add	r2, r1
 8004c50:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c54:	0cdb      	lsrs	r3, r3, #19
 8004c56:	04db      	lsls	r3, r3, #19
 8004c58:	6113      	str	r3, [r2, #16]
 8004c5a:	e04e      	b.n	8004cfa <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004c5c:	693b      	ldr	r3, [r7, #16]
 8004c5e:	015a      	lsls	r2, r3, #5
 8004c60:	697b      	ldr	r3, [r7, #20]
 8004c62:	4413      	add	r3, r2
 8004c64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c68:	691b      	ldr	r3, [r3, #16]
 8004c6a:	693a      	ldr	r2, [r7, #16]
 8004c6c:	0151      	lsls	r1, r2, #5
 8004c6e:	697a      	ldr	r2, [r7, #20]
 8004c70:	440a      	add	r2, r1
 8004c72:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c76:	0cdb      	lsrs	r3, r3, #19
 8004c78:	04db      	lsls	r3, r3, #19
 8004c7a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004c7c:	693b      	ldr	r3, [r7, #16]
 8004c7e:	015a      	lsls	r2, r3, #5
 8004c80:	697b      	ldr	r3, [r7, #20]
 8004c82:	4413      	add	r3, r2
 8004c84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c88:	691b      	ldr	r3, [r3, #16]
 8004c8a:	693a      	ldr	r2, [r7, #16]
 8004c8c:	0151      	lsls	r1, r2, #5
 8004c8e:	697a      	ldr	r2, [r7, #20]
 8004c90:	440a      	add	r2, r1
 8004c92:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c96:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004c9a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004c9e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8004ca0:	68bb      	ldr	r3, [r7, #8]
 8004ca2:	699a      	ldr	r2, [r3, #24]
 8004ca4:	68bb      	ldr	r3, [r7, #8]
 8004ca6:	68db      	ldr	r3, [r3, #12]
 8004ca8:	429a      	cmp	r2, r3
 8004caa:	d903      	bls.n	8004cb4 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8004cac:	68bb      	ldr	r3, [r7, #8]
 8004cae:	68da      	ldr	r2, [r3, #12]
 8004cb0:	68bb      	ldr	r3, [r7, #8]
 8004cb2:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004cb4:	693b      	ldr	r3, [r7, #16]
 8004cb6:	015a      	lsls	r2, r3, #5
 8004cb8:	697b      	ldr	r3, [r7, #20]
 8004cba:	4413      	add	r3, r2
 8004cbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cc0:	691b      	ldr	r3, [r3, #16]
 8004cc2:	693a      	ldr	r2, [r7, #16]
 8004cc4:	0151      	lsls	r1, r2, #5
 8004cc6:	697a      	ldr	r2, [r7, #20]
 8004cc8:	440a      	add	r2, r1
 8004cca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004cce:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004cd2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004cd4:	693b      	ldr	r3, [r7, #16]
 8004cd6:	015a      	lsls	r2, r3, #5
 8004cd8:	697b      	ldr	r3, [r7, #20]
 8004cda:	4413      	add	r3, r2
 8004cdc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ce0:	691a      	ldr	r2, [r3, #16]
 8004ce2:	68bb      	ldr	r3, [r7, #8]
 8004ce4:	699b      	ldr	r3, [r3, #24]
 8004ce6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004cea:	6939      	ldr	r1, [r7, #16]
 8004cec:	0148      	lsls	r0, r1, #5
 8004cee:	6979      	ldr	r1, [r7, #20]
 8004cf0:	4401      	add	r1, r0
 8004cf2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004cf6:	4313      	orrs	r3, r2
 8004cf8:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004cfa:	79fb      	ldrb	r3, [r7, #7]
 8004cfc:	2b01      	cmp	r3, #1
 8004cfe:	d11e      	bne.n	8004d3e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004d00:	68bb      	ldr	r3, [r7, #8]
 8004d02:	695b      	ldr	r3, [r3, #20]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d009      	beq.n	8004d1c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004d08:	693b      	ldr	r3, [r7, #16]
 8004d0a:	015a      	lsls	r2, r3, #5
 8004d0c:	697b      	ldr	r3, [r7, #20]
 8004d0e:	4413      	add	r3, r2
 8004d10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d14:	461a      	mov	r2, r3
 8004d16:	68bb      	ldr	r3, [r7, #8]
 8004d18:	695b      	ldr	r3, [r3, #20]
 8004d1a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004d1c:	693b      	ldr	r3, [r7, #16]
 8004d1e:	015a      	lsls	r2, r3, #5
 8004d20:	697b      	ldr	r3, [r7, #20]
 8004d22:	4413      	add	r3, r2
 8004d24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	693a      	ldr	r2, [r7, #16]
 8004d2c:	0151      	lsls	r1, r2, #5
 8004d2e:	697a      	ldr	r2, [r7, #20]
 8004d30:	440a      	add	r2, r1
 8004d32:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d36:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004d3a:	6013      	str	r3, [r2, #0]
 8004d3c:	e097      	b.n	8004e6e <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004d3e:	693b      	ldr	r3, [r7, #16]
 8004d40:	015a      	lsls	r2, r3, #5
 8004d42:	697b      	ldr	r3, [r7, #20]
 8004d44:	4413      	add	r3, r2
 8004d46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	693a      	ldr	r2, [r7, #16]
 8004d4e:	0151      	lsls	r1, r2, #5
 8004d50:	697a      	ldr	r2, [r7, #20]
 8004d52:	440a      	add	r2, r1
 8004d54:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d58:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004d5c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8004d5e:	68bb      	ldr	r3, [r7, #8]
 8004d60:	699b      	ldr	r3, [r3, #24]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	f000 8083 	beq.w	8004e6e <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004d68:	697b      	ldr	r3, [r7, #20]
 8004d6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d6e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004d70:	68bb      	ldr	r3, [r7, #8]
 8004d72:	781b      	ldrb	r3, [r3, #0]
 8004d74:	f003 030f 	and.w	r3, r3, #15
 8004d78:	2101      	movs	r1, #1
 8004d7a:	fa01 f303 	lsl.w	r3, r1, r3
 8004d7e:	6979      	ldr	r1, [r7, #20]
 8004d80:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004d84:	4313      	orrs	r3, r2
 8004d86:	634b      	str	r3, [r1, #52]	; 0x34
 8004d88:	e071      	b.n	8004e6e <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004d8a:	693b      	ldr	r3, [r7, #16]
 8004d8c:	015a      	lsls	r2, r3, #5
 8004d8e:	697b      	ldr	r3, [r7, #20]
 8004d90:	4413      	add	r3, r2
 8004d92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d96:	691b      	ldr	r3, [r3, #16]
 8004d98:	693a      	ldr	r2, [r7, #16]
 8004d9a:	0151      	lsls	r1, r2, #5
 8004d9c:	697a      	ldr	r2, [r7, #20]
 8004d9e:	440a      	add	r2, r1
 8004da0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004da4:	0cdb      	lsrs	r3, r3, #19
 8004da6:	04db      	lsls	r3, r3, #19
 8004da8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004daa:	693b      	ldr	r3, [r7, #16]
 8004dac:	015a      	lsls	r2, r3, #5
 8004dae:	697b      	ldr	r3, [r7, #20]
 8004db0:	4413      	add	r3, r2
 8004db2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004db6:	691b      	ldr	r3, [r3, #16]
 8004db8:	693a      	ldr	r2, [r7, #16]
 8004dba:	0151      	lsls	r1, r2, #5
 8004dbc:	697a      	ldr	r2, [r7, #20]
 8004dbe:	440a      	add	r2, r1
 8004dc0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004dc4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004dc8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004dcc:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8004dce:	68bb      	ldr	r3, [r7, #8]
 8004dd0:	699b      	ldr	r3, [r3, #24]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d003      	beq.n	8004dde <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8004dd6:	68bb      	ldr	r3, [r7, #8]
 8004dd8:	68da      	ldr	r2, [r3, #12]
 8004dda:	68bb      	ldr	r3, [r7, #8]
 8004ddc:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8004dde:	68bb      	ldr	r3, [r7, #8]
 8004de0:	68da      	ldr	r2, [r3, #12]
 8004de2:	68bb      	ldr	r3, [r7, #8]
 8004de4:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004de6:	693b      	ldr	r3, [r7, #16]
 8004de8:	015a      	lsls	r2, r3, #5
 8004dea:	697b      	ldr	r3, [r7, #20]
 8004dec:	4413      	add	r3, r2
 8004dee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004df2:	691b      	ldr	r3, [r3, #16]
 8004df4:	693a      	ldr	r2, [r7, #16]
 8004df6:	0151      	lsls	r1, r2, #5
 8004df8:	697a      	ldr	r2, [r7, #20]
 8004dfa:	440a      	add	r2, r1
 8004dfc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e00:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004e04:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8004e06:	693b      	ldr	r3, [r7, #16]
 8004e08:	015a      	lsls	r2, r3, #5
 8004e0a:	697b      	ldr	r3, [r7, #20]
 8004e0c:	4413      	add	r3, r2
 8004e0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e12:	691a      	ldr	r2, [r3, #16]
 8004e14:	68bb      	ldr	r3, [r7, #8]
 8004e16:	69db      	ldr	r3, [r3, #28]
 8004e18:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e1c:	6939      	ldr	r1, [r7, #16]
 8004e1e:	0148      	lsls	r0, r1, #5
 8004e20:	6979      	ldr	r1, [r7, #20]
 8004e22:	4401      	add	r1, r0
 8004e24:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004e28:	4313      	orrs	r3, r2
 8004e2a:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8004e2c:	79fb      	ldrb	r3, [r7, #7]
 8004e2e:	2b01      	cmp	r3, #1
 8004e30:	d10d      	bne.n	8004e4e <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004e32:	68bb      	ldr	r3, [r7, #8]
 8004e34:	691b      	ldr	r3, [r3, #16]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d009      	beq.n	8004e4e <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004e3a:	68bb      	ldr	r3, [r7, #8]
 8004e3c:	6919      	ldr	r1, [r3, #16]
 8004e3e:	693b      	ldr	r3, [r7, #16]
 8004e40:	015a      	lsls	r2, r3, #5
 8004e42:	697b      	ldr	r3, [r7, #20]
 8004e44:	4413      	add	r3, r2
 8004e46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e4a:	460a      	mov	r2, r1
 8004e4c:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004e4e:	693b      	ldr	r3, [r7, #16]
 8004e50:	015a      	lsls	r2, r3, #5
 8004e52:	697b      	ldr	r3, [r7, #20]
 8004e54:	4413      	add	r3, r2
 8004e56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	693a      	ldr	r2, [r7, #16]
 8004e5e:	0151      	lsls	r1, r2, #5
 8004e60:	697a      	ldr	r2, [r7, #20]
 8004e62:	440a      	add	r2, r1
 8004e64:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e68:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004e6c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004e6e:	2300      	movs	r3, #0
}
 8004e70:	4618      	mov	r0, r3
 8004e72:	371c      	adds	r7, #28
 8004e74:	46bd      	mov	sp, r7
 8004e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7a:	4770      	bx	lr

08004e7c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004e7c:	b480      	push	{r7}
 8004e7e:	b087      	sub	sp, #28
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
 8004e84:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004e86:	2300      	movs	r3, #0
 8004e88:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	785b      	ldrb	r3, [r3, #1]
 8004e96:	2b01      	cmp	r3, #1
 8004e98:	d14a      	bne.n	8004f30 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004e9a:	683b      	ldr	r3, [r7, #0]
 8004e9c:	781b      	ldrb	r3, [r3, #0]
 8004e9e:	015a      	lsls	r2, r3, #5
 8004ea0:	693b      	ldr	r3, [r7, #16]
 8004ea2:	4413      	add	r3, r2
 8004ea4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004eae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004eb2:	f040 8086 	bne.w	8004fc2 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	781b      	ldrb	r3, [r3, #0]
 8004eba:	015a      	lsls	r2, r3, #5
 8004ebc:	693b      	ldr	r3, [r7, #16]
 8004ebe:	4413      	add	r3, r2
 8004ec0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	683a      	ldr	r2, [r7, #0]
 8004ec8:	7812      	ldrb	r2, [r2, #0]
 8004eca:	0151      	lsls	r1, r2, #5
 8004ecc:	693a      	ldr	r2, [r7, #16]
 8004ece:	440a      	add	r2, r1
 8004ed0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ed4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004ed8:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8004eda:	683b      	ldr	r3, [r7, #0]
 8004edc:	781b      	ldrb	r3, [r3, #0]
 8004ede:	015a      	lsls	r2, r3, #5
 8004ee0:	693b      	ldr	r3, [r7, #16]
 8004ee2:	4413      	add	r3, r2
 8004ee4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	683a      	ldr	r2, [r7, #0]
 8004eec:	7812      	ldrb	r2, [r2, #0]
 8004eee:	0151      	lsls	r1, r2, #5
 8004ef0:	693a      	ldr	r2, [r7, #16]
 8004ef2:	440a      	add	r2, r1
 8004ef4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ef8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004efc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	3301      	adds	r3, #1
 8004f02:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	f242 7210 	movw	r2, #10000	; 0x2710
 8004f0a:	4293      	cmp	r3, r2
 8004f0c:	d902      	bls.n	8004f14 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8004f0e:	2301      	movs	r3, #1
 8004f10:	75fb      	strb	r3, [r7, #23]
          break;
 8004f12:	e056      	b.n	8004fc2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	781b      	ldrb	r3, [r3, #0]
 8004f18:	015a      	lsls	r2, r3, #5
 8004f1a:	693b      	ldr	r3, [r7, #16]
 8004f1c:	4413      	add	r3, r2
 8004f1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004f28:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004f2c:	d0e7      	beq.n	8004efe <USB_EPStopXfer+0x82>
 8004f2e:	e048      	b.n	8004fc2 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	781b      	ldrb	r3, [r3, #0]
 8004f34:	015a      	lsls	r2, r3, #5
 8004f36:	693b      	ldr	r3, [r7, #16]
 8004f38:	4413      	add	r3, r2
 8004f3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004f44:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004f48:	d13b      	bne.n	8004fc2 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8004f4a:	683b      	ldr	r3, [r7, #0]
 8004f4c:	781b      	ldrb	r3, [r3, #0]
 8004f4e:	015a      	lsls	r2, r3, #5
 8004f50:	693b      	ldr	r3, [r7, #16]
 8004f52:	4413      	add	r3, r2
 8004f54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	683a      	ldr	r2, [r7, #0]
 8004f5c:	7812      	ldrb	r2, [r2, #0]
 8004f5e:	0151      	lsls	r1, r2, #5
 8004f60:	693a      	ldr	r2, [r7, #16]
 8004f62:	440a      	add	r2, r1
 8004f64:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f68:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004f6c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8004f6e:	683b      	ldr	r3, [r7, #0]
 8004f70:	781b      	ldrb	r3, [r3, #0]
 8004f72:	015a      	lsls	r2, r3, #5
 8004f74:	693b      	ldr	r3, [r7, #16]
 8004f76:	4413      	add	r3, r2
 8004f78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	683a      	ldr	r2, [r7, #0]
 8004f80:	7812      	ldrb	r2, [r2, #0]
 8004f82:	0151      	lsls	r1, r2, #5
 8004f84:	693a      	ldr	r2, [r7, #16]
 8004f86:	440a      	add	r2, r1
 8004f88:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f8c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004f90:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	3301      	adds	r3, #1
 8004f96:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	f242 7210 	movw	r2, #10000	; 0x2710
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d902      	bls.n	8004fa8 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8004fa2:	2301      	movs	r3, #1
 8004fa4:	75fb      	strb	r3, [r7, #23]
          break;
 8004fa6:	e00c      	b.n	8004fc2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	781b      	ldrb	r3, [r3, #0]
 8004fac:	015a      	lsls	r2, r3, #5
 8004fae:	693b      	ldr	r3, [r7, #16]
 8004fb0:	4413      	add	r3, r2
 8004fb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004fbc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004fc0:	d0e7      	beq.n	8004f92 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8004fc2:	7dfb      	ldrb	r3, [r7, #23]
}
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	371c      	adds	r7, #28
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fce:	4770      	bx	lr

08004fd0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004fd0:	b480      	push	{r7}
 8004fd2:	b089      	sub	sp, #36	; 0x24
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	60f8      	str	r0, [r7, #12]
 8004fd8:	60b9      	str	r1, [r7, #8]
 8004fda:	4611      	mov	r1, r2
 8004fdc:	461a      	mov	r2, r3
 8004fde:	460b      	mov	r3, r1
 8004fe0:	71fb      	strb	r3, [r7, #7]
 8004fe2:	4613      	mov	r3, r2
 8004fe4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8004fea:	68bb      	ldr	r3, [r7, #8]
 8004fec:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8004fee:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d123      	bne.n	800503e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004ff6:	88bb      	ldrh	r3, [r7, #4]
 8004ff8:	3303      	adds	r3, #3
 8004ffa:	089b      	lsrs	r3, r3, #2
 8004ffc:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004ffe:	2300      	movs	r3, #0
 8005000:	61bb      	str	r3, [r7, #24]
 8005002:	e018      	b.n	8005036 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005004:	79fb      	ldrb	r3, [r7, #7]
 8005006:	031a      	lsls	r2, r3, #12
 8005008:	697b      	ldr	r3, [r7, #20]
 800500a:	4413      	add	r3, r2
 800500c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005010:	461a      	mov	r2, r3
 8005012:	69fb      	ldr	r3, [r7, #28]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005018:	69fb      	ldr	r3, [r7, #28]
 800501a:	3301      	adds	r3, #1
 800501c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800501e:	69fb      	ldr	r3, [r7, #28]
 8005020:	3301      	adds	r3, #1
 8005022:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005024:	69fb      	ldr	r3, [r7, #28]
 8005026:	3301      	adds	r3, #1
 8005028:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800502a:	69fb      	ldr	r3, [r7, #28]
 800502c:	3301      	adds	r3, #1
 800502e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005030:	69bb      	ldr	r3, [r7, #24]
 8005032:	3301      	adds	r3, #1
 8005034:	61bb      	str	r3, [r7, #24]
 8005036:	69ba      	ldr	r2, [r7, #24]
 8005038:	693b      	ldr	r3, [r7, #16]
 800503a:	429a      	cmp	r2, r3
 800503c:	d3e2      	bcc.n	8005004 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800503e:	2300      	movs	r3, #0
}
 8005040:	4618      	mov	r0, r3
 8005042:	3724      	adds	r7, #36	; 0x24
 8005044:	46bd      	mov	sp, r7
 8005046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504a:	4770      	bx	lr

0800504c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800504c:	b480      	push	{r7}
 800504e:	b08b      	sub	sp, #44	; 0x2c
 8005050:	af00      	add	r7, sp, #0
 8005052:	60f8      	str	r0, [r7, #12]
 8005054:	60b9      	str	r1, [r7, #8]
 8005056:	4613      	mov	r3, r2
 8005058:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800505e:	68bb      	ldr	r3, [r7, #8]
 8005060:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005062:	88fb      	ldrh	r3, [r7, #6]
 8005064:	089b      	lsrs	r3, r3, #2
 8005066:	b29b      	uxth	r3, r3
 8005068:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800506a:	88fb      	ldrh	r3, [r7, #6]
 800506c:	f003 0303 	and.w	r3, r3, #3
 8005070:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005072:	2300      	movs	r3, #0
 8005074:	623b      	str	r3, [r7, #32]
 8005076:	e014      	b.n	80050a2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005078:	69bb      	ldr	r3, [r7, #24]
 800507a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800507e:	681a      	ldr	r2, [r3, #0]
 8005080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005082:	601a      	str	r2, [r3, #0]
    pDest++;
 8005084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005086:	3301      	adds	r3, #1
 8005088:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800508a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800508c:	3301      	adds	r3, #1
 800508e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005092:	3301      	adds	r3, #1
 8005094:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005098:	3301      	adds	r3, #1
 800509a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800509c:	6a3b      	ldr	r3, [r7, #32]
 800509e:	3301      	adds	r3, #1
 80050a0:	623b      	str	r3, [r7, #32]
 80050a2:	6a3a      	ldr	r2, [r7, #32]
 80050a4:	697b      	ldr	r3, [r7, #20]
 80050a6:	429a      	cmp	r2, r3
 80050a8:	d3e6      	bcc.n	8005078 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80050aa:	8bfb      	ldrh	r3, [r7, #30]
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d01e      	beq.n	80050ee <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80050b0:	2300      	movs	r3, #0
 80050b2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80050b4:	69bb      	ldr	r3, [r7, #24]
 80050b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80050ba:	461a      	mov	r2, r3
 80050bc:	f107 0310 	add.w	r3, r7, #16
 80050c0:	6812      	ldr	r2, [r2, #0]
 80050c2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80050c4:	693a      	ldr	r2, [r7, #16]
 80050c6:	6a3b      	ldr	r3, [r7, #32]
 80050c8:	b2db      	uxtb	r3, r3
 80050ca:	00db      	lsls	r3, r3, #3
 80050cc:	fa22 f303 	lsr.w	r3, r2, r3
 80050d0:	b2da      	uxtb	r2, r3
 80050d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050d4:	701a      	strb	r2, [r3, #0]
      i++;
 80050d6:	6a3b      	ldr	r3, [r7, #32]
 80050d8:	3301      	adds	r3, #1
 80050da:	623b      	str	r3, [r7, #32]
      pDest++;
 80050dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050de:	3301      	adds	r3, #1
 80050e0:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80050e2:	8bfb      	ldrh	r3, [r7, #30]
 80050e4:	3b01      	subs	r3, #1
 80050e6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80050e8:	8bfb      	ldrh	r3, [r7, #30]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d1ea      	bne.n	80050c4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80050ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80050f0:	4618      	mov	r0, r3
 80050f2:	372c      	adds	r7, #44	; 0x2c
 80050f4:	46bd      	mov	sp, r7
 80050f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fa:	4770      	bx	lr

080050fc <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80050fc:	b480      	push	{r7}
 80050fe:	b085      	sub	sp, #20
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
 8005104:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800510a:	683b      	ldr	r3, [r7, #0]
 800510c:	781b      	ldrb	r3, [r3, #0]
 800510e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	785b      	ldrb	r3, [r3, #1]
 8005114:	2b01      	cmp	r3, #1
 8005116:	d12c      	bne.n	8005172 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005118:	68bb      	ldr	r3, [r7, #8]
 800511a:	015a      	lsls	r2, r3, #5
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	4413      	add	r3, r2
 8005120:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	2b00      	cmp	r3, #0
 8005128:	db12      	blt.n	8005150 <USB_EPSetStall+0x54>
 800512a:	68bb      	ldr	r3, [r7, #8]
 800512c:	2b00      	cmp	r3, #0
 800512e:	d00f      	beq.n	8005150 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005130:	68bb      	ldr	r3, [r7, #8]
 8005132:	015a      	lsls	r2, r3, #5
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	4413      	add	r3, r2
 8005138:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	68ba      	ldr	r2, [r7, #8]
 8005140:	0151      	lsls	r1, r2, #5
 8005142:	68fa      	ldr	r2, [r7, #12]
 8005144:	440a      	add	r2, r1
 8005146:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800514a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800514e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005150:	68bb      	ldr	r3, [r7, #8]
 8005152:	015a      	lsls	r2, r3, #5
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	4413      	add	r3, r2
 8005158:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	68ba      	ldr	r2, [r7, #8]
 8005160:	0151      	lsls	r1, r2, #5
 8005162:	68fa      	ldr	r2, [r7, #12]
 8005164:	440a      	add	r2, r1
 8005166:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800516a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800516e:	6013      	str	r3, [r2, #0]
 8005170:	e02b      	b.n	80051ca <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005172:	68bb      	ldr	r3, [r7, #8]
 8005174:	015a      	lsls	r2, r3, #5
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	4413      	add	r3, r2
 800517a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	2b00      	cmp	r3, #0
 8005182:	db12      	blt.n	80051aa <USB_EPSetStall+0xae>
 8005184:	68bb      	ldr	r3, [r7, #8]
 8005186:	2b00      	cmp	r3, #0
 8005188:	d00f      	beq.n	80051aa <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800518a:	68bb      	ldr	r3, [r7, #8]
 800518c:	015a      	lsls	r2, r3, #5
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	4413      	add	r3, r2
 8005192:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	68ba      	ldr	r2, [r7, #8]
 800519a:	0151      	lsls	r1, r2, #5
 800519c:	68fa      	ldr	r2, [r7, #12]
 800519e:	440a      	add	r2, r1
 80051a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80051a4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80051a8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80051aa:	68bb      	ldr	r3, [r7, #8]
 80051ac:	015a      	lsls	r2, r3, #5
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	4413      	add	r3, r2
 80051b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	68ba      	ldr	r2, [r7, #8]
 80051ba:	0151      	lsls	r1, r2, #5
 80051bc:	68fa      	ldr	r2, [r7, #12]
 80051be:	440a      	add	r2, r1
 80051c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80051c4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80051c8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80051ca:	2300      	movs	r3, #0
}
 80051cc:	4618      	mov	r0, r3
 80051ce:	3714      	adds	r7, #20
 80051d0:	46bd      	mov	sp, r7
 80051d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d6:	4770      	bx	lr

080051d8 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80051d8:	b480      	push	{r7}
 80051da:	b085      	sub	sp, #20
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
 80051e0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	781b      	ldrb	r3, [r3, #0]
 80051ea:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	785b      	ldrb	r3, [r3, #1]
 80051f0:	2b01      	cmp	r3, #1
 80051f2:	d128      	bne.n	8005246 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80051f4:	68bb      	ldr	r3, [r7, #8]
 80051f6:	015a      	lsls	r2, r3, #5
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	4413      	add	r3, r2
 80051fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	68ba      	ldr	r2, [r7, #8]
 8005204:	0151      	lsls	r1, r2, #5
 8005206:	68fa      	ldr	r2, [r7, #12]
 8005208:	440a      	add	r2, r1
 800520a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800520e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005212:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	791b      	ldrb	r3, [r3, #4]
 8005218:	2b03      	cmp	r3, #3
 800521a:	d003      	beq.n	8005224 <USB_EPClearStall+0x4c>
 800521c:	683b      	ldr	r3, [r7, #0]
 800521e:	791b      	ldrb	r3, [r3, #4]
 8005220:	2b02      	cmp	r3, #2
 8005222:	d138      	bne.n	8005296 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005224:	68bb      	ldr	r3, [r7, #8]
 8005226:	015a      	lsls	r2, r3, #5
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	4413      	add	r3, r2
 800522c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	68ba      	ldr	r2, [r7, #8]
 8005234:	0151      	lsls	r1, r2, #5
 8005236:	68fa      	ldr	r2, [r7, #12]
 8005238:	440a      	add	r2, r1
 800523a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800523e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005242:	6013      	str	r3, [r2, #0]
 8005244:	e027      	b.n	8005296 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005246:	68bb      	ldr	r3, [r7, #8]
 8005248:	015a      	lsls	r2, r3, #5
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	4413      	add	r3, r2
 800524e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	68ba      	ldr	r2, [r7, #8]
 8005256:	0151      	lsls	r1, r2, #5
 8005258:	68fa      	ldr	r2, [r7, #12]
 800525a:	440a      	add	r2, r1
 800525c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005260:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005264:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005266:	683b      	ldr	r3, [r7, #0]
 8005268:	791b      	ldrb	r3, [r3, #4]
 800526a:	2b03      	cmp	r3, #3
 800526c:	d003      	beq.n	8005276 <USB_EPClearStall+0x9e>
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	791b      	ldrb	r3, [r3, #4]
 8005272:	2b02      	cmp	r3, #2
 8005274:	d10f      	bne.n	8005296 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005276:	68bb      	ldr	r3, [r7, #8]
 8005278:	015a      	lsls	r2, r3, #5
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	4413      	add	r3, r2
 800527e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	68ba      	ldr	r2, [r7, #8]
 8005286:	0151      	lsls	r1, r2, #5
 8005288:	68fa      	ldr	r2, [r7, #12]
 800528a:	440a      	add	r2, r1
 800528c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005290:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005294:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005296:	2300      	movs	r3, #0
}
 8005298:	4618      	mov	r0, r3
 800529a:	3714      	adds	r7, #20
 800529c:	46bd      	mov	sp, r7
 800529e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a2:	4770      	bx	lr

080052a4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80052a4:	b480      	push	{r7}
 80052a6:	b085      	sub	sp, #20
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
 80052ac:	460b      	mov	r3, r1
 80052ae:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	68fa      	ldr	r2, [r7, #12]
 80052be:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80052c2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80052c6:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052ce:	681a      	ldr	r2, [r3, #0]
 80052d0:	78fb      	ldrb	r3, [r7, #3]
 80052d2:	011b      	lsls	r3, r3, #4
 80052d4:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80052d8:	68f9      	ldr	r1, [r7, #12]
 80052da:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80052de:	4313      	orrs	r3, r2
 80052e0:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80052e2:	2300      	movs	r3, #0
}
 80052e4:	4618      	mov	r0, r3
 80052e6:	3714      	adds	r7, #20
 80052e8:	46bd      	mov	sp, r7
 80052ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ee:	4770      	bx	lr

080052f0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80052f0:	b480      	push	{r7}
 80052f2:	b085      	sub	sp, #20
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	695b      	ldr	r3, [r3, #20]
 80052fc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	699b      	ldr	r3, [r3, #24]
 8005302:	68fa      	ldr	r2, [r7, #12]
 8005304:	4013      	ands	r3, r2
 8005306:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005308:	68fb      	ldr	r3, [r7, #12]
}
 800530a:	4618      	mov	r0, r3
 800530c:	3714      	adds	r7, #20
 800530e:	46bd      	mov	sp, r7
 8005310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005314:	4770      	bx	lr

08005316 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005316:	b480      	push	{r7}
 8005318:	b085      	sub	sp, #20
 800531a:	af00      	add	r7, sp, #0
 800531c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005328:	699b      	ldr	r3, [r3, #24]
 800532a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005332:	69db      	ldr	r3, [r3, #28]
 8005334:	68ba      	ldr	r2, [r7, #8]
 8005336:	4013      	ands	r3, r2
 8005338:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800533a:	68bb      	ldr	r3, [r7, #8]
 800533c:	0c1b      	lsrs	r3, r3, #16
}
 800533e:	4618      	mov	r0, r3
 8005340:	3714      	adds	r7, #20
 8005342:	46bd      	mov	sp, r7
 8005344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005348:	4770      	bx	lr

0800534a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800534a:	b480      	push	{r7}
 800534c:	b085      	sub	sp, #20
 800534e:	af00      	add	r7, sp, #0
 8005350:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800535c:	699b      	ldr	r3, [r3, #24]
 800535e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005366:	69db      	ldr	r3, [r3, #28]
 8005368:	68ba      	ldr	r2, [r7, #8]
 800536a:	4013      	ands	r3, r2
 800536c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800536e:	68bb      	ldr	r3, [r7, #8]
 8005370:	b29b      	uxth	r3, r3
}
 8005372:	4618      	mov	r0, r3
 8005374:	3714      	adds	r7, #20
 8005376:	46bd      	mov	sp, r7
 8005378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537c:	4770      	bx	lr

0800537e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800537e:	b480      	push	{r7}
 8005380:	b085      	sub	sp, #20
 8005382:	af00      	add	r7, sp, #0
 8005384:	6078      	str	r0, [r7, #4]
 8005386:	460b      	mov	r3, r1
 8005388:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800538e:	78fb      	ldrb	r3, [r7, #3]
 8005390:	015a      	lsls	r2, r3, #5
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	4413      	add	r3, r2
 8005396:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800539a:	689b      	ldr	r3, [r3, #8]
 800539c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053a4:	695b      	ldr	r3, [r3, #20]
 80053a6:	68ba      	ldr	r2, [r7, #8]
 80053a8:	4013      	ands	r3, r2
 80053aa:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80053ac:	68bb      	ldr	r3, [r7, #8]
}
 80053ae:	4618      	mov	r0, r3
 80053b0:	3714      	adds	r7, #20
 80053b2:	46bd      	mov	sp, r7
 80053b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b8:	4770      	bx	lr

080053ba <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80053ba:	b480      	push	{r7}
 80053bc:	b087      	sub	sp, #28
 80053be:	af00      	add	r7, sp, #0
 80053c0:	6078      	str	r0, [r7, #4]
 80053c2:	460b      	mov	r3, r1
 80053c4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80053ca:	697b      	ldr	r3, [r7, #20]
 80053cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053d0:	691b      	ldr	r3, [r3, #16]
 80053d2:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80053d4:	697b      	ldr	r3, [r7, #20]
 80053d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053dc:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80053de:	78fb      	ldrb	r3, [r7, #3]
 80053e0:	f003 030f 	and.w	r3, r3, #15
 80053e4:	68fa      	ldr	r2, [r7, #12]
 80053e6:	fa22 f303 	lsr.w	r3, r2, r3
 80053ea:	01db      	lsls	r3, r3, #7
 80053ec:	b2db      	uxtb	r3, r3
 80053ee:	693a      	ldr	r2, [r7, #16]
 80053f0:	4313      	orrs	r3, r2
 80053f2:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80053f4:	78fb      	ldrb	r3, [r7, #3]
 80053f6:	015a      	lsls	r2, r3, #5
 80053f8:	697b      	ldr	r3, [r7, #20]
 80053fa:	4413      	add	r3, r2
 80053fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005400:	689b      	ldr	r3, [r3, #8]
 8005402:	693a      	ldr	r2, [r7, #16]
 8005404:	4013      	ands	r3, r2
 8005406:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005408:	68bb      	ldr	r3, [r7, #8]
}
 800540a:	4618      	mov	r0, r3
 800540c:	371c      	adds	r7, #28
 800540e:	46bd      	mov	sp, r7
 8005410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005414:	4770      	bx	lr

08005416 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005416:	b480      	push	{r7}
 8005418:	b083      	sub	sp, #12
 800541a:	af00      	add	r7, sp, #0
 800541c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	695b      	ldr	r3, [r3, #20]
 8005422:	f003 0301 	and.w	r3, r3, #1
}
 8005426:	4618      	mov	r0, r3
 8005428:	370c      	adds	r7, #12
 800542a:	46bd      	mov	sp, r7
 800542c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005430:	4770      	bx	lr

08005432 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8005432:	b480      	push	{r7}
 8005434:	b085      	sub	sp, #20
 8005436:	af00      	add	r7, sp, #0
 8005438:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	68fa      	ldr	r2, [r7, #12]
 8005448:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800544c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005450:	f023 0307 	bic.w	r3, r3, #7
 8005454:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800545c:	685b      	ldr	r3, [r3, #4]
 800545e:	68fa      	ldr	r2, [r7, #12]
 8005460:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005464:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005468:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800546a:	2300      	movs	r3, #0
}
 800546c:	4618      	mov	r0, r3
 800546e:	3714      	adds	r7, #20
 8005470:	46bd      	mov	sp, r7
 8005472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005476:	4770      	bx	lr

08005478 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8005478:	b480      	push	{r7}
 800547a:	b087      	sub	sp, #28
 800547c:	af00      	add	r7, sp, #0
 800547e:	60f8      	str	r0, [r7, #12]
 8005480:	460b      	mov	r3, r1
 8005482:	607a      	str	r2, [r7, #4]
 8005484:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	333c      	adds	r3, #60	; 0x3c
 800548e:	3304      	adds	r3, #4
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005494:	693b      	ldr	r3, [r7, #16]
 8005496:	4a26      	ldr	r2, [pc, #152]	; (8005530 <USB_EP0_OutStart+0xb8>)
 8005498:	4293      	cmp	r3, r2
 800549a:	d90a      	bls.n	80054b2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800549c:	697b      	ldr	r3, [r7, #20]
 800549e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80054a8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80054ac:	d101      	bne.n	80054b2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80054ae:	2300      	movs	r3, #0
 80054b0:	e037      	b.n	8005522 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80054b2:	697b      	ldr	r3, [r7, #20]
 80054b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054b8:	461a      	mov	r2, r3
 80054ba:	2300      	movs	r3, #0
 80054bc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80054be:	697b      	ldr	r3, [r7, #20]
 80054c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054c4:	691b      	ldr	r3, [r3, #16]
 80054c6:	697a      	ldr	r2, [r7, #20]
 80054c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80054cc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80054d0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80054d2:	697b      	ldr	r3, [r7, #20]
 80054d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054d8:	691b      	ldr	r3, [r3, #16]
 80054da:	697a      	ldr	r2, [r7, #20]
 80054dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80054e0:	f043 0318 	orr.w	r3, r3, #24
 80054e4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80054e6:	697b      	ldr	r3, [r7, #20]
 80054e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054ec:	691b      	ldr	r3, [r3, #16]
 80054ee:	697a      	ldr	r2, [r7, #20]
 80054f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80054f4:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80054f8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80054fa:	7afb      	ldrb	r3, [r7, #11]
 80054fc:	2b01      	cmp	r3, #1
 80054fe:	d10f      	bne.n	8005520 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005500:	697b      	ldr	r3, [r7, #20]
 8005502:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005506:	461a      	mov	r2, r3
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800550c:	697b      	ldr	r3, [r7, #20]
 800550e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	697a      	ldr	r2, [r7, #20]
 8005516:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800551a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800551e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005520:	2300      	movs	r3, #0
}
 8005522:	4618      	mov	r0, r3
 8005524:	371c      	adds	r7, #28
 8005526:	46bd      	mov	sp, r7
 8005528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552c:	4770      	bx	lr
 800552e:	bf00      	nop
 8005530:	4f54300a 	.word	0x4f54300a

08005534 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8005534:	b480      	push	{r7}
 8005536:	b083      	sub	sp, #12
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800553c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800553e:	4618      	mov	r0, r3
 8005540:	370c      	adds	r7, #12
 8005542:	46bd      	mov	sp, r7
 8005544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005548:	4770      	bx	lr

0800554a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800554a:	b580      	push	{r7, lr}
 800554c:	b084      	sub	sp, #16
 800554e:	af00      	add	r7, sp, #0
 8005550:	6078      	str	r0, [r7, #4]
 8005552:	460b      	mov	r3, r1
 8005554:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005556:	2300      	movs	r3, #0
 8005558:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005560:	2b00      	cmp	r3, #0
 8005562:	d009      	beq.n	8005578 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	78fa      	ldrb	r2, [r7, #3]
 800556e:	4611      	mov	r1, r2
 8005570:	6878      	ldr	r0, [r7, #4]
 8005572:	4798      	blx	r3
 8005574:	4603      	mov	r3, r0
 8005576:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005578:	7bfb      	ldrb	r3, [r7, #15]
}
 800557a:	4618      	mov	r0, r3
 800557c:	3710      	adds	r7, #16
 800557e:	46bd      	mov	sp, r7
 8005580:	bd80      	pop	{r7, pc}

08005582 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005582:	b580      	push	{r7, lr}
 8005584:	b084      	sub	sp, #16
 8005586:	af00      	add	r7, sp, #0
 8005588:	6078      	str	r0, [r7, #4]
 800558a:	460b      	mov	r3, r1
 800558c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800558e:	2300      	movs	r3, #0
 8005590:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005598:	685b      	ldr	r3, [r3, #4]
 800559a:	78fa      	ldrb	r2, [r7, #3]
 800559c:	4611      	mov	r1, r2
 800559e:	6878      	ldr	r0, [r7, #4]
 80055a0:	4798      	blx	r3
 80055a2:	4603      	mov	r3, r0
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d001      	beq.n	80055ac <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80055a8:	2303      	movs	r3, #3
 80055aa:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80055ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80055ae:	4618      	mov	r0, r3
 80055b0:	3710      	adds	r7, #16
 80055b2:	46bd      	mov	sp, r7
 80055b4:	bd80      	pop	{r7, pc}

080055b6 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80055b6:	b580      	push	{r7, lr}
 80055b8:	b084      	sub	sp, #16
 80055ba:	af00      	add	r7, sp, #0
 80055bc:	6078      	str	r0, [r7, #4]
 80055be:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80055c6:	6839      	ldr	r1, [r7, #0]
 80055c8:	4618      	mov	r0, r3
 80055ca:	f001 f8b2 	bl	8006732 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	2201      	movs	r2, #1
 80055d2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80055dc:	461a      	mov	r2, r3
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80055ea:	f003 031f 	and.w	r3, r3, #31
 80055ee:	2b02      	cmp	r3, #2
 80055f0:	d01a      	beq.n	8005628 <USBD_LL_SetupStage+0x72>
 80055f2:	2b02      	cmp	r3, #2
 80055f4:	d822      	bhi.n	800563c <USBD_LL_SetupStage+0x86>
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d002      	beq.n	8005600 <USBD_LL_SetupStage+0x4a>
 80055fa:	2b01      	cmp	r3, #1
 80055fc:	d00a      	beq.n	8005614 <USBD_LL_SetupStage+0x5e>
 80055fe:	e01d      	b.n	800563c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005606:	4619      	mov	r1, r3
 8005608:	6878      	ldr	r0, [r7, #4]
 800560a:	f000 fb09 	bl	8005c20 <USBD_StdDevReq>
 800560e:	4603      	mov	r3, r0
 8005610:	73fb      	strb	r3, [r7, #15]
      break;
 8005612:	e020      	b.n	8005656 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800561a:	4619      	mov	r1, r3
 800561c:	6878      	ldr	r0, [r7, #4]
 800561e:	f000 fb71 	bl	8005d04 <USBD_StdItfReq>
 8005622:	4603      	mov	r3, r0
 8005624:	73fb      	strb	r3, [r7, #15]
      break;
 8005626:	e016      	b.n	8005656 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800562e:	4619      	mov	r1, r3
 8005630:	6878      	ldr	r0, [r7, #4]
 8005632:	f000 fbd3 	bl	8005ddc <USBD_StdEPReq>
 8005636:	4603      	mov	r3, r0
 8005638:	73fb      	strb	r3, [r7, #15]
      break;
 800563a:	e00c      	b.n	8005656 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005642:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005646:	b2db      	uxtb	r3, r3
 8005648:	4619      	mov	r1, r3
 800564a:	6878      	ldr	r0, [r7, #4]
 800564c:	f001 fa36 	bl	8006abc <USBD_LL_StallEP>
 8005650:	4603      	mov	r3, r0
 8005652:	73fb      	strb	r3, [r7, #15]
      break;
 8005654:	bf00      	nop
  }

  return ret;
 8005656:	7bfb      	ldrb	r3, [r7, #15]
}
 8005658:	4618      	mov	r0, r3
 800565a:	3710      	adds	r7, #16
 800565c:	46bd      	mov	sp, r7
 800565e:	bd80      	pop	{r7, pc}

08005660 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005660:	b580      	push	{r7, lr}
 8005662:	b086      	sub	sp, #24
 8005664:	af00      	add	r7, sp, #0
 8005666:	60f8      	str	r0, [r7, #12]
 8005668:	460b      	mov	r3, r1
 800566a:	607a      	str	r2, [r7, #4]
 800566c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800566e:	2300      	movs	r3, #0
 8005670:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8005672:	7afb      	ldrb	r3, [r7, #11]
 8005674:	2b00      	cmp	r3, #0
 8005676:	d16e      	bne.n	8005756 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800567e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005686:	2b03      	cmp	r3, #3
 8005688:	f040 8098 	bne.w	80057bc <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800568c:	693b      	ldr	r3, [r7, #16]
 800568e:	689a      	ldr	r2, [r3, #8]
 8005690:	693b      	ldr	r3, [r7, #16]
 8005692:	68db      	ldr	r3, [r3, #12]
 8005694:	429a      	cmp	r2, r3
 8005696:	d913      	bls.n	80056c0 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8005698:	693b      	ldr	r3, [r7, #16]
 800569a:	689a      	ldr	r2, [r3, #8]
 800569c:	693b      	ldr	r3, [r7, #16]
 800569e:	68db      	ldr	r3, [r3, #12]
 80056a0:	1ad2      	subs	r2, r2, r3
 80056a2:	693b      	ldr	r3, [r7, #16]
 80056a4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80056a6:	693b      	ldr	r3, [r7, #16]
 80056a8:	68da      	ldr	r2, [r3, #12]
 80056aa:	693b      	ldr	r3, [r7, #16]
 80056ac:	689b      	ldr	r3, [r3, #8]
 80056ae:	4293      	cmp	r3, r2
 80056b0:	bf28      	it	cs
 80056b2:	4613      	movcs	r3, r2
 80056b4:	461a      	mov	r2, r3
 80056b6:	6879      	ldr	r1, [r7, #4]
 80056b8:	68f8      	ldr	r0, [r7, #12]
 80056ba:	f001 f8b1 	bl	8006820 <USBD_CtlContinueRx>
 80056be:	e07d      	b.n	80057bc <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80056c6:	f003 031f 	and.w	r3, r3, #31
 80056ca:	2b02      	cmp	r3, #2
 80056cc:	d014      	beq.n	80056f8 <USBD_LL_DataOutStage+0x98>
 80056ce:	2b02      	cmp	r3, #2
 80056d0:	d81d      	bhi.n	800570e <USBD_LL_DataOutStage+0xae>
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d002      	beq.n	80056dc <USBD_LL_DataOutStage+0x7c>
 80056d6:	2b01      	cmp	r3, #1
 80056d8:	d003      	beq.n	80056e2 <USBD_LL_DataOutStage+0x82>
 80056da:	e018      	b.n	800570e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80056dc:	2300      	movs	r3, #0
 80056de:	75bb      	strb	r3, [r7, #22]
            break;
 80056e0:	e018      	b.n	8005714 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80056e8:	b2db      	uxtb	r3, r3
 80056ea:	4619      	mov	r1, r3
 80056ec:	68f8      	ldr	r0, [r7, #12]
 80056ee:	f000 fa5e 	bl	8005bae <USBD_CoreFindIF>
 80056f2:	4603      	mov	r3, r0
 80056f4:	75bb      	strb	r3, [r7, #22]
            break;
 80056f6:	e00d      	b.n	8005714 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80056fe:	b2db      	uxtb	r3, r3
 8005700:	4619      	mov	r1, r3
 8005702:	68f8      	ldr	r0, [r7, #12]
 8005704:	f000 fa60 	bl	8005bc8 <USBD_CoreFindEP>
 8005708:	4603      	mov	r3, r0
 800570a:	75bb      	strb	r3, [r7, #22]
            break;
 800570c:	e002      	b.n	8005714 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800570e:	2300      	movs	r3, #0
 8005710:	75bb      	strb	r3, [r7, #22]
            break;
 8005712:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8005714:	7dbb      	ldrb	r3, [r7, #22]
 8005716:	2b00      	cmp	r3, #0
 8005718:	d119      	bne.n	800574e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005720:	b2db      	uxtb	r3, r3
 8005722:	2b03      	cmp	r3, #3
 8005724:	d113      	bne.n	800574e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8005726:	7dba      	ldrb	r2, [r7, #22]
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	32ae      	adds	r2, #174	; 0xae
 800572c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005730:	691b      	ldr	r3, [r3, #16]
 8005732:	2b00      	cmp	r3, #0
 8005734:	d00b      	beq.n	800574e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8005736:	7dba      	ldrb	r2, [r7, #22]
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800573e:	7dba      	ldrb	r2, [r7, #22]
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	32ae      	adds	r2, #174	; 0xae
 8005744:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005748:	691b      	ldr	r3, [r3, #16]
 800574a:	68f8      	ldr	r0, [r7, #12]
 800574c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800574e:	68f8      	ldr	r0, [r7, #12]
 8005750:	f001 f877 	bl	8006842 <USBD_CtlSendStatus>
 8005754:	e032      	b.n	80057bc <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8005756:	7afb      	ldrb	r3, [r7, #11]
 8005758:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800575c:	b2db      	uxtb	r3, r3
 800575e:	4619      	mov	r1, r3
 8005760:	68f8      	ldr	r0, [r7, #12]
 8005762:	f000 fa31 	bl	8005bc8 <USBD_CoreFindEP>
 8005766:	4603      	mov	r3, r0
 8005768:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800576a:	7dbb      	ldrb	r3, [r7, #22]
 800576c:	2bff      	cmp	r3, #255	; 0xff
 800576e:	d025      	beq.n	80057bc <USBD_LL_DataOutStage+0x15c>
 8005770:	7dbb      	ldrb	r3, [r7, #22]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d122      	bne.n	80057bc <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800577c:	b2db      	uxtb	r3, r3
 800577e:	2b03      	cmp	r3, #3
 8005780:	d117      	bne.n	80057b2 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8005782:	7dba      	ldrb	r2, [r7, #22]
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	32ae      	adds	r2, #174	; 0xae
 8005788:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800578c:	699b      	ldr	r3, [r3, #24]
 800578e:	2b00      	cmp	r3, #0
 8005790:	d00f      	beq.n	80057b2 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8005792:	7dba      	ldrb	r2, [r7, #22]
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800579a:	7dba      	ldrb	r2, [r7, #22]
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	32ae      	adds	r2, #174	; 0xae
 80057a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057a4:	699b      	ldr	r3, [r3, #24]
 80057a6:	7afa      	ldrb	r2, [r7, #11]
 80057a8:	4611      	mov	r1, r2
 80057aa:	68f8      	ldr	r0, [r7, #12]
 80057ac:	4798      	blx	r3
 80057ae:	4603      	mov	r3, r0
 80057b0:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80057b2:	7dfb      	ldrb	r3, [r7, #23]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d001      	beq.n	80057bc <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80057b8:	7dfb      	ldrb	r3, [r7, #23]
 80057ba:	e000      	b.n	80057be <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80057bc:	2300      	movs	r3, #0
}
 80057be:	4618      	mov	r0, r3
 80057c0:	3718      	adds	r7, #24
 80057c2:	46bd      	mov	sp, r7
 80057c4:	bd80      	pop	{r7, pc}

080057c6 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80057c6:	b580      	push	{r7, lr}
 80057c8:	b086      	sub	sp, #24
 80057ca:	af00      	add	r7, sp, #0
 80057cc:	60f8      	str	r0, [r7, #12]
 80057ce:	460b      	mov	r3, r1
 80057d0:	607a      	str	r2, [r7, #4]
 80057d2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80057d4:	7afb      	ldrb	r3, [r7, #11]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d16f      	bne.n	80058ba <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	3314      	adds	r3, #20
 80057de:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80057e6:	2b02      	cmp	r3, #2
 80057e8:	d15a      	bne.n	80058a0 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80057ea:	693b      	ldr	r3, [r7, #16]
 80057ec:	689a      	ldr	r2, [r3, #8]
 80057ee:	693b      	ldr	r3, [r7, #16]
 80057f0:	68db      	ldr	r3, [r3, #12]
 80057f2:	429a      	cmp	r2, r3
 80057f4:	d914      	bls.n	8005820 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80057f6:	693b      	ldr	r3, [r7, #16]
 80057f8:	689a      	ldr	r2, [r3, #8]
 80057fa:	693b      	ldr	r3, [r7, #16]
 80057fc:	68db      	ldr	r3, [r3, #12]
 80057fe:	1ad2      	subs	r2, r2, r3
 8005800:	693b      	ldr	r3, [r7, #16]
 8005802:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8005804:	693b      	ldr	r3, [r7, #16]
 8005806:	689b      	ldr	r3, [r3, #8]
 8005808:	461a      	mov	r2, r3
 800580a:	6879      	ldr	r1, [r7, #4]
 800580c:	68f8      	ldr	r0, [r7, #12]
 800580e:	f000 fff6 	bl	80067fe <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005812:	2300      	movs	r3, #0
 8005814:	2200      	movs	r2, #0
 8005816:	2100      	movs	r1, #0
 8005818:	68f8      	ldr	r0, [r7, #12]
 800581a:	f001 f9f9 	bl	8006c10 <USBD_LL_PrepareReceive>
 800581e:	e03f      	b.n	80058a0 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8005820:	693b      	ldr	r3, [r7, #16]
 8005822:	68da      	ldr	r2, [r3, #12]
 8005824:	693b      	ldr	r3, [r7, #16]
 8005826:	689b      	ldr	r3, [r3, #8]
 8005828:	429a      	cmp	r2, r3
 800582a:	d11c      	bne.n	8005866 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800582c:	693b      	ldr	r3, [r7, #16]
 800582e:	685a      	ldr	r2, [r3, #4]
 8005830:	693b      	ldr	r3, [r7, #16]
 8005832:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8005834:	429a      	cmp	r2, r3
 8005836:	d316      	bcc.n	8005866 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8005838:	693b      	ldr	r3, [r7, #16]
 800583a:	685a      	ldr	r2, [r3, #4]
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005842:	429a      	cmp	r2, r3
 8005844:	d20f      	bcs.n	8005866 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005846:	2200      	movs	r2, #0
 8005848:	2100      	movs	r1, #0
 800584a:	68f8      	ldr	r0, [r7, #12]
 800584c:	f000 ffd7 	bl	80067fe <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	2200      	movs	r2, #0
 8005854:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005858:	2300      	movs	r3, #0
 800585a:	2200      	movs	r2, #0
 800585c:	2100      	movs	r1, #0
 800585e:	68f8      	ldr	r0, [r7, #12]
 8005860:	f001 f9d6 	bl	8006c10 <USBD_LL_PrepareReceive>
 8005864:	e01c      	b.n	80058a0 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800586c:	b2db      	uxtb	r3, r3
 800586e:	2b03      	cmp	r3, #3
 8005870:	d10f      	bne.n	8005892 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005878:	68db      	ldr	r3, [r3, #12]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d009      	beq.n	8005892 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	2200      	movs	r2, #0
 8005882:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800588c:	68db      	ldr	r3, [r3, #12]
 800588e:	68f8      	ldr	r0, [r7, #12]
 8005890:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005892:	2180      	movs	r1, #128	; 0x80
 8005894:	68f8      	ldr	r0, [r7, #12]
 8005896:	f001 f911 	bl	8006abc <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800589a:	68f8      	ldr	r0, [r7, #12]
 800589c:	f000 ffe4 	bl	8006868 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d03a      	beq.n	8005920 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80058aa:	68f8      	ldr	r0, [r7, #12]
 80058ac:	f7ff fe42 	bl	8005534 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	2200      	movs	r2, #0
 80058b4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80058b8:	e032      	b.n	8005920 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80058ba:	7afb      	ldrb	r3, [r7, #11]
 80058bc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80058c0:	b2db      	uxtb	r3, r3
 80058c2:	4619      	mov	r1, r3
 80058c4:	68f8      	ldr	r0, [r7, #12]
 80058c6:	f000 f97f 	bl	8005bc8 <USBD_CoreFindEP>
 80058ca:	4603      	mov	r3, r0
 80058cc:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80058ce:	7dfb      	ldrb	r3, [r7, #23]
 80058d0:	2bff      	cmp	r3, #255	; 0xff
 80058d2:	d025      	beq.n	8005920 <USBD_LL_DataInStage+0x15a>
 80058d4:	7dfb      	ldrb	r3, [r7, #23]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d122      	bne.n	8005920 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80058e0:	b2db      	uxtb	r3, r3
 80058e2:	2b03      	cmp	r3, #3
 80058e4:	d11c      	bne.n	8005920 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80058e6:	7dfa      	ldrb	r2, [r7, #23]
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	32ae      	adds	r2, #174	; 0xae
 80058ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80058f0:	695b      	ldr	r3, [r3, #20]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d014      	beq.n	8005920 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80058f6:	7dfa      	ldrb	r2, [r7, #23]
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80058fe:	7dfa      	ldrb	r2, [r7, #23]
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	32ae      	adds	r2, #174	; 0xae
 8005904:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005908:	695b      	ldr	r3, [r3, #20]
 800590a:	7afa      	ldrb	r2, [r7, #11]
 800590c:	4611      	mov	r1, r2
 800590e:	68f8      	ldr	r0, [r7, #12]
 8005910:	4798      	blx	r3
 8005912:	4603      	mov	r3, r0
 8005914:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8005916:	7dbb      	ldrb	r3, [r7, #22]
 8005918:	2b00      	cmp	r3, #0
 800591a:	d001      	beq.n	8005920 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800591c:	7dbb      	ldrb	r3, [r7, #22]
 800591e:	e000      	b.n	8005922 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8005920:	2300      	movs	r3, #0
}
 8005922:	4618      	mov	r0, r3
 8005924:	3718      	adds	r7, #24
 8005926:	46bd      	mov	sp, r7
 8005928:	bd80      	pop	{r7, pc}

0800592a <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800592a:	b580      	push	{r7, lr}
 800592c:	b084      	sub	sp, #16
 800592e:	af00      	add	r7, sp, #0
 8005930:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8005932:	2300      	movs	r3, #0
 8005934:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	2201      	movs	r2, #1
 800593a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	2200      	movs	r2, #0
 8005942:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	2200      	movs	r2, #0
 800594a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2200      	movs	r2, #0
 8005950:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2200      	movs	r2, #0
 8005958:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005962:	2b00      	cmp	r3, #0
 8005964:	d014      	beq.n	8005990 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800596c:	685b      	ldr	r3, [r3, #4]
 800596e:	2b00      	cmp	r3, #0
 8005970:	d00e      	beq.n	8005990 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005978:	685b      	ldr	r3, [r3, #4]
 800597a:	687a      	ldr	r2, [r7, #4]
 800597c:	6852      	ldr	r2, [r2, #4]
 800597e:	b2d2      	uxtb	r2, r2
 8005980:	4611      	mov	r1, r2
 8005982:	6878      	ldr	r0, [r7, #4]
 8005984:	4798      	blx	r3
 8005986:	4603      	mov	r3, r0
 8005988:	2b00      	cmp	r3, #0
 800598a:	d001      	beq.n	8005990 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800598c:	2303      	movs	r3, #3
 800598e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005990:	2340      	movs	r3, #64	; 0x40
 8005992:	2200      	movs	r2, #0
 8005994:	2100      	movs	r1, #0
 8005996:	6878      	ldr	r0, [r7, #4]
 8005998:	f001 f86a 	bl	8006a70 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2201      	movs	r2, #1
 80059a0:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2240      	movs	r2, #64	; 0x40
 80059a8:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80059ac:	2340      	movs	r3, #64	; 0x40
 80059ae:	2200      	movs	r2, #0
 80059b0:	2180      	movs	r1, #128	; 0x80
 80059b2:	6878      	ldr	r0, [r7, #4]
 80059b4:	f001 f85c 	bl	8006a70 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2201      	movs	r2, #1
 80059bc:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	2240      	movs	r2, #64	; 0x40
 80059c2:	621a      	str	r2, [r3, #32]

  return ret;
 80059c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80059c6:	4618      	mov	r0, r3
 80059c8:	3710      	adds	r7, #16
 80059ca:	46bd      	mov	sp, r7
 80059cc:	bd80      	pop	{r7, pc}

080059ce <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80059ce:	b480      	push	{r7}
 80059d0:	b083      	sub	sp, #12
 80059d2:	af00      	add	r7, sp, #0
 80059d4:	6078      	str	r0, [r7, #4]
 80059d6:	460b      	mov	r3, r1
 80059d8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	78fa      	ldrb	r2, [r7, #3]
 80059de:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80059e0:	2300      	movs	r3, #0
}
 80059e2:	4618      	mov	r0, r3
 80059e4:	370c      	adds	r7, #12
 80059e6:	46bd      	mov	sp, r7
 80059e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ec:	4770      	bx	lr

080059ee <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80059ee:	b480      	push	{r7}
 80059f0:	b083      	sub	sp, #12
 80059f2:	af00      	add	r7, sp, #0
 80059f4:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80059fc:	b2da      	uxtb	r2, r3
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2204      	movs	r2, #4
 8005a08:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8005a0c:	2300      	movs	r3, #0
}
 8005a0e:	4618      	mov	r0, r3
 8005a10:	370c      	adds	r7, #12
 8005a12:	46bd      	mov	sp, r7
 8005a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a18:	4770      	bx	lr

08005a1a <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005a1a:	b480      	push	{r7}
 8005a1c:	b083      	sub	sp, #12
 8005a1e:	af00      	add	r7, sp, #0
 8005a20:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005a28:	b2db      	uxtb	r3, r3
 8005a2a:	2b04      	cmp	r3, #4
 8005a2c:	d106      	bne.n	8005a3c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8005a34:	b2da      	uxtb	r2, r3
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8005a3c:	2300      	movs	r3, #0
}
 8005a3e:	4618      	mov	r0, r3
 8005a40:	370c      	adds	r7, #12
 8005a42:	46bd      	mov	sp, r7
 8005a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a48:	4770      	bx	lr

08005a4a <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005a4a:	b580      	push	{r7, lr}
 8005a4c:	b082      	sub	sp, #8
 8005a4e:	af00      	add	r7, sp, #0
 8005a50:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005a58:	b2db      	uxtb	r3, r3
 8005a5a:	2b03      	cmp	r3, #3
 8005a5c:	d110      	bne.n	8005a80 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d00b      	beq.n	8005a80 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a6e:	69db      	ldr	r3, [r3, #28]
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d005      	beq.n	8005a80 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a7a:	69db      	ldr	r3, [r3, #28]
 8005a7c:	6878      	ldr	r0, [r7, #4]
 8005a7e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8005a80:	2300      	movs	r3, #0
}
 8005a82:	4618      	mov	r0, r3
 8005a84:	3708      	adds	r7, #8
 8005a86:	46bd      	mov	sp, r7
 8005a88:	bd80      	pop	{r7, pc}

08005a8a <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8005a8a:	b580      	push	{r7, lr}
 8005a8c:	b082      	sub	sp, #8
 8005a8e:	af00      	add	r7, sp, #0
 8005a90:	6078      	str	r0, [r7, #4]
 8005a92:	460b      	mov	r3, r1
 8005a94:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	32ae      	adds	r2, #174	; 0xae
 8005aa0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d101      	bne.n	8005aac <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8005aa8:	2303      	movs	r3, #3
 8005aaa:	e01c      	b.n	8005ae6 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005ab2:	b2db      	uxtb	r3, r3
 8005ab4:	2b03      	cmp	r3, #3
 8005ab6:	d115      	bne.n	8005ae4 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	32ae      	adds	r2, #174	; 0xae
 8005ac2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ac6:	6a1b      	ldr	r3, [r3, #32]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d00b      	beq.n	8005ae4 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	32ae      	adds	r2, #174	; 0xae
 8005ad6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ada:	6a1b      	ldr	r3, [r3, #32]
 8005adc:	78fa      	ldrb	r2, [r7, #3]
 8005ade:	4611      	mov	r1, r2
 8005ae0:	6878      	ldr	r0, [r7, #4]
 8005ae2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005ae4:	2300      	movs	r3, #0
}
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	3708      	adds	r7, #8
 8005aea:	46bd      	mov	sp, r7
 8005aec:	bd80      	pop	{r7, pc}

08005aee <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8005aee:	b580      	push	{r7, lr}
 8005af0:	b082      	sub	sp, #8
 8005af2:	af00      	add	r7, sp, #0
 8005af4:	6078      	str	r0, [r7, #4]
 8005af6:	460b      	mov	r3, r1
 8005af8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	32ae      	adds	r2, #174	; 0xae
 8005b04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d101      	bne.n	8005b10 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8005b0c:	2303      	movs	r3, #3
 8005b0e:	e01c      	b.n	8005b4a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005b16:	b2db      	uxtb	r3, r3
 8005b18:	2b03      	cmp	r3, #3
 8005b1a:	d115      	bne.n	8005b48 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	32ae      	adds	r2, #174	; 0xae
 8005b26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d00b      	beq.n	8005b48 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	32ae      	adds	r2, #174	; 0xae
 8005b3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b40:	78fa      	ldrb	r2, [r7, #3]
 8005b42:	4611      	mov	r1, r2
 8005b44:	6878      	ldr	r0, [r7, #4]
 8005b46:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005b48:	2300      	movs	r3, #0
}
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	3708      	adds	r7, #8
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	bd80      	pop	{r7, pc}

08005b52 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8005b52:	b480      	push	{r7}
 8005b54:	b083      	sub	sp, #12
 8005b56:	af00      	add	r7, sp, #0
 8005b58:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005b5a:	2300      	movs	r3, #0
}
 8005b5c:	4618      	mov	r0, r3
 8005b5e:	370c      	adds	r7, #12
 8005b60:	46bd      	mov	sp, r7
 8005b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b66:	4770      	bx	lr

08005b68 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	b084      	sub	sp, #16
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8005b70:	2300      	movs	r3, #0
 8005b72:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	2201      	movs	r2, #1
 8005b78:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d00e      	beq.n	8005ba4 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b8c:	685b      	ldr	r3, [r3, #4]
 8005b8e:	687a      	ldr	r2, [r7, #4]
 8005b90:	6852      	ldr	r2, [r2, #4]
 8005b92:	b2d2      	uxtb	r2, r2
 8005b94:	4611      	mov	r1, r2
 8005b96:	6878      	ldr	r0, [r7, #4]
 8005b98:	4798      	blx	r3
 8005b9a:	4603      	mov	r3, r0
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d001      	beq.n	8005ba4 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8005ba0:	2303      	movs	r3, #3
 8005ba2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005ba4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	3710      	adds	r7, #16
 8005baa:	46bd      	mov	sp, r7
 8005bac:	bd80      	pop	{r7, pc}

08005bae <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8005bae:	b480      	push	{r7}
 8005bb0:	b083      	sub	sp, #12
 8005bb2:	af00      	add	r7, sp, #0
 8005bb4:	6078      	str	r0, [r7, #4]
 8005bb6:	460b      	mov	r3, r1
 8005bb8:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8005bba:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	370c      	adds	r7, #12
 8005bc0:	46bd      	mov	sp, r7
 8005bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc6:	4770      	bx	lr

08005bc8 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8005bc8:	b480      	push	{r7}
 8005bca:	b083      	sub	sp, #12
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	6078      	str	r0, [r7, #4]
 8005bd0:	460b      	mov	r3, r1
 8005bd2:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8005bd4:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	370c      	adds	r7, #12
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be0:	4770      	bx	lr

08005be2 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8005be2:	b480      	push	{r7}
 8005be4:	b087      	sub	sp, #28
 8005be6:	af00      	add	r7, sp, #0
 8005be8:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8005bee:	697b      	ldr	r3, [r7, #20]
 8005bf0:	781b      	ldrb	r3, [r3, #0]
 8005bf2:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8005bf4:	697b      	ldr	r3, [r7, #20]
 8005bf6:	3301      	adds	r3, #1
 8005bf8:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8005bfa:	697b      	ldr	r3, [r7, #20]
 8005bfc:	781b      	ldrb	r3, [r3, #0]
 8005bfe:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8005c00:	8a3b      	ldrh	r3, [r7, #16]
 8005c02:	021b      	lsls	r3, r3, #8
 8005c04:	b21a      	sxth	r2, r3
 8005c06:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005c0a:	4313      	orrs	r3, r2
 8005c0c:	b21b      	sxth	r3, r3
 8005c0e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8005c10:	89fb      	ldrh	r3, [r7, #14]
}
 8005c12:	4618      	mov	r0, r3
 8005c14:	371c      	adds	r7, #28
 8005c16:	46bd      	mov	sp, r7
 8005c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1c:	4770      	bx	lr
	...

08005c20 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005c20:	b580      	push	{r7, lr}
 8005c22:	b084      	sub	sp, #16
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	6078      	str	r0, [r7, #4]
 8005c28:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005c2a:	2300      	movs	r3, #0
 8005c2c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005c2e:	683b      	ldr	r3, [r7, #0]
 8005c30:	781b      	ldrb	r3, [r3, #0]
 8005c32:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005c36:	2b40      	cmp	r3, #64	; 0x40
 8005c38:	d005      	beq.n	8005c46 <USBD_StdDevReq+0x26>
 8005c3a:	2b40      	cmp	r3, #64	; 0x40
 8005c3c:	d857      	bhi.n	8005cee <USBD_StdDevReq+0xce>
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d00f      	beq.n	8005c62 <USBD_StdDevReq+0x42>
 8005c42:	2b20      	cmp	r3, #32
 8005c44:	d153      	bne.n	8005cee <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	32ae      	adds	r2, #174	; 0xae
 8005c50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c54:	689b      	ldr	r3, [r3, #8]
 8005c56:	6839      	ldr	r1, [r7, #0]
 8005c58:	6878      	ldr	r0, [r7, #4]
 8005c5a:	4798      	blx	r3
 8005c5c:	4603      	mov	r3, r0
 8005c5e:	73fb      	strb	r3, [r7, #15]
      break;
 8005c60:	e04a      	b.n	8005cf8 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005c62:	683b      	ldr	r3, [r7, #0]
 8005c64:	785b      	ldrb	r3, [r3, #1]
 8005c66:	2b09      	cmp	r3, #9
 8005c68:	d83b      	bhi.n	8005ce2 <USBD_StdDevReq+0xc2>
 8005c6a:	a201      	add	r2, pc, #4	; (adr r2, 8005c70 <USBD_StdDevReq+0x50>)
 8005c6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c70:	08005cc5 	.word	0x08005cc5
 8005c74:	08005cd9 	.word	0x08005cd9
 8005c78:	08005ce3 	.word	0x08005ce3
 8005c7c:	08005ccf 	.word	0x08005ccf
 8005c80:	08005ce3 	.word	0x08005ce3
 8005c84:	08005ca3 	.word	0x08005ca3
 8005c88:	08005c99 	.word	0x08005c99
 8005c8c:	08005ce3 	.word	0x08005ce3
 8005c90:	08005cbb 	.word	0x08005cbb
 8005c94:	08005cad 	.word	0x08005cad
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8005c98:	6839      	ldr	r1, [r7, #0]
 8005c9a:	6878      	ldr	r0, [r7, #4]
 8005c9c:	f000 fa3c 	bl	8006118 <USBD_GetDescriptor>
          break;
 8005ca0:	e024      	b.n	8005cec <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8005ca2:	6839      	ldr	r1, [r7, #0]
 8005ca4:	6878      	ldr	r0, [r7, #4]
 8005ca6:	f000 fba1 	bl	80063ec <USBD_SetAddress>
          break;
 8005caa:	e01f      	b.n	8005cec <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8005cac:	6839      	ldr	r1, [r7, #0]
 8005cae:	6878      	ldr	r0, [r7, #4]
 8005cb0:	f000 fbe0 	bl	8006474 <USBD_SetConfig>
 8005cb4:	4603      	mov	r3, r0
 8005cb6:	73fb      	strb	r3, [r7, #15]
          break;
 8005cb8:	e018      	b.n	8005cec <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8005cba:	6839      	ldr	r1, [r7, #0]
 8005cbc:	6878      	ldr	r0, [r7, #4]
 8005cbe:	f000 fc83 	bl	80065c8 <USBD_GetConfig>
          break;
 8005cc2:	e013      	b.n	8005cec <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8005cc4:	6839      	ldr	r1, [r7, #0]
 8005cc6:	6878      	ldr	r0, [r7, #4]
 8005cc8:	f000 fcb4 	bl	8006634 <USBD_GetStatus>
          break;
 8005ccc:	e00e      	b.n	8005cec <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8005cce:	6839      	ldr	r1, [r7, #0]
 8005cd0:	6878      	ldr	r0, [r7, #4]
 8005cd2:	f000 fce3 	bl	800669c <USBD_SetFeature>
          break;
 8005cd6:	e009      	b.n	8005cec <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8005cd8:	6839      	ldr	r1, [r7, #0]
 8005cda:	6878      	ldr	r0, [r7, #4]
 8005cdc:	f000 fd07 	bl	80066ee <USBD_ClrFeature>
          break;
 8005ce0:	e004      	b.n	8005cec <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8005ce2:	6839      	ldr	r1, [r7, #0]
 8005ce4:	6878      	ldr	r0, [r7, #4]
 8005ce6:	f000 fd5e 	bl	80067a6 <USBD_CtlError>
          break;
 8005cea:	bf00      	nop
      }
      break;
 8005cec:	e004      	b.n	8005cf8 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8005cee:	6839      	ldr	r1, [r7, #0]
 8005cf0:	6878      	ldr	r0, [r7, #4]
 8005cf2:	f000 fd58 	bl	80067a6 <USBD_CtlError>
      break;
 8005cf6:	bf00      	nop
  }

  return ret;
 8005cf8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	3710      	adds	r7, #16
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	bd80      	pop	{r7, pc}
 8005d02:	bf00      	nop

08005d04 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005d04:	b580      	push	{r7, lr}
 8005d06:	b084      	sub	sp, #16
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	6078      	str	r0, [r7, #4]
 8005d0c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005d0e:	2300      	movs	r3, #0
 8005d10:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005d12:	683b      	ldr	r3, [r7, #0]
 8005d14:	781b      	ldrb	r3, [r3, #0]
 8005d16:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005d1a:	2b40      	cmp	r3, #64	; 0x40
 8005d1c:	d005      	beq.n	8005d2a <USBD_StdItfReq+0x26>
 8005d1e:	2b40      	cmp	r3, #64	; 0x40
 8005d20:	d852      	bhi.n	8005dc8 <USBD_StdItfReq+0xc4>
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d001      	beq.n	8005d2a <USBD_StdItfReq+0x26>
 8005d26:	2b20      	cmp	r3, #32
 8005d28:	d14e      	bne.n	8005dc8 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005d30:	b2db      	uxtb	r3, r3
 8005d32:	3b01      	subs	r3, #1
 8005d34:	2b02      	cmp	r3, #2
 8005d36:	d840      	bhi.n	8005dba <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005d38:	683b      	ldr	r3, [r7, #0]
 8005d3a:	889b      	ldrh	r3, [r3, #4]
 8005d3c:	b2db      	uxtb	r3, r3
 8005d3e:	2b01      	cmp	r3, #1
 8005d40:	d836      	bhi.n	8005db0 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8005d42:	683b      	ldr	r3, [r7, #0]
 8005d44:	889b      	ldrh	r3, [r3, #4]
 8005d46:	b2db      	uxtb	r3, r3
 8005d48:	4619      	mov	r1, r3
 8005d4a:	6878      	ldr	r0, [r7, #4]
 8005d4c:	f7ff ff2f 	bl	8005bae <USBD_CoreFindIF>
 8005d50:	4603      	mov	r3, r0
 8005d52:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005d54:	7bbb      	ldrb	r3, [r7, #14]
 8005d56:	2bff      	cmp	r3, #255	; 0xff
 8005d58:	d01d      	beq.n	8005d96 <USBD_StdItfReq+0x92>
 8005d5a:	7bbb      	ldrb	r3, [r7, #14]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d11a      	bne.n	8005d96 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8005d60:	7bba      	ldrb	r2, [r7, #14]
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	32ae      	adds	r2, #174	; 0xae
 8005d66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d6a:	689b      	ldr	r3, [r3, #8]
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d00f      	beq.n	8005d90 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8005d70:	7bba      	ldrb	r2, [r7, #14]
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8005d78:	7bba      	ldrb	r2, [r7, #14]
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	32ae      	adds	r2, #174	; 0xae
 8005d7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d82:	689b      	ldr	r3, [r3, #8]
 8005d84:	6839      	ldr	r1, [r7, #0]
 8005d86:	6878      	ldr	r0, [r7, #4]
 8005d88:	4798      	blx	r3
 8005d8a:	4603      	mov	r3, r0
 8005d8c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8005d8e:	e004      	b.n	8005d9a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8005d90:	2303      	movs	r3, #3
 8005d92:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8005d94:	e001      	b.n	8005d9a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8005d96:	2303      	movs	r3, #3
 8005d98:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8005d9a:	683b      	ldr	r3, [r7, #0]
 8005d9c:	88db      	ldrh	r3, [r3, #6]
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d110      	bne.n	8005dc4 <USBD_StdItfReq+0xc0>
 8005da2:	7bfb      	ldrb	r3, [r7, #15]
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d10d      	bne.n	8005dc4 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8005da8:	6878      	ldr	r0, [r7, #4]
 8005daa:	f000 fd4a 	bl	8006842 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8005dae:	e009      	b.n	8005dc4 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8005db0:	6839      	ldr	r1, [r7, #0]
 8005db2:	6878      	ldr	r0, [r7, #4]
 8005db4:	f000 fcf7 	bl	80067a6 <USBD_CtlError>
          break;
 8005db8:	e004      	b.n	8005dc4 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8005dba:	6839      	ldr	r1, [r7, #0]
 8005dbc:	6878      	ldr	r0, [r7, #4]
 8005dbe:	f000 fcf2 	bl	80067a6 <USBD_CtlError>
          break;
 8005dc2:	e000      	b.n	8005dc6 <USBD_StdItfReq+0xc2>
          break;
 8005dc4:	bf00      	nop
      }
      break;
 8005dc6:	e004      	b.n	8005dd2 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8005dc8:	6839      	ldr	r1, [r7, #0]
 8005dca:	6878      	ldr	r0, [r7, #4]
 8005dcc:	f000 fceb 	bl	80067a6 <USBD_CtlError>
      break;
 8005dd0:	bf00      	nop
  }

  return ret;
 8005dd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005dd4:	4618      	mov	r0, r3
 8005dd6:	3710      	adds	r7, #16
 8005dd8:	46bd      	mov	sp, r7
 8005dda:	bd80      	pop	{r7, pc}

08005ddc <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005ddc:	b580      	push	{r7, lr}
 8005dde:	b084      	sub	sp, #16
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	6078      	str	r0, [r7, #4]
 8005de4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8005de6:	2300      	movs	r3, #0
 8005de8:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8005dea:	683b      	ldr	r3, [r7, #0]
 8005dec:	889b      	ldrh	r3, [r3, #4]
 8005dee:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005df0:	683b      	ldr	r3, [r7, #0]
 8005df2:	781b      	ldrb	r3, [r3, #0]
 8005df4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005df8:	2b40      	cmp	r3, #64	; 0x40
 8005dfa:	d007      	beq.n	8005e0c <USBD_StdEPReq+0x30>
 8005dfc:	2b40      	cmp	r3, #64	; 0x40
 8005dfe:	f200 817f 	bhi.w	8006100 <USBD_StdEPReq+0x324>
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d02a      	beq.n	8005e5c <USBD_StdEPReq+0x80>
 8005e06:	2b20      	cmp	r3, #32
 8005e08:	f040 817a 	bne.w	8006100 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8005e0c:	7bbb      	ldrb	r3, [r7, #14]
 8005e0e:	4619      	mov	r1, r3
 8005e10:	6878      	ldr	r0, [r7, #4]
 8005e12:	f7ff fed9 	bl	8005bc8 <USBD_CoreFindEP>
 8005e16:	4603      	mov	r3, r0
 8005e18:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005e1a:	7b7b      	ldrb	r3, [r7, #13]
 8005e1c:	2bff      	cmp	r3, #255	; 0xff
 8005e1e:	f000 8174 	beq.w	800610a <USBD_StdEPReq+0x32e>
 8005e22:	7b7b      	ldrb	r3, [r7, #13]
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	f040 8170 	bne.w	800610a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8005e2a:	7b7a      	ldrb	r2, [r7, #13]
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8005e32:	7b7a      	ldrb	r2, [r7, #13]
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	32ae      	adds	r2, #174	; 0xae
 8005e38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e3c:	689b      	ldr	r3, [r3, #8]
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	f000 8163 	beq.w	800610a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8005e44:	7b7a      	ldrb	r2, [r7, #13]
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	32ae      	adds	r2, #174	; 0xae
 8005e4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e4e:	689b      	ldr	r3, [r3, #8]
 8005e50:	6839      	ldr	r1, [r7, #0]
 8005e52:	6878      	ldr	r0, [r7, #4]
 8005e54:	4798      	blx	r3
 8005e56:	4603      	mov	r3, r0
 8005e58:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005e5a:	e156      	b.n	800610a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005e5c:	683b      	ldr	r3, [r7, #0]
 8005e5e:	785b      	ldrb	r3, [r3, #1]
 8005e60:	2b03      	cmp	r3, #3
 8005e62:	d008      	beq.n	8005e76 <USBD_StdEPReq+0x9a>
 8005e64:	2b03      	cmp	r3, #3
 8005e66:	f300 8145 	bgt.w	80060f4 <USBD_StdEPReq+0x318>
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	f000 809b 	beq.w	8005fa6 <USBD_StdEPReq+0x1ca>
 8005e70:	2b01      	cmp	r3, #1
 8005e72:	d03c      	beq.n	8005eee <USBD_StdEPReq+0x112>
 8005e74:	e13e      	b.n	80060f4 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e7c:	b2db      	uxtb	r3, r3
 8005e7e:	2b02      	cmp	r3, #2
 8005e80:	d002      	beq.n	8005e88 <USBD_StdEPReq+0xac>
 8005e82:	2b03      	cmp	r3, #3
 8005e84:	d016      	beq.n	8005eb4 <USBD_StdEPReq+0xd8>
 8005e86:	e02c      	b.n	8005ee2 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005e88:	7bbb      	ldrb	r3, [r7, #14]
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d00d      	beq.n	8005eaa <USBD_StdEPReq+0xce>
 8005e8e:	7bbb      	ldrb	r3, [r7, #14]
 8005e90:	2b80      	cmp	r3, #128	; 0x80
 8005e92:	d00a      	beq.n	8005eaa <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8005e94:	7bbb      	ldrb	r3, [r7, #14]
 8005e96:	4619      	mov	r1, r3
 8005e98:	6878      	ldr	r0, [r7, #4]
 8005e9a:	f000 fe0f 	bl	8006abc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8005e9e:	2180      	movs	r1, #128	; 0x80
 8005ea0:	6878      	ldr	r0, [r7, #4]
 8005ea2:	f000 fe0b 	bl	8006abc <USBD_LL_StallEP>
 8005ea6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005ea8:	e020      	b.n	8005eec <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8005eaa:	6839      	ldr	r1, [r7, #0]
 8005eac:	6878      	ldr	r0, [r7, #4]
 8005eae:	f000 fc7a 	bl	80067a6 <USBD_CtlError>
              break;
 8005eb2:	e01b      	b.n	8005eec <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005eb4:	683b      	ldr	r3, [r7, #0]
 8005eb6:	885b      	ldrh	r3, [r3, #2]
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d10e      	bne.n	8005eda <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8005ebc:	7bbb      	ldrb	r3, [r7, #14]
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d00b      	beq.n	8005eda <USBD_StdEPReq+0xfe>
 8005ec2:	7bbb      	ldrb	r3, [r7, #14]
 8005ec4:	2b80      	cmp	r3, #128	; 0x80
 8005ec6:	d008      	beq.n	8005eda <USBD_StdEPReq+0xfe>
 8005ec8:	683b      	ldr	r3, [r7, #0]
 8005eca:	88db      	ldrh	r3, [r3, #6]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d104      	bne.n	8005eda <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8005ed0:	7bbb      	ldrb	r3, [r7, #14]
 8005ed2:	4619      	mov	r1, r3
 8005ed4:	6878      	ldr	r0, [r7, #4]
 8005ed6:	f000 fdf1 	bl	8006abc <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8005eda:	6878      	ldr	r0, [r7, #4]
 8005edc:	f000 fcb1 	bl	8006842 <USBD_CtlSendStatus>

              break;
 8005ee0:	e004      	b.n	8005eec <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8005ee2:	6839      	ldr	r1, [r7, #0]
 8005ee4:	6878      	ldr	r0, [r7, #4]
 8005ee6:	f000 fc5e 	bl	80067a6 <USBD_CtlError>
              break;
 8005eea:	bf00      	nop
          }
          break;
 8005eec:	e107      	b.n	80060fe <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005ef4:	b2db      	uxtb	r3, r3
 8005ef6:	2b02      	cmp	r3, #2
 8005ef8:	d002      	beq.n	8005f00 <USBD_StdEPReq+0x124>
 8005efa:	2b03      	cmp	r3, #3
 8005efc:	d016      	beq.n	8005f2c <USBD_StdEPReq+0x150>
 8005efe:	e04b      	b.n	8005f98 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005f00:	7bbb      	ldrb	r3, [r7, #14]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d00d      	beq.n	8005f22 <USBD_StdEPReq+0x146>
 8005f06:	7bbb      	ldrb	r3, [r7, #14]
 8005f08:	2b80      	cmp	r3, #128	; 0x80
 8005f0a:	d00a      	beq.n	8005f22 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8005f0c:	7bbb      	ldrb	r3, [r7, #14]
 8005f0e:	4619      	mov	r1, r3
 8005f10:	6878      	ldr	r0, [r7, #4]
 8005f12:	f000 fdd3 	bl	8006abc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8005f16:	2180      	movs	r1, #128	; 0x80
 8005f18:	6878      	ldr	r0, [r7, #4]
 8005f1a:	f000 fdcf 	bl	8006abc <USBD_LL_StallEP>
 8005f1e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005f20:	e040      	b.n	8005fa4 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8005f22:	6839      	ldr	r1, [r7, #0]
 8005f24:	6878      	ldr	r0, [r7, #4]
 8005f26:	f000 fc3e 	bl	80067a6 <USBD_CtlError>
              break;
 8005f2a:	e03b      	b.n	8005fa4 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005f2c:	683b      	ldr	r3, [r7, #0]
 8005f2e:	885b      	ldrh	r3, [r3, #2]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d136      	bne.n	8005fa2 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8005f34:	7bbb      	ldrb	r3, [r7, #14]
 8005f36:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d004      	beq.n	8005f48 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8005f3e:	7bbb      	ldrb	r3, [r7, #14]
 8005f40:	4619      	mov	r1, r3
 8005f42:	6878      	ldr	r0, [r7, #4]
 8005f44:	f000 fdd9 	bl	8006afa <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8005f48:	6878      	ldr	r0, [r7, #4]
 8005f4a:	f000 fc7a 	bl	8006842 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8005f4e:	7bbb      	ldrb	r3, [r7, #14]
 8005f50:	4619      	mov	r1, r3
 8005f52:	6878      	ldr	r0, [r7, #4]
 8005f54:	f7ff fe38 	bl	8005bc8 <USBD_CoreFindEP>
 8005f58:	4603      	mov	r3, r0
 8005f5a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005f5c:	7b7b      	ldrb	r3, [r7, #13]
 8005f5e:	2bff      	cmp	r3, #255	; 0xff
 8005f60:	d01f      	beq.n	8005fa2 <USBD_StdEPReq+0x1c6>
 8005f62:	7b7b      	ldrb	r3, [r7, #13]
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d11c      	bne.n	8005fa2 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8005f68:	7b7a      	ldrb	r2, [r7, #13]
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8005f70:	7b7a      	ldrb	r2, [r7, #13]
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	32ae      	adds	r2, #174	; 0xae
 8005f76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f7a:	689b      	ldr	r3, [r3, #8]
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d010      	beq.n	8005fa2 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8005f80:	7b7a      	ldrb	r2, [r7, #13]
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	32ae      	adds	r2, #174	; 0xae
 8005f86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f8a:	689b      	ldr	r3, [r3, #8]
 8005f8c:	6839      	ldr	r1, [r7, #0]
 8005f8e:	6878      	ldr	r0, [r7, #4]
 8005f90:	4798      	blx	r3
 8005f92:	4603      	mov	r3, r0
 8005f94:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8005f96:	e004      	b.n	8005fa2 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8005f98:	6839      	ldr	r1, [r7, #0]
 8005f9a:	6878      	ldr	r0, [r7, #4]
 8005f9c:	f000 fc03 	bl	80067a6 <USBD_CtlError>
              break;
 8005fa0:	e000      	b.n	8005fa4 <USBD_StdEPReq+0x1c8>
              break;
 8005fa2:	bf00      	nop
          }
          break;
 8005fa4:	e0ab      	b.n	80060fe <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005fac:	b2db      	uxtb	r3, r3
 8005fae:	2b02      	cmp	r3, #2
 8005fb0:	d002      	beq.n	8005fb8 <USBD_StdEPReq+0x1dc>
 8005fb2:	2b03      	cmp	r3, #3
 8005fb4:	d032      	beq.n	800601c <USBD_StdEPReq+0x240>
 8005fb6:	e097      	b.n	80060e8 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005fb8:	7bbb      	ldrb	r3, [r7, #14]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d007      	beq.n	8005fce <USBD_StdEPReq+0x1f2>
 8005fbe:	7bbb      	ldrb	r3, [r7, #14]
 8005fc0:	2b80      	cmp	r3, #128	; 0x80
 8005fc2:	d004      	beq.n	8005fce <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8005fc4:	6839      	ldr	r1, [r7, #0]
 8005fc6:	6878      	ldr	r0, [r7, #4]
 8005fc8:	f000 fbed 	bl	80067a6 <USBD_CtlError>
                break;
 8005fcc:	e091      	b.n	80060f2 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005fce:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	da0b      	bge.n	8005fee <USBD_StdEPReq+0x212>
 8005fd6:	7bbb      	ldrb	r3, [r7, #14]
 8005fd8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005fdc:	4613      	mov	r3, r2
 8005fde:	009b      	lsls	r3, r3, #2
 8005fe0:	4413      	add	r3, r2
 8005fe2:	009b      	lsls	r3, r3, #2
 8005fe4:	3310      	adds	r3, #16
 8005fe6:	687a      	ldr	r2, [r7, #4]
 8005fe8:	4413      	add	r3, r2
 8005fea:	3304      	adds	r3, #4
 8005fec:	e00b      	b.n	8006006 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005fee:	7bbb      	ldrb	r3, [r7, #14]
 8005ff0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005ff4:	4613      	mov	r3, r2
 8005ff6:	009b      	lsls	r3, r3, #2
 8005ff8:	4413      	add	r3, r2
 8005ffa:	009b      	lsls	r3, r3, #2
 8005ffc:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006000:	687a      	ldr	r2, [r7, #4]
 8006002:	4413      	add	r3, r2
 8006004:	3304      	adds	r3, #4
 8006006:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006008:	68bb      	ldr	r3, [r7, #8]
 800600a:	2200      	movs	r2, #0
 800600c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800600e:	68bb      	ldr	r3, [r7, #8]
 8006010:	2202      	movs	r2, #2
 8006012:	4619      	mov	r1, r3
 8006014:	6878      	ldr	r0, [r7, #4]
 8006016:	f000 fbd7 	bl	80067c8 <USBD_CtlSendData>
              break;
 800601a:	e06a      	b.n	80060f2 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800601c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006020:	2b00      	cmp	r3, #0
 8006022:	da11      	bge.n	8006048 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006024:	7bbb      	ldrb	r3, [r7, #14]
 8006026:	f003 020f 	and.w	r2, r3, #15
 800602a:	6879      	ldr	r1, [r7, #4]
 800602c:	4613      	mov	r3, r2
 800602e:	009b      	lsls	r3, r3, #2
 8006030:	4413      	add	r3, r2
 8006032:	009b      	lsls	r3, r3, #2
 8006034:	440b      	add	r3, r1
 8006036:	3324      	adds	r3, #36	; 0x24
 8006038:	881b      	ldrh	r3, [r3, #0]
 800603a:	2b00      	cmp	r3, #0
 800603c:	d117      	bne.n	800606e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800603e:	6839      	ldr	r1, [r7, #0]
 8006040:	6878      	ldr	r0, [r7, #4]
 8006042:	f000 fbb0 	bl	80067a6 <USBD_CtlError>
                  break;
 8006046:	e054      	b.n	80060f2 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006048:	7bbb      	ldrb	r3, [r7, #14]
 800604a:	f003 020f 	and.w	r2, r3, #15
 800604e:	6879      	ldr	r1, [r7, #4]
 8006050:	4613      	mov	r3, r2
 8006052:	009b      	lsls	r3, r3, #2
 8006054:	4413      	add	r3, r2
 8006056:	009b      	lsls	r3, r3, #2
 8006058:	440b      	add	r3, r1
 800605a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800605e:	881b      	ldrh	r3, [r3, #0]
 8006060:	2b00      	cmp	r3, #0
 8006062:	d104      	bne.n	800606e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006064:	6839      	ldr	r1, [r7, #0]
 8006066:	6878      	ldr	r0, [r7, #4]
 8006068:	f000 fb9d 	bl	80067a6 <USBD_CtlError>
                  break;
 800606c:	e041      	b.n	80060f2 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800606e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006072:	2b00      	cmp	r3, #0
 8006074:	da0b      	bge.n	800608e <USBD_StdEPReq+0x2b2>
 8006076:	7bbb      	ldrb	r3, [r7, #14]
 8006078:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800607c:	4613      	mov	r3, r2
 800607e:	009b      	lsls	r3, r3, #2
 8006080:	4413      	add	r3, r2
 8006082:	009b      	lsls	r3, r3, #2
 8006084:	3310      	adds	r3, #16
 8006086:	687a      	ldr	r2, [r7, #4]
 8006088:	4413      	add	r3, r2
 800608a:	3304      	adds	r3, #4
 800608c:	e00b      	b.n	80060a6 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800608e:	7bbb      	ldrb	r3, [r7, #14]
 8006090:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006094:	4613      	mov	r3, r2
 8006096:	009b      	lsls	r3, r3, #2
 8006098:	4413      	add	r3, r2
 800609a:	009b      	lsls	r3, r3, #2
 800609c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80060a0:	687a      	ldr	r2, [r7, #4]
 80060a2:	4413      	add	r3, r2
 80060a4:	3304      	adds	r3, #4
 80060a6:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80060a8:	7bbb      	ldrb	r3, [r7, #14]
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d002      	beq.n	80060b4 <USBD_StdEPReq+0x2d8>
 80060ae:	7bbb      	ldrb	r3, [r7, #14]
 80060b0:	2b80      	cmp	r3, #128	; 0x80
 80060b2:	d103      	bne.n	80060bc <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80060b4:	68bb      	ldr	r3, [r7, #8]
 80060b6:	2200      	movs	r2, #0
 80060b8:	601a      	str	r2, [r3, #0]
 80060ba:	e00e      	b.n	80060da <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80060bc:	7bbb      	ldrb	r3, [r7, #14]
 80060be:	4619      	mov	r1, r3
 80060c0:	6878      	ldr	r0, [r7, #4]
 80060c2:	f000 fd39 	bl	8006b38 <USBD_LL_IsStallEP>
 80060c6:	4603      	mov	r3, r0
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d003      	beq.n	80060d4 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80060cc:	68bb      	ldr	r3, [r7, #8]
 80060ce:	2201      	movs	r2, #1
 80060d0:	601a      	str	r2, [r3, #0]
 80060d2:	e002      	b.n	80060da <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80060d4:	68bb      	ldr	r3, [r7, #8]
 80060d6:	2200      	movs	r2, #0
 80060d8:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80060da:	68bb      	ldr	r3, [r7, #8]
 80060dc:	2202      	movs	r2, #2
 80060de:	4619      	mov	r1, r3
 80060e0:	6878      	ldr	r0, [r7, #4]
 80060e2:	f000 fb71 	bl	80067c8 <USBD_CtlSendData>
              break;
 80060e6:	e004      	b.n	80060f2 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80060e8:	6839      	ldr	r1, [r7, #0]
 80060ea:	6878      	ldr	r0, [r7, #4]
 80060ec:	f000 fb5b 	bl	80067a6 <USBD_CtlError>
              break;
 80060f0:	bf00      	nop
          }
          break;
 80060f2:	e004      	b.n	80060fe <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80060f4:	6839      	ldr	r1, [r7, #0]
 80060f6:	6878      	ldr	r0, [r7, #4]
 80060f8:	f000 fb55 	bl	80067a6 <USBD_CtlError>
          break;
 80060fc:	bf00      	nop
      }
      break;
 80060fe:	e005      	b.n	800610c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8006100:	6839      	ldr	r1, [r7, #0]
 8006102:	6878      	ldr	r0, [r7, #4]
 8006104:	f000 fb4f 	bl	80067a6 <USBD_CtlError>
      break;
 8006108:	e000      	b.n	800610c <USBD_StdEPReq+0x330>
      break;
 800610a:	bf00      	nop
  }

  return ret;
 800610c:	7bfb      	ldrb	r3, [r7, #15]
}
 800610e:	4618      	mov	r0, r3
 8006110:	3710      	adds	r7, #16
 8006112:	46bd      	mov	sp, r7
 8006114:	bd80      	pop	{r7, pc}
	...

08006118 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006118:	b580      	push	{r7, lr}
 800611a:	b084      	sub	sp, #16
 800611c:	af00      	add	r7, sp, #0
 800611e:	6078      	str	r0, [r7, #4]
 8006120:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006122:	2300      	movs	r3, #0
 8006124:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006126:	2300      	movs	r3, #0
 8006128:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800612a:	2300      	movs	r3, #0
 800612c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800612e:	683b      	ldr	r3, [r7, #0]
 8006130:	885b      	ldrh	r3, [r3, #2]
 8006132:	0a1b      	lsrs	r3, r3, #8
 8006134:	b29b      	uxth	r3, r3
 8006136:	3b01      	subs	r3, #1
 8006138:	2b06      	cmp	r3, #6
 800613a:	f200 8128 	bhi.w	800638e <USBD_GetDescriptor+0x276>
 800613e:	a201      	add	r2, pc, #4	; (adr r2, 8006144 <USBD_GetDescriptor+0x2c>)
 8006140:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006144:	08006161 	.word	0x08006161
 8006148:	08006179 	.word	0x08006179
 800614c:	080061b9 	.word	0x080061b9
 8006150:	0800638f 	.word	0x0800638f
 8006154:	0800638f 	.word	0x0800638f
 8006158:	0800632f 	.word	0x0800632f
 800615c:	0800635b 	.word	0x0800635b
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	687a      	ldr	r2, [r7, #4]
 800616a:	7c12      	ldrb	r2, [r2, #16]
 800616c:	f107 0108 	add.w	r1, r7, #8
 8006170:	4610      	mov	r0, r2
 8006172:	4798      	blx	r3
 8006174:	60f8      	str	r0, [r7, #12]
      break;
 8006176:	e112      	b.n	800639e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	7c1b      	ldrb	r3, [r3, #16]
 800617c:	2b00      	cmp	r3, #0
 800617e:	d10d      	bne.n	800619c <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006186:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006188:	f107 0208 	add.w	r2, r7, #8
 800618c:	4610      	mov	r0, r2
 800618e:	4798      	blx	r3
 8006190:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	3301      	adds	r3, #1
 8006196:	2202      	movs	r2, #2
 8006198:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800619a:	e100      	b.n	800639e <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80061a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061a4:	f107 0208 	add.w	r2, r7, #8
 80061a8:	4610      	mov	r0, r2
 80061aa:	4798      	blx	r3
 80061ac:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	3301      	adds	r3, #1
 80061b2:	2202      	movs	r2, #2
 80061b4:	701a      	strb	r2, [r3, #0]
      break;
 80061b6:	e0f2      	b.n	800639e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80061b8:	683b      	ldr	r3, [r7, #0]
 80061ba:	885b      	ldrh	r3, [r3, #2]
 80061bc:	b2db      	uxtb	r3, r3
 80061be:	2b05      	cmp	r3, #5
 80061c0:	f200 80ac 	bhi.w	800631c <USBD_GetDescriptor+0x204>
 80061c4:	a201      	add	r2, pc, #4	; (adr r2, 80061cc <USBD_GetDescriptor+0xb4>)
 80061c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061ca:	bf00      	nop
 80061cc:	080061e5 	.word	0x080061e5
 80061d0:	08006219 	.word	0x08006219
 80061d4:	0800624d 	.word	0x0800624d
 80061d8:	08006281 	.word	0x08006281
 80061dc:	080062b5 	.word	0x080062b5
 80061e0:	080062e9 	.word	0x080062e9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80061ea:	685b      	ldr	r3, [r3, #4]
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d00b      	beq.n	8006208 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80061f6:	685b      	ldr	r3, [r3, #4]
 80061f8:	687a      	ldr	r2, [r7, #4]
 80061fa:	7c12      	ldrb	r2, [r2, #16]
 80061fc:	f107 0108 	add.w	r1, r7, #8
 8006200:	4610      	mov	r0, r2
 8006202:	4798      	blx	r3
 8006204:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006206:	e091      	b.n	800632c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006208:	6839      	ldr	r1, [r7, #0]
 800620a:	6878      	ldr	r0, [r7, #4]
 800620c:	f000 facb 	bl	80067a6 <USBD_CtlError>
            err++;
 8006210:	7afb      	ldrb	r3, [r7, #11]
 8006212:	3301      	adds	r3, #1
 8006214:	72fb      	strb	r3, [r7, #11]
          break;
 8006216:	e089      	b.n	800632c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800621e:	689b      	ldr	r3, [r3, #8]
 8006220:	2b00      	cmp	r3, #0
 8006222:	d00b      	beq.n	800623c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800622a:	689b      	ldr	r3, [r3, #8]
 800622c:	687a      	ldr	r2, [r7, #4]
 800622e:	7c12      	ldrb	r2, [r2, #16]
 8006230:	f107 0108 	add.w	r1, r7, #8
 8006234:	4610      	mov	r0, r2
 8006236:	4798      	blx	r3
 8006238:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800623a:	e077      	b.n	800632c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800623c:	6839      	ldr	r1, [r7, #0]
 800623e:	6878      	ldr	r0, [r7, #4]
 8006240:	f000 fab1 	bl	80067a6 <USBD_CtlError>
            err++;
 8006244:	7afb      	ldrb	r3, [r7, #11]
 8006246:	3301      	adds	r3, #1
 8006248:	72fb      	strb	r3, [r7, #11]
          break;
 800624a:	e06f      	b.n	800632c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006252:	68db      	ldr	r3, [r3, #12]
 8006254:	2b00      	cmp	r3, #0
 8006256:	d00b      	beq.n	8006270 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800625e:	68db      	ldr	r3, [r3, #12]
 8006260:	687a      	ldr	r2, [r7, #4]
 8006262:	7c12      	ldrb	r2, [r2, #16]
 8006264:	f107 0108 	add.w	r1, r7, #8
 8006268:	4610      	mov	r0, r2
 800626a:	4798      	blx	r3
 800626c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800626e:	e05d      	b.n	800632c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006270:	6839      	ldr	r1, [r7, #0]
 8006272:	6878      	ldr	r0, [r7, #4]
 8006274:	f000 fa97 	bl	80067a6 <USBD_CtlError>
            err++;
 8006278:	7afb      	ldrb	r3, [r7, #11]
 800627a:	3301      	adds	r3, #1
 800627c:	72fb      	strb	r3, [r7, #11]
          break;
 800627e:	e055      	b.n	800632c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006286:	691b      	ldr	r3, [r3, #16]
 8006288:	2b00      	cmp	r3, #0
 800628a:	d00b      	beq.n	80062a4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006292:	691b      	ldr	r3, [r3, #16]
 8006294:	687a      	ldr	r2, [r7, #4]
 8006296:	7c12      	ldrb	r2, [r2, #16]
 8006298:	f107 0108 	add.w	r1, r7, #8
 800629c:	4610      	mov	r0, r2
 800629e:	4798      	blx	r3
 80062a0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80062a2:	e043      	b.n	800632c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80062a4:	6839      	ldr	r1, [r7, #0]
 80062a6:	6878      	ldr	r0, [r7, #4]
 80062a8:	f000 fa7d 	bl	80067a6 <USBD_CtlError>
            err++;
 80062ac:	7afb      	ldrb	r3, [r7, #11]
 80062ae:	3301      	adds	r3, #1
 80062b0:	72fb      	strb	r3, [r7, #11]
          break;
 80062b2:	e03b      	b.n	800632c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80062ba:	695b      	ldr	r3, [r3, #20]
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d00b      	beq.n	80062d8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80062c6:	695b      	ldr	r3, [r3, #20]
 80062c8:	687a      	ldr	r2, [r7, #4]
 80062ca:	7c12      	ldrb	r2, [r2, #16]
 80062cc:	f107 0108 	add.w	r1, r7, #8
 80062d0:	4610      	mov	r0, r2
 80062d2:	4798      	blx	r3
 80062d4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80062d6:	e029      	b.n	800632c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80062d8:	6839      	ldr	r1, [r7, #0]
 80062da:	6878      	ldr	r0, [r7, #4]
 80062dc:	f000 fa63 	bl	80067a6 <USBD_CtlError>
            err++;
 80062e0:	7afb      	ldrb	r3, [r7, #11]
 80062e2:	3301      	adds	r3, #1
 80062e4:	72fb      	strb	r3, [r7, #11]
          break;
 80062e6:	e021      	b.n	800632c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80062ee:	699b      	ldr	r3, [r3, #24]
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d00b      	beq.n	800630c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80062fa:	699b      	ldr	r3, [r3, #24]
 80062fc:	687a      	ldr	r2, [r7, #4]
 80062fe:	7c12      	ldrb	r2, [r2, #16]
 8006300:	f107 0108 	add.w	r1, r7, #8
 8006304:	4610      	mov	r0, r2
 8006306:	4798      	blx	r3
 8006308:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800630a:	e00f      	b.n	800632c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800630c:	6839      	ldr	r1, [r7, #0]
 800630e:	6878      	ldr	r0, [r7, #4]
 8006310:	f000 fa49 	bl	80067a6 <USBD_CtlError>
            err++;
 8006314:	7afb      	ldrb	r3, [r7, #11]
 8006316:	3301      	adds	r3, #1
 8006318:	72fb      	strb	r3, [r7, #11]
          break;
 800631a:	e007      	b.n	800632c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800631c:	6839      	ldr	r1, [r7, #0]
 800631e:	6878      	ldr	r0, [r7, #4]
 8006320:	f000 fa41 	bl	80067a6 <USBD_CtlError>
          err++;
 8006324:	7afb      	ldrb	r3, [r7, #11]
 8006326:	3301      	adds	r3, #1
 8006328:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800632a:	bf00      	nop
      }
      break;
 800632c:	e037      	b.n	800639e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	7c1b      	ldrb	r3, [r3, #16]
 8006332:	2b00      	cmp	r3, #0
 8006334:	d109      	bne.n	800634a <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800633c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800633e:	f107 0208 	add.w	r2, r7, #8
 8006342:	4610      	mov	r0, r2
 8006344:	4798      	blx	r3
 8006346:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006348:	e029      	b.n	800639e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800634a:	6839      	ldr	r1, [r7, #0]
 800634c:	6878      	ldr	r0, [r7, #4]
 800634e:	f000 fa2a 	bl	80067a6 <USBD_CtlError>
        err++;
 8006352:	7afb      	ldrb	r3, [r7, #11]
 8006354:	3301      	adds	r3, #1
 8006356:	72fb      	strb	r3, [r7, #11]
      break;
 8006358:	e021      	b.n	800639e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	7c1b      	ldrb	r3, [r3, #16]
 800635e:	2b00      	cmp	r3, #0
 8006360:	d10d      	bne.n	800637e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800636a:	f107 0208 	add.w	r2, r7, #8
 800636e:	4610      	mov	r0, r2
 8006370:	4798      	blx	r3
 8006372:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	3301      	adds	r3, #1
 8006378:	2207      	movs	r2, #7
 800637a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800637c:	e00f      	b.n	800639e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800637e:	6839      	ldr	r1, [r7, #0]
 8006380:	6878      	ldr	r0, [r7, #4]
 8006382:	f000 fa10 	bl	80067a6 <USBD_CtlError>
        err++;
 8006386:	7afb      	ldrb	r3, [r7, #11]
 8006388:	3301      	adds	r3, #1
 800638a:	72fb      	strb	r3, [r7, #11]
      break;
 800638c:	e007      	b.n	800639e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800638e:	6839      	ldr	r1, [r7, #0]
 8006390:	6878      	ldr	r0, [r7, #4]
 8006392:	f000 fa08 	bl	80067a6 <USBD_CtlError>
      err++;
 8006396:	7afb      	ldrb	r3, [r7, #11]
 8006398:	3301      	adds	r3, #1
 800639a:	72fb      	strb	r3, [r7, #11]
      break;
 800639c:	bf00      	nop
  }

  if (err != 0U)
 800639e:	7afb      	ldrb	r3, [r7, #11]
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d11e      	bne.n	80063e2 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80063a4:	683b      	ldr	r3, [r7, #0]
 80063a6:	88db      	ldrh	r3, [r3, #6]
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d016      	beq.n	80063da <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80063ac:	893b      	ldrh	r3, [r7, #8]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d00e      	beq.n	80063d0 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80063b2:	683b      	ldr	r3, [r7, #0]
 80063b4:	88da      	ldrh	r2, [r3, #6]
 80063b6:	893b      	ldrh	r3, [r7, #8]
 80063b8:	4293      	cmp	r3, r2
 80063ba:	bf28      	it	cs
 80063bc:	4613      	movcs	r3, r2
 80063be:	b29b      	uxth	r3, r3
 80063c0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80063c2:	893b      	ldrh	r3, [r7, #8]
 80063c4:	461a      	mov	r2, r3
 80063c6:	68f9      	ldr	r1, [r7, #12]
 80063c8:	6878      	ldr	r0, [r7, #4]
 80063ca:	f000 f9fd 	bl	80067c8 <USBD_CtlSendData>
 80063ce:	e009      	b.n	80063e4 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80063d0:	6839      	ldr	r1, [r7, #0]
 80063d2:	6878      	ldr	r0, [r7, #4]
 80063d4:	f000 f9e7 	bl	80067a6 <USBD_CtlError>
 80063d8:	e004      	b.n	80063e4 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80063da:	6878      	ldr	r0, [r7, #4]
 80063dc:	f000 fa31 	bl	8006842 <USBD_CtlSendStatus>
 80063e0:	e000      	b.n	80063e4 <USBD_GetDescriptor+0x2cc>
    return;
 80063e2:	bf00      	nop
  }
}
 80063e4:	3710      	adds	r7, #16
 80063e6:	46bd      	mov	sp, r7
 80063e8:	bd80      	pop	{r7, pc}
 80063ea:	bf00      	nop

080063ec <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80063ec:	b580      	push	{r7, lr}
 80063ee:	b084      	sub	sp, #16
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	6078      	str	r0, [r7, #4]
 80063f4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80063f6:	683b      	ldr	r3, [r7, #0]
 80063f8:	889b      	ldrh	r3, [r3, #4]
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d131      	bne.n	8006462 <USBD_SetAddress+0x76>
 80063fe:	683b      	ldr	r3, [r7, #0]
 8006400:	88db      	ldrh	r3, [r3, #6]
 8006402:	2b00      	cmp	r3, #0
 8006404:	d12d      	bne.n	8006462 <USBD_SetAddress+0x76>
 8006406:	683b      	ldr	r3, [r7, #0]
 8006408:	885b      	ldrh	r3, [r3, #2]
 800640a:	2b7f      	cmp	r3, #127	; 0x7f
 800640c:	d829      	bhi.n	8006462 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800640e:	683b      	ldr	r3, [r7, #0]
 8006410:	885b      	ldrh	r3, [r3, #2]
 8006412:	b2db      	uxtb	r3, r3
 8006414:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006418:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006420:	b2db      	uxtb	r3, r3
 8006422:	2b03      	cmp	r3, #3
 8006424:	d104      	bne.n	8006430 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8006426:	6839      	ldr	r1, [r7, #0]
 8006428:	6878      	ldr	r0, [r7, #4]
 800642a:	f000 f9bc 	bl	80067a6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800642e:	e01d      	b.n	800646c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	7bfa      	ldrb	r2, [r7, #15]
 8006434:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006438:	7bfb      	ldrb	r3, [r7, #15]
 800643a:	4619      	mov	r1, r3
 800643c:	6878      	ldr	r0, [r7, #4]
 800643e:	f000 fba7 	bl	8006b90 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8006442:	6878      	ldr	r0, [r7, #4]
 8006444:	f000 f9fd 	bl	8006842 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006448:	7bfb      	ldrb	r3, [r7, #15]
 800644a:	2b00      	cmp	r3, #0
 800644c:	d004      	beq.n	8006458 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	2202      	movs	r2, #2
 8006452:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006456:	e009      	b.n	800646c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	2201      	movs	r2, #1
 800645c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006460:	e004      	b.n	800646c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006462:	6839      	ldr	r1, [r7, #0]
 8006464:	6878      	ldr	r0, [r7, #4]
 8006466:	f000 f99e 	bl	80067a6 <USBD_CtlError>
  }
}
 800646a:	bf00      	nop
 800646c:	bf00      	nop
 800646e:	3710      	adds	r7, #16
 8006470:	46bd      	mov	sp, r7
 8006472:	bd80      	pop	{r7, pc}

08006474 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006474:	b580      	push	{r7, lr}
 8006476:	b084      	sub	sp, #16
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]
 800647c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800647e:	2300      	movs	r3, #0
 8006480:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006482:	683b      	ldr	r3, [r7, #0]
 8006484:	885b      	ldrh	r3, [r3, #2]
 8006486:	b2da      	uxtb	r2, r3
 8006488:	4b4e      	ldr	r3, [pc, #312]	; (80065c4 <USBD_SetConfig+0x150>)
 800648a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800648c:	4b4d      	ldr	r3, [pc, #308]	; (80065c4 <USBD_SetConfig+0x150>)
 800648e:	781b      	ldrb	r3, [r3, #0]
 8006490:	2b01      	cmp	r3, #1
 8006492:	d905      	bls.n	80064a0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006494:	6839      	ldr	r1, [r7, #0]
 8006496:	6878      	ldr	r0, [r7, #4]
 8006498:	f000 f985 	bl	80067a6 <USBD_CtlError>
    return USBD_FAIL;
 800649c:	2303      	movs	r3, #3
 800649e:	e08c      	b.n	80065ba <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80064a6:	b2db      	uxtb	r3, r3
 80064a8:	2b02      	cmp	r3, #2
 80064aa:	d002      	beq.n	80064b2 <USBD_SetConfig+0x3e>
 80064ac:	2b03      	cmp	r3, #3
 80064ae:	d029      	beq.n	8006504 <USBD_SetConfig+0x90>
 80064b0:	e075      	b.n	800659e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80064b2:	4b44      	ldr	r3, [pc, #272]	; (80065c4 <USBD_SetConfig+0x150>)
 80064b4:	781b      	ldrb	r3, [r3, #0]
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d020      	beq.n	80064fc <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80064ba:	4b42      	ldr	r3, [pc, #264]	; (80065c4 <USBD_SetConfig+0x150>)
 80064bc:	781b      	ldrb	r3, [r3, #0]
 80064be:	461a      	mov	r2, r3
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80064c4:	4b3f      	ldr	r3, [pc, #252]	; (80065c4 <USBD_SetConfig+0x150>)
 80064c6:	781b      	ldrb	r3, [r3, #0]
 80064c8:	4619      	mov	r1, r3
 80064ca:	6878      	ldr	r0, [r7, #4]
 80064cc:	f7ff f83d 	bl	800554a <USBD_SetClassConfig>
 80064d0:	4603      	mov	r3, r0
 80064d2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80064d4:	7bfb      	ldrb	r3, [r7, #15]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d008      	beq.n	80064ec <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80064da:	6839      	ldr	r1, [r7, #0]
 80064dc:	6878      	ldr	r0, [r7, #4]
 80064de:	f000 f962 	bl	80067a6 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	2202      	movs	r2, #2
 80064e6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80064ea:	e065      	b.n	80065b8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80064ec:	6878      	ldr	r0, [r7, #4]
 80064ee:	f000 f9a8 	bl	8006842 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	2203      	movs	r2, #3
 80064f6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80064fa:	e05d      	b.n	80065b8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80064fc:	6878      	ldr	r0, [r7, #4]
 80064fe:	f000 f9a0 	bl	8006842 <USBD_CtlSendStatus>
      break;
 8006502:	e059      	b.n	80065b8 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8006504:	4b2f      	ldr	r3, [pc, #188]	; (80065c4 <USBD_SetConfig+0x150>)
 8006506:	781b      	ldrb	r3, [r3, #0]
 8006508:	2b00      	cmp	r3, #0
 800650a:	d112      	bne.n	8006532 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2202      	movs	r2, #2
 8006510:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8006514:	4b2b      	ldr	r3, [pc, #172]	; (80065c4 <USBD_SetConfig+0x150>)
 8006516:	781b      	ldrb	r3, [r3, #0]
 8006518:	461a      	mov	r2, r3
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800651e:	4b29      	ldr	r3, [pc, #164]	; (80065c4 <USBD_SetConfig+0x150>)
 8006520:	781b      	ldrb	r3, [r3, #0]
 8006522:	4619      	mov	r1, r3
 8006524:	6878      	ldr	r0, [r7, #4]
 8006526:	f7ff f82c 	bl	8005582 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800652a:	6878      	ldr	r0, [r7, #4]
 800652c:	f000 f989 	bl	8006842 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006530:	e042      	b.n	80065b8 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8006532:	4b24      	ldr	r3, [pc, #144]	; (80065c4 <USBD_SetConfig+0x150>)
 8006534:	781b      	ldrb	r3, [r3, #0]
 8006536:	461a      	mov	r2, r3
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	685b      	ldr	r3, [r3, #4]
 800653c:	429a      	cmp	r2, r3
 800653e:	d02a      	beq.n	8006596 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	685b      	ldr	r3, [r3, #4]
 8006544:	b2db      	uxtb	r3, r3
 8006546:	4619      	mov	r1, r3
 8006548:	6878      	ldr	r0, [r7, #4]
 800654a:	f7ff f81a 	bl	8005582 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800654e:	4b1d      	ldr	r3, [pc, #116]	; (80065c4 <USBD_SetConfig+0x150>)
 8006550:	781b      	ldrb	r3, [r3, #0]
 8006552:	461a      	mov	r2, r3
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006558:	4b1a      	ldr	r3, [pc, #104]	; (80065c4 <USBD_SetConfig+0x150>)
 800655a:	781b      	ldrb	r3, [r3, #0]
 800655c:	4619      	mov	r1, r3
 800655e:	6878      	ldr	r0, [r7, #4]
 8006560:	f7fe fff3 	bl	800554a <USBD_SetClassConfig>
 8006564:	4603      	mov	r3, r0
 8006566:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8006568:	7bfb      	ldrb	r3, [r7, #15]
 800656a:	2b00      	cmp	r3, #0
 800656c:	d00f      	beq.n	800658e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800656e:	6839      	ldr	r1, [r7, #0]
 8006570:	6878      	ldr	r0, [r7, #4]
 8006572:	f000 f918 	bl	80067a6 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	685b      	ldr	r3, [r3, #4]
 800657a:	b2db      	uxtb	r3, r3
 800657c:	4619      	mov	r1, r3
 800657e:	6878      	ldr	r0, [r7, #4]
 8006580:	f7fe ffff 	bl	8005582 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2202      	movs	r2, #2
 8006588:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800658c:	e014      	b.n	80065b8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800658e:	6878      	ldr	r0, [r7, #4]
 8006590:	f000 f957 	bl	8006842 <USBD_CtlSendStatus>
      break;
 8006594:	e010      	b.n	80065b8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006596:	6878      	ldr	r0, [r7, #4]
 8006598:	f000 f953 	bl	8006842 <USBD_CtlSendStatus>
      break;
 800659c:	e00c      	b.n	80065b8 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800659e:	6839      	ldr	r1, [r7, #0]
 80065a0:	6878      	ldr	r0, [r7, #4]
 80065a2:	f000 f900 	bl	80067a6 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80065a6:	4b07      	ldr	r3, [pc, #28]	; (80065c4 <USBD_SetConfig+0x150>)
 80065a8:	781b      	ldrb	r3, [r3, #0]
 80065aa:	4619      	mov	r1, r3
 80065ac:	6878      	ldr	r0, [r7, #4]
 80065ae:	f7fe ffe8 	bl	8005582 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80065b2:	2303      	movs	r3, #3
 80065b4:	73fb      	strb	r3, [r7, #15]
      break;
 80065b6:	bf00      	nop
  }

  return ret;
 80065b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80065ba:	4618      	mov	r0, r3
 80065bc:	3710      	adds	r7, #16
 80065be:	46bd      	mov	sp, r7
 80065c0:	bd80      	pop	{r7, pc}
 80065c2:	bf00      	nop
 80065c4:	2000010c 	.word	0x2000010c

080065c8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80065c8:	b580      	push	{r7, lr}
 80065ca:	b082      	sub	sp, #8
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	6078      	str	r0, [r7, #4]
 80065d0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80065d2:	683b      	ldr	r3, [r7, #0]
 80065d4:	88db      	ldrh	r3, [r3, #6]
 80065d6:	2b01      	cmp	r3, #1
 80065d8:	d004      	beq.n	80065e4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80065da:	6839      	ldr	r1, [r7, #0]
 80065dc:	6878      	ldr	r0, [r7, #4]
 80065de:	f000 f8e2 	bl	80067a6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80065e2:	e023      	b.n	800662c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80065ea:	b2db      	uxtb	r3, r3
 80065ec:	2b02      	cmp	r3, #2
 80065ee:	dc02      	bgt.n	80065f6 <USBD_GetConfig+0x2e>
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	dc03      	bgt.n	80065fc <USBD_GetConfig+0x34>
 80065f4:	e015      	b.n	8006622 <USBD_GetConfig+0x5a>
 80065f6:	2b03      	cmp	r3, #3
 80065f8:	d00b      	beq.n	8006612 <USBD_GetConfig+0x4a>
 80065fa:	e012      	b.n	8006622 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	2200      	movs	r2, #0
 8006600:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	3308      	adds	r3, #8
 8006606:	2201      	movs	r2, #1
 8006608:	4619      	mov	r1, r3
 800660a:	6878      	ldr	r0, [r7, #4]
 800660c:	f000 f8dc 	bl	80067c8 <USBD_CtlSendData>
        break;
 8006610:	e00c      	b.n	800662c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	3304      	adds	r3, #4
 8006616:	2201      	movs	r2, #1
 8006618:	4619      	mov	r1, r3
 800661a:	6878      	ldr	r0, [r7, #4]
 800661c:	f000 f8d4 	bl	80067c8 <USBD_CtlSendData>
        break;
 8006620:	e004      	b.n	800662c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8006622:	6839      	ldr	r1, [r7, #0]
 8006624:	6878      	ldr	r0, [r7, #4]
 8006626:	f000 f8be 	bl	80067a6 <USBD_CtlError>
        break;
 800662a:	bf00      	nop
}
 800662c:	bf00      	nop
 800662e:	3708      	adds	r7, #8
 8006630:	46bd      	mov	sp, r7
 8006632:	bd80      	pop	{r7, pc}

08006634 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006634:	b580      	push	{r7, lr}
 8006636:	b082      	sub	sp, #8
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]
 800663c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006644:	b2db      	uxtb	r3, r3
 8006646:	3b01      	subs	r3, #1
 8006648:	2b02      	cmp	r3, #2
 800664a:	d81e      	bhi.n	800668a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800664c:	683b      	ldr	r3, [r7, #0]
 800664e:	88db      	ldrh	r3, [r3, #6]
 8006650:	2b02      	cmp	r3, #2
 8006652:	d004      	beq.n	800665e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8006654:	6839      	ldr	r1, [r7, #0]
 8006656:	6878      	ldr	r0, [r7, #4]
 8006658:	f000 f8a5 	bl	80067a6 <USBD_CtlError>
        break;
 800665c:	e01a      	b.n	8006694 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	2201      	movs	r2, #1
 8006662:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800666a:	2b00      	cmp	r3, #0
 800666c:	d005      	beq.n	800667a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	68db      	ldr	r3, [r3, #12]
 8006672:	f043 0202 	orr.w	r2, r3, #2
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	330c      	adds	r3, #12
 800667e:	2202      	movs	r2, #2
 8006680:	4619      	mov	r1, r3
 8006682:	6878      	ldr	r0, [r7, #4]
 8006684:	f000 f8a0 	bl	80067c8 <USBD_CtlSendData>
      break;
 8006688:	e004      	b.n	8006694 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800668a:	6839      	ldr	r1, [r7, #0]
 800668c:	6878      	ldr	r0, [r7, #4]
 800668e:	f000 f88a 	bl	80067a6 <USBD_CtlError>
      break;
 8006692:	bf00      	nop
  }
}
 8006694:	bf00      	nop
 8006696:	3708      	adds	r7, #8
 8006698:	46bd      	mov	sp, r7
 800669a:	bd80      	pop	{r7, pc}

0800669c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800669c:	b580      	push	{r7, lr}
 800669e:	b082      	sub	sp, #8
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	6078      	str	r0, [r7, #4]
 80066a4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80066a6:	683b      	ldr	r3, [r7, #0]
 80066a8:	885b      	ldrh	r3, [r3, #2]
 80066aa:	2b01      	cmp	r3, #1
 80066ac:	d107      	bne.n	80066be <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	2201      	movs	r2, #1
 80066b2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80066b6:	6878      	ldr	r0, [r7, #4]
 80066b8:	f000 f8c3 	bl	8006842 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80066bc:	e013      	b.n	80066e6 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80066be:	683b      	ldr	r3, [r7, #0]
 80066c0:	885b      	ldrh	r3, [r3, #2]
 80066c2:	2b02      	cmp	r3, #2
 80066c4:	d10b      	bne.n	80066de <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 80066c6:	683b      	ldr	r3, [r7, #0]
 80066c8:	889b      	ldrh	r3, [r3, #4]
 80066ca:	0a1b      	lsrs	r3, r3, #8
 80066cc:	b29b      	uxth	r3, r3
 80066ce:	b2da      	uxtb	r2, r3
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80066d6:	6878      	ldr	r0, [r7, #4]
 80066d8:	f000 f8b3 	bl	8006842 <USBD_CtlSendStatus>
}
 80066dc:	e003      	b.n	80066e6 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80066de:	6839      	ldr	r1, [r7, #0]
 80066e0:	6878      	ldr	r0, [r7, #4]
 80066e2:	f000 f860 	bl	80067a6 <USBD_CtlError>
}
 80066e6:	bf00      	nop
 80066e8:	3708      	adds	r7, #8
 80066ea:	46bd      	mov	sp, r7
 80066ec:	bd80      	pop	{r7, pc}

080066ee <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80066ee:	b580      	push	{r7, lr}
 80066f0:	b082      	sub	sp, #8
 80066f2:	af00      	add	r7, sp, #0
 80066f4:	6078      	str	r0, [r7, #4]
 80066f6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80066fe:	b2db      	uxtb	r3, r3
 8006700:	3b01      	subs	r3, #1
 8006702:	2b02      	cmp	r3, #2
 8006704:	d80b      	bhi.n	800671e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006706:	683b      	ldr	r3, [r7, #0]
 8006708:	885b      	ldrh	r3, [r3, #2]
 800670a:	2b01      	cmp	r3, #1
 800670c:	d10c      	bne.n	8006728 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	2200      	movs	r2, #0
 8006712:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8006716:	6878      	ldr	r0, [r7, #4]
 8006718:	f000 f893 	bl	8006842 <USBD_CtlSendStatus>
      }
      break;
 800671c:	e004      	b.n	8006728 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800671e:	6839      	ldr	r1, [r7, #0]
 8006720:	6878      	ldr	r0, [r7, #4]
 8006722:	f000 f840 	bl	80067a6 <USBD_CtlError>
      break;
 8006726:	e000      	b.n	800672a <USBD_ClrFeature+0x3c>
      break;
 8006728:	bf00      	nop
  }
}
 800672a:	bf00      	nop
 800672c:	3708      	adds	r7, #8
 800672e:	46bd      	mov	sp, r7
 8006730:	bd80      	pop	{r7, pc}

08006732 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006732:	b580      	push	{r7, lr}
 8006734:	b084      	sub	sp, #16
 8006736:	af00      	add	r7, sp, #0
 8006738:	6078      	str	r0, [r7, #4]
 800673a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800673c:	683b      	ldr	r3, [r7, #0]
 800673e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	781a      	ldrb	r2, [r3, #0]
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	3301      	adds	r3, #1
 800674c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	781a      	ldrb	r2, [r3, #0]
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	3301      	adds	r3, #1
 800675a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800675c:	68f8      	ldr	r0, [r7, #12]
 800675e:	f7ff fa40 	bl	8005be2 <SWAPBYTE>
 8006762:	4603      	mov	r3, r0
 8006764:	461a      	mov	r2, r3
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	3301      	adds	r3, #1
 800676e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	3301      	adds	r3, #1
 8006774:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8006776:	68f8      	ldr	r0, [r7, #12]
 8006778:	f7ff fa33 	bl	8005be2 <SWAPBYTE>
 800677c:	4603      	mov	r3, r0
 800677e:	461a      	mov	r2, r3
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	3301      	adds	r3, #1
 8006788:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	3301      	adds	r3, #1
 800678e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8006790:	68f8      	ldr	r0, [r7, #12]
 8006792:	f7ff fa26 	bl	8005be2 <SWAPBYTE>
 8006796:	4603      	mov	r3, r0
 8006798:	461a      	mov	r2, r3
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	80da      	strh	r2, [r3, #6]
}
 800679e:	bf00      	nop
 80067a0:	3710      	adds	r7, #16
 80067a2:	46bd      	mov	sp, r7
 80067a4:	bd80      	pop	{r7, pc}

080067a6 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80067a6:	b580      	push	{r7, lr}
 80067a8:	b082      	sub	sp, #8
 80067aa:	af00      	add	r7, sp, #0
 80067ac:	6078      	str	r0, [r7, #4]
 80067ae:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80067b0:	2180      	movs	r1, #128	; 0x80
 80067b2:	6878      	ldr	r0, [r7, #4]
 80067b4:	f000 f982 	bl	8006abc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80067b8:	2100      	movs	r1, #0
 80067ba:	6878      	ldr	r0, [r7, #4]
 80067bc:	f000 f97e 	bl	8006abc <USBD_LL_StallEP>
}
 80067c0:	bf00      	nop
 80067c2:	3708      	adds	r7, #8
 80067c4:	46bd      	mov	sp, r7
 80067c6:	bd80      	pop	{r7, pc}

080067c8 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80067c8:	b580      	push	{r7, lr}
 80067ca:	b084      	sub	sp, #16
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	60f8      	str	r0, [r7, #12]
 80067d0:	60b9      	str	r1, [r7, #8]
 80067d2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	2202      	movs	r2, #2
 80067d8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	687a      	ldr	r2, [r7, #4]
 80067e0:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	687a      	ldr	r2, [r7, #4]
 80067e6:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	68ba      	ldr	r2, [r7, #8]
 80067ec:	2100      	movs	r1, #0
 80067ee:	68f8      	ldr	r0, [r7, #12]
 80067f0:	f000 f9ed 	bl	8006bce <USBD_LL_Transmit>

  return USBD_OK;
 80067f4:	2300      	movs	r3, #0
}
 80067f6:	4618      	mov	r0, r3
 80067f8:	3710      	adds	r7, #16
 80067fa:	46bd      	mov	sp, r7
 80067fc:	bd80      	pop	{r7, pc}

080067fe <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80067fe:	b580      	push	{r7, lr}
 8006800:	b084      	sub	sp, #16
 8006802:	af00      	add	r7, sp, #0
 8006804:	60f8      	str	r0, [r7, #12]
 8006806:	60b9      	str	r1, [r7, #8]
 8006808:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	68ba      	ldr	r2, [r7, #8]
 800680e:	2100      	movs	r1, #0
 8006810:	68f8      	ldr	r0, [r7, #12]
 8006812:	f000 f9dc 	bl	8006bce <USBD_LL_Transmit>

  return USBD_OK;
 8006816:	2300      	movs	r3, #0
}
 8006818:	4618      	mov	r0, r3
 800681a:	3710      	adds	r7, #16
 800681c:	46bd      	mov	sp, r7
 800681e:	bd80      	pop	{r7, pc}

08006820 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8006820:	b580      	push	{r7, lr}
 8006822:	b084      	sub	sp, #16
 8006824:	af00      	add	r7, sp, #0
 8006826:	60f8      	str	r0, [r7, #12]
 8006828:	60b9      	str	r1, [r7, #8]
 800682a:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	68ba      	ldr	r2, [r7, #8]
 8006830:	2100      	movs	r1, #0
 8006832:	68f8      	ldr	r0, [r7, #12]
 8006834:	f000 f9ec 	bl	8006c10 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006838:	2300      	movs	r3, #0
}
 800683a:	4618      	mov	r0, r3
 800683c:	3710      	adds	r7, #16
 800683e:	46bd      	mov	sp, r7
 8006840:	bd80      	pop	{r7, pc}

08006842 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006842:	b580      	push	{r7, lr}
 8006844:	b082      	sub	sp, #8
 8006846:	af00      	add	r7, sp, #0
 8006848:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	2204      	movs	r2, #4
 800684e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006852:	2300      	movs	r3, #0
 8006854:	2200      	movs	r2, #0
 8006856:	2100      	movs	r1, #0
 8006858:	6878      	ldr	r0, [r7, #4]
 800685a:	f000 f9b8 	bl	8006bce <USBD_LL_Transmit>

  return USBD_OK;
 800685e:	2300      	movs	r3, #0
}
 8006860:	4618      	mov	r0, r3
 8006862:	3708      	adds	r7, #8
 8006864:	46bd      	mov	sp, r7
 8006866:	bd80      	pop	{r7, pc}

08006868 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006868:	b580      	push	{r7, lr}
 800686a:	b082      	sub	sp, #8
 800686c:	af00      	add	r7, sp, #0
 800686e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	2205      	movs	r2, #5
 8006874:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006878:	2300      	movs	r3, #0
 800687a:	2200      	movs	r2, #0
 800687c:	2100      	movs	r1, #0
 800687e:	6878      	ldr	r0, [r7, #4]
 8006880:	f000 f9c6 	bl	8006c10 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006884:	2300      	movs	r3, #0
}
 8006886:	4618      	mov	r0, r3
 8006888:	3708      	adds	r7, #8
 800688a:	46bd      	mov	sp, r7
 800688c:	bd80      	pop	{r7, pc}

0800688e <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800688e:	b580      	push	{r7, lr}
 8006890:	b082      	sub	sp, #8
 8006892:	af00      	add	r7, sp, #0
 8006894:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80068a2:	4619      	mov	r1, r3
 80068a4:	4610      	mov	r0, r2
 80068a6:	f7fe fe86 	bl	80055b6 <USBD_LL_SetupStage>
}
 80068aa:	bf00      	nop
 80068ac:	3708      	adds	r7, #8
 80068ae:	46bd      	mov	sp, r7
 80068b0:	bd80      	pop	{r7, pc}

080068b2 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80068b2:	b580      	push	{r7, lr}
 80068b4:	b082      	sub	sp, #8
 80068b6:	af00      	add	r7, sp, #0
 80068b8:	6078      	str	r0, [r7, #4]
 80068ba:	460b      	mov	r3, r1
 80068bc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80068c4:	78fa      	ldrb	r2, [r7, #3]
 80068c6:	6879      	ldr	r1, [r7, #4]
 80068c8:	4613      	mov	r3, r2
 80068ca:	00db      	lsls	r3, r3, #3
 80068cc:	4413      	add	r3, r2
 80068ce:	009b      	lsls	r3, r3, #2
 80068d0:	440b      	add	r3, r1
 80068d2:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80068d6:	681a      	ldr	r2, [r3, #0]
 80068d8:	78fb      	ldrb	r3, [r7, #3]
 80068da:	4619      	mov	r1, r3
 80068dc:	f7fe fec0 	bl	8005660 <USBD_LL_DataOutStage>
}
 80068e0:	bf00      	nop
 80068e2:	3708      	adds	r7, #8
 80068e4:	46bd      	mov	sp, r7
 80068e6:	bd80      	pop	{r7, pc}

080068e8 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80068e8:	b580      	push	{r7, lr}
 80068ea:	b082      	sub	sp, #8
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	6078      	str	r0, [r7, #4]
 80068f0:	460b      	mov	r3, r1
 80068f2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80068fa:	78fa      	ldrb	r2, [r7, #3]
 80068fc:	6879      	ldr	r1, [r7, #4]
 80068fe:	4613      	mov	r3, r2
 8006900:	00db      	lsls	r3, r3, #3
 8006902:	4413      	add	r3, r2
 8006904:	009b      	lsls	r3, r3, #2
 8006906:	440b      	add	r3, r1
 8006908:	334c      	adds	r3, #76	; 0x4c
 800690a:	681a      	ldr	r2, [r3, #0]
 800690c:	78fb      	ldrb	r3, [r7, #3]
 800690e:	4619      	mov	r1, r3
 8006910:	f7fe ff59 	bl	80057c6 <USBD_LL_DataInStage>
}
 8006914:	bf00      	nop
 8006916:	3708      	adds	r7, #8
 8006918:	46bd      	mov	sp, r7
 800691a:	bd80      	pop	{r7, pc}

0800691c <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800691c:	b580      	push	{r7, lr}
 800691e:	b082      	sub	sp, #8
 8006920:	af00      	add	r7, sp, #0
 8006922:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800692a:	4618      	mov	r0, r3
 800692c:	f7ff f88d 	bl	8005a4a <USBD_LL_SOF>
}
 8006930:	bf00      	nop
 8006932:	3708      	adds	r7, #8
 8006934:	46bd      	mov	sp, r7
 8006936:	bd80      	pop	{r7, pc}

08006938 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006938:	b580      	push	{r7, lr}
 800693a:	b084      	sub	sp, #16
 800693c:	af00      	add	r7, sp, #0
 800693e:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8006940:	2301      	movs	r3, #1
 8006942:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	68db      	ldr	r3, [r3, #12]
 8006948:	2b00      	cmp	r3, #0
 800694a:	d102      	bne.n	8006952 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800694c:	2300      	movs	r3, #0
 800694e:	73fb      	strb	r3, [r7, #15]
 8006950:	e008      	b.n	8006964 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	68db      	ldr	r3, [r3, #12]
 8006956:	2b02      	cmp	r3, #2
 8006958:	d102      	bne.n	8006960 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800695a:	2301      	movs	r3, #1
 800695c:	73fb      	strb	r3, [r7, #15]
 800695e:	e001      	b.n	8006964 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8006960:	f7f9 fff4 	bl	800094c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800696a:	7bfa      	ldrb	r2, [r7, #15]
 800696c:	4611      	mov	r1, r2
 800696e:	4618      	mov	r0, r3
 8006970:	f7ff f82d 	bl	80059ce <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800697a:	4618      	mov	r0, r3
 800697c:	f7fe ffd5 	bl	800592a <USBD_LL_Reset>
}
 8006980:	bf00      	nop
 8006982:	3710      	adds	r7, #16
 8006984:	46bd      	mov	sp, r7
 8006986:	bd80      	pop	{r7, pc}

08006988 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006988:	b580      	push	{r7, lr}
 800698a:	b082      	sub	sp, #8
 800698c:	af00      	add	r7, sp, #0
 800698e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006996:	4618      	mov	r0, r3
 8006998:	f7ff f829 	bl	80059ee <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	687a      	ldr	r2, [r7, #4]
 80069a8:	6812      	ldr	r2, [r2, #0]
 80069aa:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80069ae:	f043 0301 	orr.w	r3, r3, #1
 80069b2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	6a1b      	ldr	r3, [r3, #32]
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d005      	beq.n	80069c8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80069bc:	4b04      	ldr	r3, [pc, #16]	; (80069d0 <HAL_PCD_SuspendCallback+0x48>)
 80069be:	691b      	ldr	r3, [r3, #16]
 80069c0:	4a03      	ldr	r2, [pc, #12]	; (80069d0 <HAL_PCD_SuspendCallback+0x48>)
 80069c2:	f043 0306 	orr.w	r3, r3, #6
 80069c6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80069c8:	bf00      	nop
 80069ca:	3708      	adds	r7, #8
 80069cc:	46bd      	mov	sp, r7
 80069ce:	bd80      	pop	{r7, pc}
 80069d0:	e000ed00 	.word	0xe000ed00

080069d4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80069d4:	b580      	push	{r7, lr}
 80069d6:	b082      	sub	sp, #8
 80069d8:	af00      	add	r7, sp, #0
 80069da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80069e2:	4618      	mov	r0, r3
 80069e4:	f7ff f819 	bl	8005a1a <USBD_LL_Resume>
}
 80069e8:	bf00      	nop
 80069ea:	3708      	adds	r7, #8
 80069ec:	46bd      	mov	sp, r7
 80069ee:	bd80      	pop	{r7, pc}

080069f0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80069f0:	b580      	push	{r7, lr}
 80069f2:	b082      	sub	sp, #8
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	6078      	str	r0, [r7, #4]
 80069f8:	460b      	mov	r3, r1
 80069fa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006a02:	78fa      	ldrb	r2, [r7, #3]
 8006a04:	4611      	mov	r1, r2
 8006a06:	4618      	mov	r0, r3
 8006a08:	f7ff f871 	bl	8005aee <USBD_LL_IsoOUTIncomplete>
}
 8006a0c:	bf00      	nop
 8006a0e:	3708      	adds	r7, #8
 8006a10:	46bd      	mov	sp, r7
 8006a12:	bd80      	pop	{r7, pc}

08006a14 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006a14:	b580      	push	{r7, lr}
 8006a16:	b082      	sub	sp, #8
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	6078      	str	r0, [r7, #4]
 8006a1c:	460b      	mov	r3, r1
 8006a1e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006a26:	78fa      	ldrb	r2, [r7, #3]
 8006a28:	4611      	mov	r1, r2
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	f7ff f82d 	bl	8005a8a <USBD_LL_IsoINIncomplete>
}
 8006a30:	bf00      	nop
 8006a32:	3708      	adds	r7, #8
 8006a34:	46bd      	mov	sp, r7
 8006a36:	bd80      	pop	{r7, pc}

08006a38 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006a38:	b580      	push	{r7, lr}
 8006a3a:	b082      	sub	sp, #8
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006a46:	4618      	mov	r0, r3
 8006a48:	f7ff f883 	bl	8005b52 <USBD_LL_DevConnected>
}
 8006a4c:	bf00      	nop
 8006a4e:	3708      	adds	r7, #8
 8006a50:	46bd      	mov	sp, r7
 8006a52:	bd80      	pop	{r7, pc}

08006a54 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006a54:	b580      	push	{r7, lr}
 8006a56:	b082      	sub	sp, #8
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006a62:	4618      	mov	r0, r3
 8006a64:	f7ff f880 	bl	8005b68 <USBD_LL_DevDisconnected>
}
 8006a68:	bf00      	nop
 8006a6a:	3708      	adds	r7, #8
 8006a6c:	46bd      	mov	sp, r7
 8006a6e:	bd80      	pop	{r7, pc}

08006a70 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8006a70:	b580      	push	{r7, lr}
 8006a72:	b084      	sub	sp, #16
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	6078      	str	r0, [r7, #4]
 8006a78:	4608      	mov	r0, r1
 8006a7a:	4611      	mov	r1, r2
 8006a7c:	461a      	mov	r2, r3
 8006a7e:	4603      	mov	r3, r0
 8006a80:	70fb      	strb	r3, [r7, #3]
 8006a82:	460b      	mov	r3, r1
 8006a84:	70bb      	strb	r3, [r7, #2]
 8006a86:	4613      	mov	r3, r2
 8006a88:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006a8a:	2300      	movs	r3, #0
 8006a8c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006a8e:	2300      	movs	r3, #0
 8006a90:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8006a98:	78bb      	ldrb	r3, [r7, #2]
 8006a9a:	883a      	ldrh	r2, [r7, #0]
 8006a9c:	78f9      	ldrb	r1, [r7, #3]
 8006a9e:	f7fb fcd7 	bl	8002450 <HAL_PCD_EP_Open>
 8006aa2:	4603      	mov	r3, r0
 8006aa4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006aa6:	7bfb      	ldrb	r3, [r7, #15]
 8006aa8:	4618      	mov	r0, r3
 8006aaa:	f000 f8d3 	bl	8006c54 <USBD_Get_USB_Status>
 8006aae:	4603      	mov	r3, r0
 8006ab0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006ab2:	7bbb      	ldrb	r3, [r7, #14]
}
 8006ab4:	4618      	mov	r0, r3
 8006ab6:	3710      	adds	r7, #16
 8006ab8:	46bd      	mov	sp, r7
 8006aba:	bd80      	pop	{r7, pc}

08006abc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006abc:	b580      	push	{r7, lr}
 8006abe:	b084      	sub	sp, #16
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	6078      	str	r0, [r7, #4]
 8006ac4:	460b      	mov	r3, r1
 8006ac6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006ac8:	2300      	movs	r3, #0
 8006aca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006acc:	2300      	movs	r3, #0
 8006ace:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006ad6:	78fa      	ldrb	r2, [r7, #3]
 8006ad8:	4611      	mov	r1, r2
 8006ada:	4618      	mov	r0, r3
 8006adc:	f7fb fdb5 	bl	800264a <HAL_PCD_EP_SetStall>
 8006ae0:	4603      	mov	r3, r0
 8006ae2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006ae4:	7bfb      	ldrb	r3, [r7, #15]
 8006ae6:	4618      	mov	r0, r3
 8006ae8:	f000 f8b4 	bl	8006c54 <USBD_Get_USB_Status>
 8006aec:	4603      	mov	r3, r0
 8006aee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006af0:	7bbb      	ldrb	r3, [r7, #14]
}
 8006af2:	4618      	mov	r0, r3
 8006af4:	3710      	adds	r7, #16
 8006af6:	46bd      	mov	sp, r7
 8006af8:	bd80      	pop	{r7, pc}

08006afa <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006afa:	b580      	push	{r7, lr}
 8006afc:	b084      	sub	sp, #16
 8006afe:	af00      	add	r7, sp, #0
 8006b00:	6078      	str	r0, [r7, #4]
 8006b02:	460b      	mov	r3, r1
 8006b04:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006b06:	2300      	movs	r3, #0
 8006b08:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006b0a:	2300      	movs	r3, #0
 8006b0c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006b14:	78fa      	ldrb	r2, [r7, #3]
 8006b16:	4611      	mov	r1, r2
 8006b18:	4618      	mov	r0, r3
 8006b1a:	f7fb fdfa 	bl	8002712 <HAL_PCD_EP_ClrStall>
 8006b1e:	4603      	mov	r3, r0
 8006b20:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006b22:	7bfb      	ldrb	r3, [r7, #15]
 8006b24:	4618      	mov	r0, r3
 8006b26:	f000 f895 	bl	8006c54 <USBD_Get_USB_Status>
 8006b2a:	4603      	mov	r3, r0
 8006b2c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006b2e:	7bbb      	ldrb	r3, [r7, #14]
}
 8006b30:	4618      	mov	r0, r3
 8006b32:	3710      	adds	r7, #16
 8006b34:	46bd      	mov	sp, r7
 8006b36:	bd80      	pop	{r7, pc}

08006b38 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006b38:	b480      	push	{r7}
 8006b3a:	b085      	sub	sp, #20
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	6078      	str	r0, [r7, #4]
 8006b40:	460b      	mov	r3, r1
 8006b42:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006b4a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8006b4c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	da0b      	bge.n	8006b6c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8006b54:	78fb      	ldrb	r3, [r7, #3]
 8006b56:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006b5a:	68f9      	ldr	r1, [r7, #12]
 8006b5c:	4613      	mov	r3, r2
 8006b5e:	00db      	lsls	r3, r3, #3
 8006b60:	4413      	add	r3, r2
 8006b62:	009b      	lsls	r3, r3, #2
 8006b64:	440b      	add	r3, r1
 8006b66:	333e      	adds	r3, #62	; 0x3e
 8006b68:	781b      	ldrb	r3, [r3, #0]
 8006b6a:	e00b      	b.n	8006b84 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8006b6c:	78fb      	ldrb	r3, [r7, #3]
 8006b6e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006b72:	68f9      	ldr	r1, [r7, #12]
 8006b74:	4613      	mov	r3, r2
 8006b76:	00db      	lsls	r3, r3, #3
 8006b78:	4413      	add	r3, r2
 8006b7a:	009b      	lsls	r3, r3, #2
 8006b7c:	440b      	add	r3, r1
 8006b7e:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8006b82:	781b      	ldrb	r3, [r3, #0]
  }
}
 8006b84:	4618      	mov	r0, r3
 8006b86:	3714      	adds	r7, #20
 8006b88:	46bd      	mov	sp, r7
 8006b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8e:	4770      	bx	lr

08006b90 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8006b90:	b580      	push	{r7, lr}
 8006b92:	b084      	sub	sp, #16
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	6078      	str	r0, [r7, #4]
 8006b98:	460b      	mov	r3, r1
 8006b9a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006b9c:	2300      	movs	r3, #0
 8006b9e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006ba0:	2300      	movs	r3, #0
 8006ba2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006baa:	78fa      	ldrb	r2, [r7, #3]
 8006bac:	4611      	mov	r1, r2
 8006bae:	4618      	mov	r0, r3
 8006bb0:	f7fb fc29 	bl	8002406 <HAL_PCD_SetAddress>
 8006bb4:	4603      	mov	r3, r0
 8006bb6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006bb8:	7bfb      	ldrb	r3, [r7, #15]
 8006bba:	4618      	mov	r0, r3
 8006bbc:	f000 f84a 	bl	8006c54 <USBD_Get_USB_Status>
 8006bc0:	4603      	mov	r3, r0
 8006bc2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006bc4:	7bbb      	ldrb	r3, [r7, #14]
}
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	3710      	adds	r7, #16
 8006bca:	46bd      	mov	sp, r7
 8006bcc:	bd80      	pop	{r7, pc}

08006bce <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8006bce:	b580      	push	{r7, lr}
 8006bd0:	b086      	sub	sp, #24
 8006bd2:	af00      	add	r7, sp, #0
 8006bd4:	60f8      	str	r0, [r7, #12]
 8006bd6:	607a      	str	r2, [r7, #4]
 8006bd8:	603b      	str	r3, [r7, #0]
 8006bda:	460b      	mov	r3, r1
 8006bdc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006bde:	2300      	movs	r3, #0
 8006be0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006be2:	2300      	movs	r3, #0
 8006be4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8006bec:	7af9      	ldrb	r1, [r7, #11]
 8006bee:	683b      	ldr	r3, [r7, #0]
 8006bf0:	687a      	ldr	r2, [r7, #4]
 8006bf2:	f7fb fce0 	bl	80025b6 <HAL_PCD_EP_Transmit>
 8006bf6:	4603      	mov	r3, r0
 8006bf8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006bfa:	7dfb      	ldrb	r3, [r7, #23]
 8006bfc:	4618      	mov	r0, r3
 8006bfe:	f000 f829 	bl	8006c54 <USBD_Get_USB_Status>
 8006c02:	4603      	mov	r3, r0
 8006c04:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8006c06:	7dbb      	ldrb	r3, [r7, #22]
}
 8006c08:	4618      	mov	r0, r3
 8006c0a:	3718      	adds	r7, #24
 8006c0c:	46bd      	mov	sp, r7
 8006c0e:	bd80      	pop	{r7, pc}

08006c10 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8006c10:	b580      	push	{r7, lr}
 8006c12:	b086      	sub	sp, #24
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	60f8      	str	r0, [r7, #12]
 8006c18:	607a      	str	r2, [r7, #4]
 8006c1a:	603b      	str	r3, [r7, #0]
 8006c1c:	460b      	mov	r3, r1
 8006c1e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006c20:	2300      	movs	r3, #0
 8006c22:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006c24:	2300      	movs	r3, #0
 8006c26:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8006c2e:	7af9      	ldrb	r1, [r7, #11]
 8006c30:	683b      	ldr	r3, [r7, #0]
 8006c32:	687a      	ldr	r2, [r7, #4]
 8006c34:	f7fb fc74 	bl	8002520 <HAL_PCD_EP_Receive>
 8006c38:	4603      	mov	r3, r0
 8006c3a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006c3c:	7dfb      	ldrb	r3, [r7, #23]
 8006c3e:	4618      	mov	r0, r3
 8006c40:	f000 f808 	bl	8006c54 <USBD_Get_USB_Status>
 8006c44:	4603      	mov	r3, r0
 8006c46:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8006c48:	7dbb      	ldrb	r3, [r7, #22]
}
 8006c4a:	4618      	mov	r0, r3
 8006c4c:	3718      	adds	r7, #24
 8006c4e:	46bd      	mov	sp, r7
 8006c50:	bd80      	pop	{r7, pc}
	...

08006c54 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8006c54:	b480      	push	{r7}
 8006c56:	b085      	sub	sp, #20
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	4603      	mov	r3, r0
 8006c5c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006c5e:	2300      	movs	r3, #0
 8006c60:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8006c62:	79fb      	ldrb	r3, [r7, #7]
 8006c64:	2b03      	cmp	r3, #3
 8006c66:	d817      	bhi.n	8006c98 <USBD_Get_USB_Status+0x44>
 8006c68:	a201      	add	r2, pc, #4	; (adr r2, 8006c70 <USBD_Get_USB_Status+0x1c>)
 8006c6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c6e:	bf00      	nop
 8006c70:	08006c81 	.word	0x08006c81
 8006c74:	08006c87 	.word	0x08006c87
 8006c78:	08006c8d 	.word	0x08006c8d
 8006c7c:	08006c93 	.word	0x08006c93
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8006c80:	2300      	movs	r3, #0
 8006c82:	73fb      	strb	r3, [r7, #15]
    break;
 8006c84:	e00b      	b.n	8006c9e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8006c86:	2303      	movs	r3, #3
 8006c88:	73fb      	strb	r3, [r7, #15]
    break;
 8006c8a:	e008      	b.n	8006c9e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006c8c:	2301      	movs	r3, #1
 8006c8e:	73fb      	strb	r3, [r7, #15]
    break;
 8006c90:	e005      	b.n	8006c9e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8006c92:	2303      	movs	r3, #3
 8006c94:	73fb      	strb	r3, [r7, #15]
    break;
 8006c96:	e002      	b.n	8006c9e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8006c98:	2303      	movs	r3, #3
 8006c9a:	73fb      	strb	r3, [r7, #15]
    break;
 8006c9c:	bf00      	nop
  }
  return usb_status;
 8006c9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ca0:	4618      	mov	r0, r3
 8006ca2:	3714      	adds	r7, #20
 8006ca4:	46bd      	mov	sp, r7
 8006ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006caa:	4770      	bx	lr

08006cac <__libc_init_array>:
 8006cac:	b570      	push	{r4, r5, r6, lr}
 8006cae:	4d0d      	ldr	r5, [pc, #52]	; (8006ce4 <__libc_init_array+0x38>)
 8006cb0:	4c0d      	ldr	r4, [pc, #52]	; (8006ce8 <__libc_init_array+0x3c>)
 8006cb2:	1b64      	subs	r4, r4, r5
 8006cb4:	10a4      	asrs	r4, r4, #2
 8006cb6:	2600      	movs	r6, #0
 8006cb8:	42a6      	cmp	r6, r4
 8006cba:	d109      	bne.n	8006cd0 <__libc_init_array+0x24>
 8006cbc:	4d0b      	ldr	r5, [pc, #44]	; (8006cec <__libc_init_array+0x40>)
 8006cbe:	4c0c      	ldr	r4, [pc, #48]	; (8006cf0 <__libc_init_array+0x44>)
 8006cc0:	f000 f820 	bl	8006d04 <_init>
 8006cc4:	1b64      	subs	r4, r4, r5
 8006cc6:	10a4      	asrs	r4, r4, #2
 8006cc8:	2600      	movs	r6, #0
 8006cca:	42a6      	cmp	r6, r4
 8006ccc:	d105      	bne.n	8006cda <__libc_init_array+0x2e>
 8006cce:	bd70      	pop	{r4, r5, r6, pc}
 8006cd0:	f855 3b04 	ldr.w	r3, [r5], #4
 8006cd4:	4798      	blx	r3
 8006cd6:	3601      	adds	r6, #1
 8006cd8:	e7ee      	b.n	8006cb8 <__libc_init_array+0xc>
 8006cda:	f855 3b04 	ldr.w	r3, [r5], #4
 8006cde:	4798      	blx	r3
 8006ce0:	3601      	adds	r6, #1
 8006ce2:	e7f2      	b.n	8006cca <__libc_init_array+0x1e>
 8006ce4:	08006d34 	.word	0x08006d34
 8006ce8:	08006d34 	.word	0x08006d34
 8006cec:	08006d34 	.word	0x08006d34
 8006cf0:	08006d38 	.word	0x08006d38

08006cf4 <memset>:
 8006cf4:	4402      	add	r2, r0
 8006cf6:	4603      	mov	r3, r0
 8006cf8:	4293      	cmp	r3, r2
 8006cfa:	d100      	bne.n	8006cfe <memset+0xa>
 8006cfc:	4770      	bx	lr
 8006cfe:	f803 1b01 	strb.w	r1, [r3], #1
 8006d02:	e7f9      	b.n	8006cf8 <memset+0x4>

08006d04 <_init>:
 8006d04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d06:	bf00      	nop
 8006d08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d0a:	bc08      	pop	{r3}
 8006d0c:	469e      	mov	lr, r3
 8006d0e:	4770      	bx	lr

08006d10 <_fini>:
 8006d10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d12:	bf00      	nop
 8006d14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d16:	bc08      	pop	{r3}
 8006d18:	469e      	mov	lr, r3
 8006d1a:	4770      	bx	lr
